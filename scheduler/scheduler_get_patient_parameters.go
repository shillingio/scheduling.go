// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetPatientParams creates a new SchedulerGetPatientParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetPatientParams() *SchedulerGetPatientParams {
	return &SchedulerGetPatientParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetPatientParamsWithTimeout creates a new SchedulerGetPatientParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetPatientParamsWithTimeout(timeout time.Duration) *SchedulerGetPatientParams {
	return &SchedulerGetPatientParams{
		timeout: timeout,
	}
}

// NewSchedulerGetPatientParamsWithContext creates a new SchedulerGetPatientParams object
// with the ability to set a context for a request.
func NewSchedulerGetPatientParamsWithContext(ctx context.Context) *SchedulerGetPatientParams {
	return &SchedulerGetPatientParams{
		Context: ctx,
	}
}

// NewSchedulerGetPatientParamsWithHTTPClient creates a new SchedulerGetPatientParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetPatientParamsWithHTTPClient(client *http.Client) *SchedulerGetPatientParams {
	return &SchedulerGetPatientParams{
		HTTPClient: client,
	}
}

/* SchedulerGetPatientParams contains all the parameters to send to the API endpoint
   for the scheduler get patient operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetPatientParams struct {

	// Active.
	Active *bool

	// CreatedAt.
	CreatedAt *string

	// CreatedBy.
	CreatedBy *string

	/* DataTypeURL.

	     A URL/resource name that uniquely identifies the type of the serialized
	protocol buffer message. This string must contain at least
	one "/" character. The last segment of the URL's path must represent
	the fully qualified name of the type (as in
	`path/google.protobuf.Duration`). The name should be in a canonical form
	(e.g., leading "." is not accepted).

	In practice, teams usually precompile into the binary all types that they
	expect it to use in the context of Any. However, for URLs which use the
	scheme `http`, `https`, or no scheme, one can optionally set up a type
	server that maps type URLs to message definitions as follows:

	* If no scheme is provided, `https` is assumed.
	* An HTTP GET on the URL must yield a [google.protobuf.Type][]
	  value in binary format, or produce an error.
	* Applications are allowed to cache lookup results based on the
	  URL, or have them precompiled into a binary to avoid any
	  lookup. Therefore, binary compatibility needs to be preserved
	  on changes to types. (Use versioned type names to manage
	  breaking changes.)

	Note: this functionality is not currently available in the official
	protobuf release, and it is not used for type URLs beginning with
	type.googleapis.com.

	Schemes other than `http`, `https` (or the empty scheme) might be
	used with implementation specific semantics.
	*/
	DataTypeURL *string

	/* DataValue.

	   Must be a valid serialized protocol buffer of the above specified type.

	   Format: byte
	*/
	DataValue *strfmt.Base64

	// GivenName.
	GivenName *string

	// ID.
	ID string

	// OrgID.
	OrgID *string

	// Prefix.
	Prefix *string

	// RefID.
	RefID *string

	// Suffix.
	Suffix *string

	// Surname.
	Surname *string

	// UpdatedAt.
	UpdatedAt *string

	// UpdatedBy.
	UpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get patient params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetPatientParams) WithDefaults() *SchedulerGetPatientParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get patient params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetPatientParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithTimeout(timeout time.Duration) *SchedulerGetPatientParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithContext(ctx context.Context) *SchedulerGetPatientParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithHTTPClient(client *http.Client) *SchedulerGetPatientParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithActive(active *bool) *SchedulerGetPatientParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetActive(active *bool) {
	o.Active = active
}

// WithCreatedAt adds the createdAt to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithCreatedAt(createdAt *string) *SchedulerGetPatientParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedBy adds the createdBy to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithCreatedBy(createdBy *string) *SchedulerGetPatientParams {
	o.SetCreatedBy(createdBy)
	return o
}

// SetCreatedBy adds the createdBy to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetCreatedBy(createdBy *string) {
	o.CreatedBy = createdBy
}

// WithDataTypeURL adds the dataTypeURL to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithDataTypeURL(dataTypeURL *string) *SchedulerGetPatientParams {
	o.SetDataTypeURL(dataTypeURL)
	return o
}

// SetDataTypeURL adds the dataTypeUrl to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetDataTypeURL(dataTypeURL *string) {
	o.DataTypeURL = dataTypeURL
}

// WithDataValue adds the dataValue to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithDataValue(dataValue *strfmt.Base64) *SchedulerGetPatientParams {
	o.SetDataValue(dataValue)
	return o
}

// SetDataValue adds the dataValue to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetDataValue(dataValue *strfmt.Base64) {
	o.DataValue = dataValue
}

// WithGivenName adds the givenName to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithGivenName(givenName *string) *SchedulerGetPatientParams {
	o.SetGivenName(givenName)
	return o
}

// SetGivenName adds the givenName to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetGivenName(givenName *string) {
	o.GivenName = givenName
}

// WithID adds the id to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithID(id string) *SchedulerGetPatientParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetID(id string) {
	o.ID = id
}

// WithOrgID adds the orgID to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithOrgID(orgID *string) *SchedulerGetPatientParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetOrgID(orgID *string) {
	o.OrgID = orgID
}

// WithPrefix adds the prefix to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithPrefix(prefix *string) *SchedulerGetPatientParams {
	o.SetPrefix(prefix)
	return o
}

// SetPrefix adds the prefix to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetPrefix(prefix *string) {
	o.Prefix = prefix
}

// WithRefID adds the refID to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithRefID(refID *string) *SchedulerGetPatientParams {
	o.SetRefID(refID)
	return o
}

// SetRefID adds the refId to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetRefID(refID *string) {
	o.RefID = refID
}

// WithSuffix adds the suffix to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithSuffix(suffix *string) *SchedulerGetPatientParams {
	o.SetSuffix(suffix)
	return o
}

// SetSuffix adds the suffix to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetSuffix(suffix *string) {
	o.Suffix = suffix
}

// WithSurname adds the surname to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithSurname(surname *string) *SchedulerGetPatientParams {
	o.SetSurname(surname)
	return o
}

// SetSurname adds the surname to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetSurname(surname *string) {
	o.Surname = surname
}

// WithUpdatedAt adds the updatedAt to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithUpdatedAt(updatedAt *string) *SchedulerGetPatientParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedBy adds the updatedBy to the scheduler get patient params
func (o *SchedulerGetPatientParams) WithUpdatedBy(updatedBy *string) *SchedulerGetPatientParams {
	o.SetUpdatedBy(updatedBy)
	return o
}

// SetUpdatedBy adds the updatedBy to the scheduler get patient params
func (o *SchedulerGetPatientParams) SetUpdatedBy(updatedBy *string) {
	o.UpdatedBy = updatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetPatientParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {

			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.CreatedBy != nil {

		// query param created_by
		var qrCreatedBy string

		if o.CreatedBy != nil {
			qrCreatedBy = *o.CreatedBy
		}
		qCreatedBy := qrCreatedBy
		if qCreatedBy != "" {

			if err := r.SetQueryParam("created_by", qCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.DataTypeURL != nil {

		// query param data.type_url
		var qrDataTypeURL string

		if o.DataTypeURL != nil {
			qrDataTypeURL = *o.DataTypeURL
		}
		qDataTypeURL := qrDataTypeURL
		if qDataTypeURL != "" {

			if err := r.SetQueryParam("data.type_url", qDataTypeURL); err != nil {
				return err
			}
		}
	}

	if o.DataValue != nil {

		// query param data.value
		var qrDataValue strfmt.Base64

		if o.DataValue != nil {
			qrDataValue = *o.DataValue
		}
		qDataValue := qrDataValue.String()
		if qDataValue != "" {

			if err := r.SetQueryParam("data.value", qDataValue); err != nil {
				return err
			}
		}
	}

	if o.GivenName != nil {

		// query param given_name
		var qrGivenName string

		if o.GivenName != nil {
			qrGivenName = *o.GivenName
		}
		qGivenName := qrGivenName
		if qGivenName != "" {

			if err := r.SetQueryParam("given_name", qGivenName); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.OrgID != nil {

		// query param org_id
		var qrOrgID string

		if o.OrgID != nil {
			qrOrgID = *o.OrgID
		}
		qOrgID := qrOrgID
		if qOrgID != "" {

			if err := r.SetQueryParam("org_id", qOrgID); err != nil {
				return err
			}
		}
	}

	if o.Prefix != nil {

		// query param prefix
		var qrPrefix string

		if o.Prefix != nil {
			qrPrefix = *o.Prefix
		}
		qPrefix := qrPrefix
		if qPrefix != "" {

			if err := r.SetQueryParam("prefix", qPrefix); err != nil {
				return err
			}
		}
	}

	if o.RefID != nil {

		// query param ref_id
		var qrRefID string

		if o.RefID != nil {
			qrRefID = *o.RefID
		}
		qRefID := qrRefID
		if qRefID != "" {

			if err := r.SetQueryParam("ref_id", qRefID); err != nil {
				return err
			}
		}
	}

	if o.Suffix != nil {

		// query param suffix
		var qrSuffix string

		if o.Suffix != nil {
			qrSuffix = *o.Suffix
		}
		qSuffix := qrSuffix
		if qSuffix != "" {

			if err := r.SetQueryParam("suffix", qSuffix); err != nil {
				return err
			}
		}
	}

	if o.Surname != nil {

		// query param surname
		var qrSurname string

		if o.Surname != nil {
			qrSurname = *o.Surname
		}
		qSurname := qrSurname
		if qSurname != "" {

			if err := r.SetQueryParam("surname", qSurname); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.UpdatedBy != nil {

		// query param updated_by
		var qrUpdatedBy string

		if o.UpdatedBy != nil {
			qrUpdatedBy = *o.UpdatedBy
		}
		qUpdatedBy := qrUpdatedBy
		if qUpdatedBy != "" {

			if err := r.SetQueryParam("updated_by", qUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
