// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetServicesParams creates a new SchedulerGetServicesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetServicesParams() *SchedulerGetServicesParams {
	return &SchedulerGetServicesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetServicesParamsWithTimeout creates a new SchedulerGetServicesParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetServicesParamsWithTimeout(timeout time.Duration) *SchedulerGetServicesParams {
	return &SchedulerGetServicesParams{
		timeout: timeout,
	}
}

// NewSchedulerGetServicesParamsWithContext creates a new SchedulerGetServicesParams object
// with the ability to set a context for a request.
func NewSchedulerGetServicesParamsWithContext(ctx context.Context) *SchedulerGetServicesParams {
	return &SchedulerGetServicesParams{
		Context: ctx,
	}
}

// NewSchedulerGetServicesParamsWithHTTPClient creates a new SchedulerGetServicesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetServicesParamsWithHTTPClient(client *http.Client) *SchedulerGetServicesParams {
	return &SchedulerGetServicesParams{
		HTTPClient: client,
	}
}

/* SchedulerGetServicesParams contains all the parameters to send to the API endpoint
   for the scheduler get services operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetServicesParams struct {

	// ID.
	ID *string

	// Ids.
	Ids []string

	// Limit.
	//
	// Format: int32
	Limit *int32

	// Offset.
	//
	// Format: int32
	Offset *int32

	// OrganizationID.
	OrganizationID *string

	// ServiceActive.
	ServiceActive *bool

	// ServiceConfigDurations.
	ServiceConfigDurations []int32

	// ServiceConfigFixedDuration.
	//
	// Format: int32
	ServiceConfigFixedDuration *int32

	// ServiceCreatedAt.
	ServiceCreatedAt *string

	// ServiceCreatedBy.
	ServiceCreatedBy *string

	// ServiceDescription.
	ServiceDescription *string

	// ServiceID.
	ServiceID *string

	// ServiceName.
	ServiceName *string

	// ServiceOrgID.
	ServiceOrgID *string

	// ServiceRefID.
	ServiceRefID *string

	// ServiceUpdatedAt.
	ServiceUpdatedAt *string

	// ServiceUpdatedBy.
	ServiceUpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get services params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetServicesParams) WithDefaults() *SchedulerGetServicesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get services params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetServicesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get services params
func (o *SchedulerGetServicesParams) WithTimeout(timeout time.Duration) *SchedulerGetServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get services params
func (o *SchedulerGetServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get services params
func (o *SchedulerGetServicesParams) WithContext(ctx context.Context) *SchedulerGetServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get services params
func (o *SchedulerGetServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get services params
func (o *SchedulerGetServicesParams) WithHTTPClient(client *http.Client) *SchedulerGetServicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get services params
func (o *SchedulerGetServicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the scheduler get services params
func (o *SchedulerGetServicesParams) WithID(id *string) *SchedulerGetServicesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get services params
func (o *SchedulerGetServicesParams) SetID(id *string) {
	o.ID = id
}

// WithIds adds the ids to the scheduler get services params
func (o *SchedulerGetServicesParams) WithIds(ids []string) *SchedulerGetServicesParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the scheduler get services params
func (o *SchedulerGetServicesParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithLimit adds the limit to the scheduler get services params
func (o *SchedulerGetServicesParams) WithLimit(limit *int32) *SchedulerGetServicesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the scheduler get services params
func (o *SchedulerGetServicesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the scheduler get services params
func (o *SchedulerGetServicesParams) WithOffset(offset *int32) *SchedulerGetServicesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the scheduler get services params
func (o *SchedulerGetServicesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the scheduler get services params
func (o *SchedulerGetServicesParams) WithOrganizationID(organizationID *string) *SchedulerGetServicesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the scheduler get services params
func (o *SchedulerGetServicesParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithServiceActive adds the serviceActive to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceActive(serviceActive *bool) *SchedulerGetServicesParams {
	o.SetServiceActive(serviceActive)
	return o
}

// SetServiceActive adds the serviceActive to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceActive(serviceActive *bool) {
	o.ServiceActive = serviceActive
}

// WithServiceConfigDurations adds the serviceConfigDurations to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceConfigDurations(serviceConfigDurations []int32) *SchedulerGetServicesParams {
	o.SetServiceConfigDurations(serviceConfigDurations)
	return o
}

// SetServiceConfigDurations adds the serviceConfigDurations to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceConfigDurations(serviceConfigDurations []int32) {
	o.ServiceConfigDurations = serviceConfigDurations
}

// WithServiceConfigFixedDuration adds the serviceConfigFixedDuration to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceConfigFixedDuration(serviceConfigFixedDuration *int32) *SchedulerGetServicesParams {
	o.SetServiceConfigFixedDuration(serviceConfigFixedDuration)
	return o
}

// SetServiceConfigFixedDuration adds the serviceConfigFixedDuration to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceConfigFixedDuration(serviceConfigFixedDuration *int32) {
	o.ServiceConfigFixedDuration = serviceConfigFixedDuration
}

// WithServiceCreatedAt adds the serviceCreatedAt to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceCreatedAt(serviceCreatedAt *string) *SchedulerGetServicesParams {
	o.SetServiceCreatedAt(serviceCreatedAt)
	return o
}

// SetServiceCreatedAt adds the serviceCreatedAt to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceCreatedAt(serviceCreatedAt *string) {
	o.ServiceCreatedAt = serviceCreatedAt
}

// WithServiceCreatedBy adds the serviceCreatedBy to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceCreatedBy(serviceCreatedBy *string) *SchedulerGetServicesParams {
	o.SetServiceCreatedBy(serviceCreatedBy)
	return o
}

// SetServiceCreatedBy adds the serviceCreatedBy to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceCreatedBy(serviceCreatedBy *string) {
	o.ServiceCreatedBy = serviceCreatedBy
}

// WithServiceDescription adds the serviceDescription to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceDescription(serviceDescription *string) *SchedulerGetServicesParams {
	o.SetServiceDescription(serviceDescription)
	return o
}

// SetServiceDescription adds the serviceDescription to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceDescription(serviceDescription *string) {
	o.ServiceDescription = serviceDescription
}

// WithServiceID adds the serviceID to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceID(serviceID *string) *SchedulerGetServicesParams {
	o.SetServiceID(serviceID)
	return o
}

// SetServiceID adds the serviceId to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceID(serviceID *string) {
	o.ServiceID = serviceID
}

// WithServiceName adds the serviceName to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceName(serviceName *string) *SchedulerGetServicesParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithServiceOrgID adds the serviceOrgID to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceOrgID(serviceOrgID *string) *SchedulerGetServicesParams {
	o.SetServiceOrgID(serviceOrgID)
	return o
}

// SetServiceOrgID adds the serviceOrgId to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceOrgID(serviceOrgID *string) {
	o.ServiceOrgID = serviceOrgID
}

// WithServiceRefID adds the serviceRefID to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceRefID(serviceRefID *string) *SchedulerGetServicesParams {
	o.SetServiceRefID(serviceRefID)
	return o
}

// SetServiceRefID adds the serviceRefId to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceRefID(serviceRefID *string) {
	o.ServiceRefID = serviceRefID
}

// WithServiceUpdatedAt adds the serviceUpdatedAt to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceUpdatedAt(serviceUpdatedAt *string) *SchedulerGetServicesParams {
	o.SetServiceUpdatedAt(serviceUpdatedAt)
	return o
}

// SetServiceUpdatedAt adds the serviceUpdatedAt to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceUpdatedAt(serviceUpdatedAt *string) {
	o.ServiceUpdatedAt = serviceUpdatedAt
}

// WithServiceUpdatedBy adds the serviceUpdatedBy to the scheduler get services params
func (o *SchedulerGetServicesParams) WithServiceUpdatedBy(serviceUpdatedBy *string) *SchedulerGetServicesParams {
	o.SetServiceUpdatedBy(serviceUpdatedBy)
	return o
}

// SetServiceUpdatedBy adds the serviceUpdatedBy to the scheduler get services params
func (o *SchedulerGetServicesParams) SetServiceUpdatedBy(serviceUpdatedBy *string) {
	o.ServiceUpdatedBy = serviceUpdatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.ServiceActive != nil {

		// query param service.active
		var qrServiceActive bool

		if o.ServiceActive != nil {
			qrServiceActive = *o.ServiceActive
		}
		qServiceActive := swag.FormatBool(qrServiceActive)
		if qServiceActive != "" {

			if err := r.SetQueryParam("service.active", qServiceActive); err != nil {
				return err
			}
		}
	}

	if o.ServiceConfigDurations != nil {

		// binding items for service.config.durations
		joinedServiceConfigDurations := o.bindParamServiceConfigDurations(reg)

		// query array param service.config.durations
		if err := r.SetQueryParam("service.config.durations", joinedServiceConfigDurations...); err != nil {
			return err
		}
	}

	if o.ServiceConfigFixedDuration != nil {

		// query param service.config.fixed_duration
		var qrServiceConfigFixedDuration int32

		if o.ServiceConfigFixedDuration != nil {
			qrServiceConfigFixedDuration = *o.ServiceConfigFixedDuration
		}
		qServiceConfigFixedDuration := swag.FormatInt32(qrServiceConfigFixedDuration)
		if qServiceConfigFixedDuration != "" {

			if err := r.SetQueryParam("service.config.fixed_duration", qServiceConfigFixedDuration); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedAt != nil {

		// query param service.created_at
		var qrServiceCreatedAt string

		if o.ServiceCreatedAt != nil {
			qrServiceCreatedAt = *o.ServiceCreatedAt
		}
		qServiceCreatedAt := qrServiceCreatedAt
		if qServiceCreatedAt != "" {

			if err := r.SetQueryParam("service.created_at", qServiceCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedBy != nil {

		// query param service.created_by
		var qrServiceCreatedBy string

		if o.ServiceCreatedBy != nil {
			qrServiceCreatedBy = *o.ServiceCreatedBy
		}
		qServiceCreatedBy := qrServiceCreatedBy
		if qServiceCreatedBy != "" {

			if err := r.SetQueryParam("service.created_by", qServiceCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceDescription != nil {

		// query param service.description
		var qrServiceDescription string

		if o.ServiceDescription != nil {
			qrServiceDescription = *o.ServiceDescription
		}
		qServiceDescription := qrServiceDescription
		if qServiceDescription != "" {

			if err := r.SetQueryParam("service.description", qServiceDescription); err != nil {
				return err
			}
		}
	}

	if o.ServiceID != nil {

		// query param service.id
		var qrServiceID string

		if o.ServiceID != nil {
			qrServiceID = *o.ServiceID
		}
		qServiceID := qrServiceID
		if qServiceID != "" {

			if err := r.SetQueryParam("service.id", qServiceID); err != nil {
				return err
			}
		}
	}

	if o.ServiceName != nil {

		// query param service.name
		var qrServiceName string

		if o.ServiceName != nil {
			qrServiceName = *o.ServiceName
		}
		qServiceName := qrServiceName
		if qServiceName != "" {

			if err := r.SetQueryParam("service.name", qServiceName); err != nil {
				return err
			}
		}
	}

	if o.ServiceOrgID != nil {

		// query param service.org_id
		var qrServiceOrgID string

		if o.ServiceOrgID != nil {
			qrServiceOrgID = *o.ServiceOrgID
		}
		qServiceOrgID := qrServiceOrgID
		if qServiceOrgID != "" {

			if err := r.SetQueryParam("service.org_id", qServiceOrgID); err != nil {
				return err
			}
		}
	}

	if o.ServiceRefID != nil {

		// query param service.ref_id
		var qrServiceRefID string

		if o.ServiceRefID != nil {
			qrServiceRefID = *o.ServiceRefID
		}
		qServiceRefID := qrServiceRefID
		if qServiceRefID != "" {

			if err := r.SetQueryParam("service.ref_id", qServiceRefID); err != nil {
				return err
			}
		}
	}

	if o.ServiceUpdatedAt != nil {

		// query param service.updated_at
		var qrServiceUpdatedAt string

		if o.ServiceUpdatedAt != nil {
			qrServiceUpdatedAt = *o.ServiceUpdatedAt
		}
		qServiceUpdatedAt := qrServiceUpdatedAt
		if qServiceUpdatedAt != "" {

			if err := r.SetQueryParam("service.updated_at", qServiceUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceUpdatedBy != nil {

		// query param service.updated_by
		var qrServiceUpdatedBy string

		if o.ServiceUpdatedBy != nil {
			qrServiceUpdatedBy = *o.ServiceUpdatedBy
		}
		qServiceUpdatedBy := qrServiceUpdatedBy
		if qServiceUpdatedBy != "" {

			if err := r.SetQueryParam("service.updated_by", qServiceUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerGetServices binds the parameter ids
func (o *SchedulerGetServicesParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}

// bindParamSchedulerGetServices binds the parameter service.config.durations
func (o *SchedulerGetServicesParams) bindParamServiceConfigDurations(formats strfmt.Registry) []string {
	serviceConfigDurationsIR := o.ServiceConfigDurations

	var serviceConfigDurationsIC []string
	for _, serviceConfigDurationsIIR := range serviceConfigDurationsIR { // explode []int32

		serviceConfigDurationsIIV := swag.FormatInt32(serviceConfigDurationsIIR) // int32 as string
		serviceConfigDurationsIC = append(serviceConfigDurationsIC, serviceConfigDurationsIIV)
	}

	// items.CollectionFormat: "multi"
	serviceConfigDurationsIS := swag.JoinByFormat(serviceConfigDurationsIC, "multi")

	return serviceConfigDurationsIS
}
