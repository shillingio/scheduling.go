// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/shillingio/scheduling.go/models"
)

// SchedulerDeactivateProviderReader is a Reader for the SchedulerDeactivateProvider structure.
type SchedulerDeactivateProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchedulerDeactivateProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchedulerDeactivateProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSchedulerDeactivateProviderDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSchedulerDeactivateProviderOK creates a SchedulerDeactivateProviderOK with default headers values
func NewSchedulerDeactivateProviderOK() *SchedulerDeactivateProviderOK {
	return &SchedulerDeactivateProviderOK{}
}

/* SchedulerDeactivateProviderOK describes a response with status code 200, with default header values.

A successful response.
*/
type SchedulerDeactivateProviderOK struct {
	Payload *models.SchedulerProviderResponse
}

func (o *SchedulerDeactivateProviderOK) Error() string {
	return fmt.Sprintf("[PUT /v1/providers/{id}/deactivate][%d] schedulerDeactivateProviderOK  %+v", 200, o.Payload)
}
func (o *SchedulerDeactivateProviderOK) GetPayload() *models.SchedulerProviderResponse {
	return o.Payload
}

func (o *SchedulerDeactivateProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SchedulerProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchedulerDeactivateProviderDefault creates a SchedulerDeactivateProviderDefault with default headers values
func NewSchedulerDeactivateProviderDefault(code int) *SchedulerDeactivateProviderDefault {
	return &SchedulerDeactivateProviderDefault{
		_statusCode: code,
	}
}

/* SchedulerDeactivateProviderDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type SchedulerDeactivateProviderDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// Code gets the status code for the scheduler deactivate provider default response
func (o *SchedulerDeactivateProviderDefault) Code() int {
	return o._statusCode
}

func (o *SchedulerDeactivateProviderDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/providers/{id}/deactivate][%d] Scheduler_DeactivateProvider default  %+v", o._statusCode, o.Payload)
}
func (o *SchedulerDeactivateProviderDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *SchedulerDeactivateProviderDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SchedulerDeactivateProviderBody scheduler deactivate provider body
// Example: {}
swagger:model SchedulerDeactivateProviderBody
*/
type SchedulerDeactivateProviderBody struct {

	// active
	Active bool `json:"active,omitempty"`

	// Available appointments for the provider
	Appointments map[string]models.SchedulingAppointment `json:"appointments,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// given name
	GivenName string `json:"given_name,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// prefix
	Prefix string `json:"prefix,omitempty"`

	// ref id
	RefID string `json:"ref_id,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// suffix
	Suffix string `json:"suffix,omitempty"`

	// surname
	Surname string `json:"surname,omitempty"`

	// timezone
	Timezone *models.SchedulingTimezone `json:"timezone,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this scheduler deactivate provider body
func (o *SchedulerDeactivateProviderBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppointments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SchedulerDeactivateProviderBody) validateAppointments(formats strfmt.Registry) error {
	if swag.IsZero(o.Appointments) { // not required
		return nil
	}

	for k := range o.Appointments {

		if err := validate.Required("body"+"."+"appointments"+"."+k, "body", o.Appointments[k]); err != nil {
			return err
		}
		if val, ok := o.Appointments[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "appointments" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "appointments" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (o *SchedulerDeactivateProviderBody) validateTimezone(formats strfmt.Registry) error {
	if swag.IsZero(o.Timezone) { // not required
		return nil
	}

	if o.Timezone != nil {
		if err := o.Timezone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "timezone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "timezone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduler deactivate provider body based on the context it is used
func (o *SchedulerDeactivateProviderBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppointments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimezone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SchedulerDeactivateProviderBody) contextValidateAppointments(ctx context.Context, formats strfmt.Registry) error {

	for k := range o.Appointments {

		if val, ok := o.Appointments[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (o *SchedulerDeactivateProviderBody) contextValidateTimezone(ctx context.Context, formats strfmt.Registry) error {

	if o.Timezone != nil {
		if err := o.Timezone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "timezone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "timezone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SchedulerDeactivateProviderBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SchedulerDeactivateProviderBody) UnmarshalBinary(b []byte) error {
	var res SchedulerDeactivateProviderBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
