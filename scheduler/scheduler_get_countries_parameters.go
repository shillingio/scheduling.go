// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetCountriesParams creates a new SchedulerGetCountriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetCountriesParams() *SchedulerGetCountriesParams {
	return &SchedulerGetCountriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetCountriesParamsWithTimeout creates a new SchedulerGetCountriesParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetCountriesParamsWithTimeout(timeout time.Duration) *SchedulerGetCountriesParams {
	return &SchedulerGetCountriesParams{
		timeout: timeout,
	}
}

// NewSchedulerGetCountriesParamsWithContext creates a new SchedulerGetCountriesParams object
// with the ability to set a context for a request.
func NewSchedulerGetCountriesParamsWithContext(ctx context.Context) *SchedulerGetCountriesParams {
	return &SchedulerGetCountriesParams{
		Context: ctx,
	}
}

// NewSchedulerGetCountriesParamsWithHTTPClient creates a new SchedulerGetCountriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetCountriesParamsWithHTTPClient(client *http.Client) *SchedulerGetCountriesParams {
	return &SchedulerGetCountriesParams{
		HTTPClient: client,
	}
}

/* SchedulerGetCountriesParams contains all the parameters to send to the API endpoint
   for the scheduler get countries operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetCountriesParams struct {

	// CountryCode.
	CountryCode *string

	// CountryID.
	//
	// Format: int32
	CountryID *int32

	// CountryName.
	CountryName *string

	// CountryPriority.
	//
	// Format: int32
	CountryPriority *int32

	// ID.
	ID *string

	// Ids.
	Ids []int32

	// Limit.
	//
	// Format: int32
	Limit *int32

	// Offset.
	//
	// Format: int32
	Offset *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get countries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetCountriesParams) WithDefaults() *SchedulerGetCountriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get countries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetCountriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithTimeout(timeout time.Duration) *SchedulerGetCountriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithContext(ctx context.Context) *SchedulerGetCountriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithHTTPClient(client *http.Client) *SchedulerGetCountriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountryCode adds the countryCode to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithCountryCode(countryCode *string) *SchedulerGetCountriesParams {
	o.SetCountryCode(countryCode)
	return o
}

// SetCountryCode adds the countryCode to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetCountryCode(countryCode *string) {
	o.CountryCode = countryCode
}

// WithCountryID adds the countryID to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithCountryID(countryID *int32) *SchedulerGetCountriesParams {
	o.SetCountryID(countryID)
	return o
}

// SetCountryID adds the countryId to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetCountryID(countryID *int32) {
	o.CountryID = countryID
}

// WithCountryName adds the countryName to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithCountryName(countryName *string) *SchedulerGetCountriesParams {
	o.SetCountryName(countryName)
	return o
}

// SetCountryName adds the countryName to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetCountryName(countryName *string) {
	o.CountryName = countryName
}

// WithCountryPriority adds the countryPriority to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithCountryPriority(countryPriority *int32) *SchedulerGetCountriesParams {
	o.SetCountryPriority(countryPriority)
	return o
}

// SetCountryPriority adds the countryPriority to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetCountryPriority(countryPriority *int32) {
	o.CountryPriority = countryPriority
}

// WithID adds the id to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithID(id *string) *SchedulerGetCountriesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetID(id *string) {
	o.ID = id
}

// WithIds adds the ids to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithIds(ids []int32) *SchedulerGetCountriesParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetIds(ids []int32) {
	o.Ids = ids
}

// WithLimit adds the limit to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithLimit(limit *int32) *SchedulerGetCountriesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the scheduler get countries params
func (o *SchedulerGetCountriesParams) WithOffset(offset *int32) *SchedulerGetCountriesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the scheduler get countries params
func (o *SchedulerGetCountriesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetCountriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CountryCode != nil {

		// query param country.code
		var qrCountryCode string

		if o.CountryCode != nil {
			qrCountryCode = *o.CountryCode
		}
		qCountryCode := qrCountryCode
		if qCountryCode != "" {

			if err := r.SetQueryParam("country.code", qCountryCode); err != nil {
				return err
			}
		}
	}

	if o.CountryID != nil {

		// query param country.id
		var qrCountryID int32

		if o.CountryID != nil {
			qrCountryID = *o.CountryID
		}
		qCountryID := swag.FormatInt32(qrCountryID)
		if qCountryID != "" {

			if err := r.SetQueryParam("country.id", qCountryID); err != nil {
				return err
			}
		}
	}

	if o.CountryName != nil {

		// query param country.name
		var qrCountryName string

		if o.CountryName != nil {
			qrCountryName = *o.CountryName
		}
		qCountryName := qrCountryName
		if qCountryName != "" {

			if err := r.SetQueryParam("country.name", qCountryName); err != nil {
				return err
			}
		}
	}

	if o.CountryPriority != nil {

		// query param country.priority
		var qrCountryPriority int32

		if o.CountryPriority != nil {
			qrCountryPriority = *o.CountryPriority
		}
		qCountryPriority := swag.FormatInt32(qrCountryPriority)
		if qCountryPriority != "" {

			if err := r.SetQueryParam("country.priority", qCountryPriority); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerGetCountries binds the parameter ids
func (o *SchedulerGetCountriesParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int32

		idsIIV := swag.FormatInt32(idsIIR) // int32 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}
