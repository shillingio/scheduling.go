// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/shillingio/scheduling.go/models"
)

// SchedulerActivateScheduleReader is a Reader for the SchedulerActivateSchedule structure.
type SchedulerActivateScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchedulerActivateScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchedulerActivateScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSchedulerActivateScheduleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSchedulerActivateScheduleOK creates a SchedulerActivateScheduleOK with default headers values
func NewSchedulerActivateScheduleOK() *SchedulerActivateScheduleOK {
	return &SchedulerActivateScheduleOK{}
}

/* SchedulerActivateScheduleOK describes a response with status code 200, with default header values.

A successful response.
*/
type SchedulerActivateScheduleOK struct {
	Payload *models.SchedulerScheduleResponse
}

func (o *SchedulerActivateScheduleOK) Error() string {
	return fmt.Sprintf("[PUT /v1/schedules/{id}/activate][%d] schedulerActivateScheduleOK  %+v", 200, o.Payload)
}
func (o *SchedulerActivateScheduleOK) GetPayload() *models.SchedulerScheduleResponse {
	return o.Payload
}

func (o *SchedulerActivateScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SchedulerScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchedulerActivateScheduleDefault creates a SchedulerActivateScheduleDefault with default headers values
func NewSchedulerActivateScheduleDefault(code int) *SchedulerActivateScheduleDefault {
	return &SchedulerActivateScheduleDefault{
		_statusCode: code,
	}
}

/* SchedulerActivateScheduleDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type SchedulerActivateScheduleDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// Code gets the status code for the scheduler activate schedule default response
func (o *SchedulerActivateScheduleDefault) Code() int {
	return o._statusCode
}

func (o *SchedulerActivateScheduleDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/schedules/{id}/activate][%d] Scheduler_ActivateSchedule default  %+v", o._statusCode, o.Payload)
}
func (o *SchedulerActivateScheduleDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *SchedulerActivateScheduleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SchedulerActivateScheduleBody scheduler activate schedule body
swagger:model SchedulerActivateScheduleBody
*/
type SchedulerActivateScheduleBody struct {

	// active
	Active bool `json:"active,omitempty"`

	// active from
	ActiveFrom string `json:"active_from,omitempty"`

	// active to
	ActiveTo string `json:"active_to,omitempty"`

	// blocks
	Blocks []*models.SchedulingScheduleBlock `json:"blocks"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// default
	Default bool `json:"default,omitempty"`

	// include blocks
	IncludeBlocks bool `json:"include_blocks,omitempty"`

	// max per
	MaxPer int32 `json:"max_per,omitempty"`

	// max per type
	MaxPerType string `json:"max_per_type,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider
	Provider *models.SchedulingProvider `json:"provider,omitempty"`

	// timezone
	Timezone *models.SchedulingTimezone `json:"timezone,omitempty"`

	// tz
	Tz string `json:"tz,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this scheduler activate schedule body
func (o *SchedulerActivateScheduleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SchedulerActivateScheduleBody) validateBlocks(formats strfmt.Registry) error {
	if swag.IsZero(o.Blocks) { // not required
		return nil
	}

	for i := 0; i < len(o.Blocks); i++ {
		if swag.IsZero(o.Blocks[i]) { // not required
			continue
		}

		if o.Blocks[i] != nil {
			if err := o.Blocks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "blocks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "blocks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SchedulerActivateScheduleBody) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(o.Provider) { // not required
		return nil
	}

	if o.Provider != nil {
		if err := o.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "provider")
			}
			return err
		}
	}

	return nil
}

func (o *SchedulerActivateScheduleBody) validateTimezone(formats strfmt.Registry) error {
	if swag.IsZero(o.Timezone) { // not required
		return nil
	}

	if o.Timezone != nil {
		if err := o.Timezone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "timezone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "timezone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduler activate schedule body based on the context it is used
func (o *SchedulerActivateScheduleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBlocks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimezone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SchedulerActivateScheduleBody) contextValidateBlocks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Blocks); i++ {

		if o.Blocks[i] != nil {
			if err := o.Blocks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "blocks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "blocks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SchedulerActivateScheduleBody) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if o.Provider != nil {
		if err := o.Provider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "provider")
			}
			return err
		}
	}

	return nil
}

func (o *SchedulerActivateScheduleBody) contextValidateTimezone(ctx context.Context, formats strfmt.Registry) error {

	if o.Timezone != nil {
		if err := o.Timezone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "timezone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "timezone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SchedulerActivateScheduleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SchedulerActivateScheduleBody) UnmarshalBinary(b []byte) error {
	var res SchedulerActivateScheduleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
