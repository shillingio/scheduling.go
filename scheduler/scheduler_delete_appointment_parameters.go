// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerDeleteAppointmentParams creates a new SchedulerDeleteAppointmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerDeleteAppointmentParams() *SchedulerDeleteAppointmentParams {
	return &SchedulerDeleteAppointmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerDeleteAppointmentParamsWithTimeout creates a new SchedulerDeleteAppointmentParams object
// with the ability to set a timeout on a request.
func NewSchedulerDeleteAppointmentParamsWithTimeout(timeout time.Duration) *SchedulerDeleteAppointmentParams {
	return &SchedulerDeleteAppointmentParams{
		timeout: timeout,
	}
}

// NewSchedulerDeleteAppointmentParamsWithContext creates a new SchedulerDeleteAppointmentParams object
// with the ability to set a context for a request.
func NewSchedulerDeleteAppointmentParamsWithContext(ctx context.Context) *SchedulerDeleteAppointmentParams {
	return &SchedulerDeleteAppointmentParams{
		Context: ctx,
	}
}

// NewSchedulerDeleteAppointmentParamsWithHTTPClient creates a new SchedulerDeleteAppointmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerDeleteAppointmentParamsWithHTTPClient(client *http.Client) *SchedulerDeleteAppointmentParams {
	return &SchedulerDeleteAppointmentParams{
		HTTPClient: client,
	}
}

/* SchedulerDeleteAppointmentParams contains all the parameters to send to the API endpoint
   for the scheduler delete appointment operation.

   Typically these are written to a http.Request.
*/
type SchedulerDeleteAppointmentParams struct {

	// Active.
	Active *bool

	// Country.
	Country *string

	// CreatedAt.
	CreatedAt *string

	// CreatedBy.
	CreatedBy *string

	/* Duration.

	   The duration of the appointment in minutes

	   Format: int32
	*/
	Duration *int32

	/* EndAt.

	   The end time of the appointment (RFC3339)
	*/
	EndAt *string

	/* ID.

	   UUID of the appointment
	*/
	ID string

	/* InPerson.

	   If the appointment is in-person and not online
	*/
	InPerson *bool

	// Language.
	Language *string

	// OrganizationID.
	OrganizationID *string

	// Padding.
	Padding *bool

	// PatientActive.
	PatientActive *bool

	// PatientCreatedAt.
	PatientCreatedAt *string

	// PatientCreatedBy.
	PatientCreatedBy *string

	// PatientGivenName.
	PatientGivenName *string

	// PatientID.
	PatientID *string

	// PatientOrgID.
	PatientOrgID *string

	// PatientPrefix.
	PatientPrefix *string

	// PatientRefID.
	PatientRefID *string

	// PatientSuffix.
	PatientSuffix *string

	// PatientSurname.
	PatientSurname *string

	// PatientUpdatedAt.
	PatientUpdatedAt *string

	// PatientUpdatedBy.
	PatientUpdatedBy *string

	// Pending.
	Pending *bool

	// ProviderActive.
	ProviderActive *bool

	// ProviderCreatedAt.
	ProviderCreatedAt *string

	// ProviderCreatedBy.
	ProviderCreatedBy *string

	// ProviderGender.
	ProviderGender *string

	// ProviderGivenName.
	ProviderGivenName *string

	// ProviderID.
	ProviderID *string

	// ProviderOrgID.
	ProviderOrgID *string

	// ProviderPrefix.
	ProviderPrefix *string

	// ProviderRefID.
	ProviderRefID *string

	// ProviderRole.
	ProviderRole *string

	// ProviderSuffix.
	ProviderSuffix *string

	// ProviderSurname.
	ProviderSurname *string

	// ProviderTimezoneAbbreviation.
	ProviderTimezoneAbbreviation *string

	// ProviderTimezoneDst.
	ProviderTimezoneDst *bool

	// ProviderTimezoneGmtOffset.
	//
	// Format: int32
	ProviderTimezoneGmtOffset *int32

	// ProviderTimezoneID.
	//
	// Format: int32
	ProviderTimezoneID *int32

	// ProviderTimezoneTimeStart.
	//
	// Format: int64
	ProviderTimezoneTimeStart *string

	// ProviderTimezoneZoneCountryCode.
	ProviderTimezoneZoneCountryCode *string

	// ProviderTimezoneZoneID.
	//
	// Format: int32
	ProviderTimezoneZoneID *int32

	// ProviderTimezoneZoneName.
	ProviderTimezoneZoneName *string

	// ProviderUpdatedAt.
	ProviderUpdatedAt *string

	// ProviderUpdatedBy.
	ProviderUpdatedBy *string

	// RefID.
	RefID *string

	// ScheduleBlockID.
	ScheduleBlockID *string

	// ScheduleID.
	ScheduleID *string

	// ServiceActive.
	ServiceActive *bool

	// ServiceConfigDurations.
	ServiceConfigDurations []int32

	// ServiceConfigFixedDuration.
	//
	// Format: int32
	ServiceConfigFixedDuration *int32

	// ServiceCreatedAt.
	ServiceCreatedAt *string

	// ServiceCreatedBy.
	ServiceCreatedBy *string

	// ServiceDescription.
	ServiceDescription *string

	// ServiceID.
	ServiceID *string

	// ServiceName.
	ServiceName *string

	// ServiceOrgID.
	ServiceOrgID *string

	// ServiceRefID.
	ServiceRefID *string

	// ServiceUpdatedAt.
	ServiceUpdatedAt *string

	// ServiceUpdatedBy.
	ServiceUpdatedBy *string

	/* StartAt.

	   The start time of the appointment (RFC3339)
	*/
	StartAt *string

	// State.
	State *string

	// Status.
	Status *string

	// Type.
	Type *string

	// Unavailable.
	Unavailable *bool

	// UpdatedAt.
	UpdatedAt *string

	// UpdatedBy.
	UpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler delete appointment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerDeleteAppointmentParams) WithDefaults() *SchedulerDeleteAppointmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler delete appointment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerDeleteAppointmentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithTimeout(timeout time.Duration) *SchedulerDeleteAppointmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithContext(ctx context.Context) *SchedulerDeleteAppointmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithHTTPClient(client *http.Client) *SchedulerDeleteAppointmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithActive(active *bool) *SchedulerDeleteAppointmentParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetActive(active *bool) {
	o.Active = active
}

// WithCountry adds the country to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithCountry(country *string) *SchedulerDeleteAppointmentParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetCountry(country *string) {
	o.Country = country
}

// WithCreatedAt adds the createdAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithCreatedAt(createdAt *string) *SchedulerDeleteAppointmentParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedBy adds the createdBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithCreatedBy(createdBy *string) *SchedulerDeleteAppointmentParams {
	o.SetCreatedBy(createdBy)
	return o
}

// SetCreatedBy adds the createdBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetCreatedBy(createdBy *string) {
	o.CreatedBy = createdBy
}

// WithDuration adds the duration to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithDuration(duration *int32) *SchedulerDeleteAppointmentParams {
	o.SetDuration(duration)
	return o
}

// SetDuration adds the duration to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetDuration(duration *int32) {
	o.Duration = duration
}

// WithEndAt adds the endAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithEndAt(endAt *string) *SchedulerDeleteAppointmentParams {
	o.SetEndAt(endAt)
	return o
}

// SetEndAt adds the endAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetEndAt(endAt *string) {
	o.EndAt = endAt
}

// WithID adds the id to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithID(id string) *SchedulerDeleteAppointmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetID(id string) {
	o.ID = id
}

// WithInPerson adds the inPerson to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithInPerson(inPerson *bool) *SchedulerDeleteAppointmentParams {
	o.SetInPerson(inPerson)
	return o
}

// SetInPerson adds the inPerson to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetInPerson(inPerson *bool) {
	o.InPerson = inPerson
}

// WithLanguage adds the language to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithLanguage(language *string) *SchedulerDeleteAppointmentParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetLanguage(language *string) {
	o.Language = language
}

// WithOrganizationID adds the organizationID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithOrganizationID(organizationID *string) *SchedulerDeleteAppointmentParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithPadding adds the padding to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPadding(padding *bool) *SchedulerDeleteAppointmentParams {
	o.SetPadding(padding)
	return o
}

// SetPadding adds the padding to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPadding(padding *bool) {
	o.Padding = padding
}

// WithPatientActive adds the patientActive to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientActive(patientActive *bool) *SchedulerDeleteAppointmentParams {
	o.SetPatientActive(patientActive)
	return o
}

// SetPatientActive adds the patientActive to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientActive(patientActive *bool) {
	o.PatientActive = patientActive
}

// WithPatientCreatedAt adds the patientCreatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientCreatedAt(patientCreatedAt *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientCreatedAt(patientCreatedAt)
	return o
}

// SetPatientCreatedAt adds the patientCreatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientCreatedAt(patientCreatedAt *string) {
	o.PatientCreatedAt = patientCreatedAt
}

// WithPatientCreatedBy adds the patientCreatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientCreatedBy(patientCreatedBy *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientCreatedBy(patientCreatedBy)
	return o
}

// SetPatientCreatedBy adds the patientCreatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientCreatedBy(patientCreatedBy *string) {
	o.PatientCreatedBy = patientCreatedBy
}

// WithPatientGivenName adds the patientGivenName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientGivenName(patientGivenName *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientGivenName(patientGivenName)
	return o
}

// SetPatientGivenName adds the patientGivenName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientGivenName(patientGivenName *string) {
	o.PatientGivenName = patientGivenName
}

// WithPatientID adds the patientID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientID(patientID *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientID(patientID)
	return o
}

// SetPatientID adds the patientId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientID(patientID *string) {
	o.PatientID = patientID
}

// WithPatientOrgID adds the patientOrgID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientOrgID(patientOrgID *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientOrgID(patientOrgID)
	return o
}

// SetPatientOrgID adds the patientOrgId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientOrgID(patientOrgID *string) {
	o.PatientOrgID = patientOrgID
}

// WithPatientPrefix adds the patientPrefix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientPrefix(patientPrefix *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientPrefix(patientPrefix)
	return o
}

// SetPatientPrefix adds the patientPrefix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientPrefix(patientPrefix *string) {
	o.PatientPrefix = patientPrefix
}

// WithPatientRefID adds the patientRefID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientRefID(patientRefID *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientRefID(patientRefID)
	return o
}

// SetPatientRefID adds the patientRefId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientRefID(patientRefID *string) {
	o.PatientRefID = patientRefID
}

// WithPatientSuffix adds the patientSuffix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientSuffix(patientSuffix *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientSuffix(patientSuffix)
	return o
}

// SetPatientSuffix adds the patientSuffix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientSuffix(patientSuffix *string) {
	o.PatientSuffix = patientSuffix
}

// WithPatientSurname adds the patientSurname to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientSurname(patientSurname *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientSurname(patientSurname)
	return o
}

// SetPatientSurname adds the patientSurname to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientSurname(patientSurname *string) {
	o.PatientSurname = patientSurname
}

// WithPatientUpdatedAt adds the patientUpdatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientUpdatedAt(patientUpdatedAt *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientUpdatedAt(patientUpdatedAt)
	return o
}

// SetPatientUpdatedAt adds the patientUpdatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientUpdatedAt(patientUpdatedAt *string) {
	o.PatientUpdatedAt = patientUpdatedAt
}

// WithPatientUpdatedBy adds the patientUpdatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPatientUpdatedBy(patientUpdatedBy *string) *SchedulerDeleteAppointmentParams {
	o.SetPatientUpdatedBy(patientUpdatedBy)
	return o
}

// SetPatientUpdatedBy adds the patientUpdatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPatientUpdatedBy(patientUpdatedBy *string) {
	o.PatientUpdatedBy = patientUpdatedBy
}

// WithPending adds the pending to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithPending(pending *bool) *SchedulerDeleteAppointmentParams {
	o.SetPending(pending)
	return o
}

// SetPending adds the pending to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetPending(pending *bool) {
	o.Pending = pending
}

// WithProviderActive adds the providerActive to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderActive(providerActive *bool) *SchedulerDeleteAppointmentParams {
	o.SetProviderActive(providerActive)
	return o
}

// SetProviderActive adds the providerActive to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderActive(providerActive *bool) {
	o.ProviderActive = providerActive
}

// WithProviderCreatedAt adds the providerCreatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderCreatedAt(providerCreatedAt *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderCreatedAt(providerCreatedAt)
	return o
}

// SetProviderCreatedAt adds the providerCreatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderCreatedAt(providerCreatedAt *string) {
	o.ProviderCreatedAt = providerCreatedAt
}

// WithProviderCreatedBy adds the providerCreatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderCreatedBy(providerCreatedBy *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderCreatedBy(providerCreatedBy)
	return o
}

// SetProviderCreatedBy adds the providerCreatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderCreatedBy(providerCreatedBy *string) {
	o.ProviderCreatedBy = providerCreatedBy
}

// WithProviderGender adds the providerGender to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderGender(providerGender *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderGender(providerGender)
	return o
}

// SetProviderGender adds the providerGender to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderGender(providerGender *string) {
	o.ProviderGender = providerGender
}

// WithProviderGivenName adds the providerGivenName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderGivenName(providerGivenName *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderGivenName(providerGivenName)
	return o
}

// SetProviderGivenName adds the providerGivenName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderGivenName(providerGivenName *string) {
	o.ProviderGivenName = providerGivenName
}

// WithProviderID adds the providerID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderID(providerID *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderID(providerID *string) {
	o.ProviderID = providerID
}

// WithProviderOrgID adds the providerOrgID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderOrgID(providerOrgID *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderOrgID(providerOrgID)
	return o
}

// SetProviderOrgID adds the providerOrgId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderOrgID(providerOrgID *string) {
	o.ProviderOrgID = providerOrgID
}

// WithProviderPrefix adds the providerPrefix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderPrefix(providerPrefix *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderPrefix(providerPrefix)
	return o
}

// SetProviderPrefix adds the providerPrefix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderPrefix(providerPrefix *string) {
	o.ProviderPrefix = providerPrefix
}

// WithProviderRefID adds the providerRefID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderRefID(providerRefID *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderRefID(providerRefID)
	return o
}

// SetProviderRefID adds the providerRefId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderRefID(providerRefID *string) {
	o.ProviderRefID = providerRefID
}

// WithProviderRole adds the providerRole to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderRole(providerRole *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderRole(providerRole)
	return o
}

// SetProviderRole adds the providerRole to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderRole(providerRole *string) {
	o.ProviderRole = providerRole
}

// WithProviderSuffix adds the providerSuffix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderSuffix(providerSuffix *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderSuffix(providerSuffix)
	return o
}

// SetProviderSuffix adds the providerSuffix to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderSuffix(providerSuffix *string) {
	o.ProviderSuffix = providerSuffix
}

// WithProviderSurname adds the providerSurname to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderSurname(providerSurname *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderSurname(providerSurname)
	return o
}

// SetProviderSurname adds the providerSurname to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderSurname(providerSurname *string) {
	o.ProviderSurname = providerSurname
}

// WithProviderTimezoneAbbreviation adds the providerTimezoneAbbreviation to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneAbbreviation(providerTimezoneAbbreviation *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneAbbreviation(providerTimezoneAbbreviation)
	return o
}

// SetProviderTimezoneAbbreviation adds the providerTimezoneAbbreviation to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneAbbreviation(providerTimezoneAbbreviation *string) {
	o.ProviderTimezoneAbbreviation = providerTimezoneAbbreviation
}

// WithProviderTimezoneDst adds the providerTimezoneDst to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneDst(providerTimezoneDst *bool) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneDst(providerTimezoneDst)
	return o
}

// SetProviderTimezoneDst adds the providerTimezoneDst to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneDst(providerTimezoneDst *bool) {
	o.ProviderTimezoneDst = providerTimezoneDst
}

// WithProviderTimezoneGmtOffset adds the providerTimezoneGmtOffset to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneGmtOffset(providerTimezoneGmtOffset *int32) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneGmtOffset(providerTimezoneGmtOffset)
	return o
}

// SetProviderTimezoneGmtOffset adds the providerTimezoneGmtOffset to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneGmtOffset(providerTimezoneGmtOffset *int32) {
	o.ProviderTimezoneGmtOffset = providerTimezoneGmtOffset
}

// WithProviderTimezoneID adds the providerTimezoneID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneID(providerTimezoneID *int32) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneID(providerTimezoneID)
	return o
}

// SetProviderTimezoneID adds the providerTimezoneId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneID(providerTimezoneID *int32) {
	o.ProviderTimezoneID = providerTimezoneID
}

// WithProviderTimezoneTimeStart adds the providerTimezoneTimeStart to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneTimeStart(providerTimezoneTimeStart *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneTimeStart(providerTimezoneTimeStart)
	return o
}

// SetProviderTimezoneTimeStart adds the providerTimezoneTimeStart to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneTimeStart(providerTimezoneTimeStart *string) {
	o.ProviderTimezoneTimeStart = providerTimezoneTimeStart
}

// WithProviderTimezoneZoneCountryCode adds the providerTimezoneZoneCountryCode to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode)
	return o
}

// SetProviderTimezoneZoneCountryCode adds the providerTimezoneZoneCountryCode to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode *string) {
	o.ProviderTimezoneZoneCountryCode = providerTimezoneZoneCountryCode
}

// WithProviderTimezoneZoneID adds the providerTimezoneZoneID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneZoneID(providerTimezoneZoneID *int32) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneZoneID(providerTimezoneZoneID)
	return o
}

// SetProviderTimezoneZoneID adds the providerTimezoneZoneId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneZoneID(providerTimezoneZoneID *int32) {
	o.ProviderTimezoneZoneID = providerTimezoneZoneID
}

// WithProviderTimezoneZoneName adds the providerTimezoneZoneName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderTimezoneZoneName(providerTimezoneZoneName *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderTimezoneZoneName(providerTimezoneZoneName)
	return o
}

// SetProviderTimezoneZoneName adds the providerTimezoneZoneName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderTimezoneZoneName(providerTimezoneZoneName *string) {
	o.ProviderTimezoneZoneName = providerTimezoneZoneName
}

// WithProviderUpdatedAt adds the providerUpdatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderUpdatedAt(providerUpdatedAt *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderUpdatedAt(providerUpdatedAt)
	return o
}

// SetProviderUpdatedAt adds the providerUpdatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderUpdatedAt(providerUpdatedAt *string) {
	o.ProviderUpdatedAt = providerUpdatedAt
}

// WithProviderUpdatedBy adds the providerUpdatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithProviderUpdatedBy(providerUpdatedBy *string) *SchedulerDeleteAppointmentParams {
	o.SetProviderUpdatedBy(providerUpdatedBy)
	return o
}

// SetProviderUpdatedBy adds the providerUpdatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetProviderUpdatedBy(providerUpdatedBy *string) {
	o.ProviderUpdatedBy = providerUpdatedBy
}

// WithRefID adds the refID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithRefID(refID *string) *SchedulerDeleteAppointmentParams {
	o.SetRefID(refID)
	return o
}

// SetRefID adds the refId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetRefID(refID *string) {
	o.RefID = refID
}

// WithScheduleBlockID adds the scheduleBlockID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithScheduleBlockID(scheduleBlockID *string) *SchedulerDeleteAppointmentParams {
	o.SetScheduleBlockID(scheduleBlockID)
	return o
}

// SetScheduleBlockID adds the scheduleBlockId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetScheduleBlockID(scheduleBlockID *string) {
	o.ScheduleBlockID = scheduleBlockID
}

// WithScheduleID adds the scheduleID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithScheduleID(scheduleID *string) *SchedulerDeleteAppointmentParams {
	o.SetScheduleID(scheduleID)
	return o
}

// SetScheduleID adds the scheduleId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetScheduleID(scheduleID *string) {
	o.ScheduleID = scheduleID
}

// WithServiceActive adds the serviceActive to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceActive(serviceActive *bool) *SchedulerDeleteAppointmentParams {
	o.SetServiceActive(serviceActive)
	return o
}

// SetServiceActive adds the serviceActive to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceActive(serviceActive *bool) {
	o.ServiceActive = serviceActive
}

// WithServiceConfigDurations adds the serviceConfigDurations to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceConfigDurations(serviceConfigDurations []int32) *SchedulerDeleteAppointmentParams {
	o.SetServiceConfigDurations(serviceConfigDurations)
	return o
}

// SetServiceConfigDurations adds the serviceConfigDurations to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceConfigDurations(serviceConfigDurations []int32) {
	o.ServiceConfigDurations = serviceConfigDurations
}

// WithServiceConfigFixedDuration adds the serviceConfigFixedDuration to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceConfigFixedDuration(serviceConfigFixedDuration *int32) *SchedulerDeleteAppointmentParams {
	o.SetServiceConfigFixedDuration(serviceConfigFixedDuration)
	return o
}

// SetServiceConfigFixedDuration adds the serviceConfigFixedDuration to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceConfigFixedDuration(serviceConfigFixedDuration *int32) {
	o.ServiceConfigFixedDuration = serviceConfigFixedDuration
}

// WithServiceCreatedAt adds the serviceCreatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceCreatedAt(serviceCreatedAt *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceCreatedAt(serviceCreatedAt)
	return o
}

// SetServiceCreatedAt adds the serviceCreatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceCreatedAt(serviceCreatedAt *string) {
	o.ServiceCreatedAt = serviceCreatedAt
}

// WithServiceCreatedBy adds the serviceCreatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceCreatedBy(serviceCreatedBy *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceCreatedBy(serviceCreatedBy)
	return o
}

// SetServiceCreatedBy adds the serviceCreatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceCreatedBy(serviceCreatedBy *string) {
	o.ServiceCreatedBy = serviceCreatedBy
}

// WithServiceDescription adds the serviceDescription to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceDescription(serviceDescription *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceDescription(serviceDescription)
	return o
}

// SetServiceDescription adds the serviceDescription to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceDescription(serviceDescription *string) {
	o.ServiceDescription = serviceDescription
}

// WithServiceID adds the serviceID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceID(serviceID *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceID(serviceID)
	return o
}

// SetServiceID adds the serviceId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceID(serviceID *string) {
	o.ServiceID = serviceID
}

// WithServiceName adds the serviceName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceName(serviceName *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithServiceOrgID adds the serviceOrgID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceOrgID(serviceOrgID *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceOrgID(serviceOrgID)
	return o
}

// SetServiceOrgID adds the serviceOrgId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceOrgID(serviceOrgID *string) {
	o.ServiceOrgID = serviceOrgID
}

// WithServiceRefID adds the serviceRefID to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceRefID(serviceRefID *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceRefID(serviceRefID)
	return o
}

// SetServiceRefID adds the serviceRefId to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceRefID(serviceRefID *string) {
	o.ServiceRefID = serviceRefID
}

// WithServiceUpdatedAt adds the serviceUpdatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceUpdatedAt(serviceUpdatedAt *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceUpdatedAt(serviceUpdatedAt)
	return o
}

// SetServiceUpdatedAt adds the serviceUpdatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceUpdatedAt(serviceUpdatedAt *string) {
	o.ServiceUpdatedAt = serviceUpdatedAt
}

// WithServiceUpdatedBy adds the serviceUpdatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithServiceUpdatedBy(serviceUpdatedBy *string) *SchedulerDeleteAppointmentParams {
	o.SetServiceUpdatedBy(serviceUpdatedBy)
	return o
}

// SetServiceUpdatedBy adds the serviceUpdatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetServiceUpdatedBy(serviceUpdatedBy *string) {
	o.ServiceUpdatedBy = serviceUpdatedBy
}

// WithStartAt adds the startAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithStartAt(startAt *string) *SchedulerDeleteAppointmentParams {
	o.SetStartAt(startAt)
	return o
}

// SetStartAt adds the startAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetStartAt(startAt *string) {
	o.StartAt = startAt
}

// WithState adds the state to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithState(state *string) *SchedulerDeleteAppointmentParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetState(state *string) {
	o.State = state
}

// WithStatus adds the status to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithStatus(status *string) *SchedulerDeleteAppointmentParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetStatus(status *string) {
	o.Status = status
}

// WithType adds the typeVar to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithType(typeVar *string) *SchedulerDeleteAppointmentParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUnavailable adds the unavailable to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithUnavailable(unavailable *bool) *SchedulerDeleteAppointmentParams {
	o.SetUnavailable(unavailable)
	return o
}

// SetUnavailable adds the unavailable to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetUnavailable(unavailable *bool) {
	o.Unavailable = unavailable
}

// WithUpdatedAt adds the updatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithUpdatedAt(updatedAt *string) *SchedulerDeleteAppointmentParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedBy adds the updatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) WithUpdatedBy(updatedBy *string) *SchedulerDeleteAppointmentParams {
	o.SetUpdatedBy(updatedBy)
	return o
}

// SetUpdatedBy adds the updatedBy to the scheduler delete appointment params
func (o *SchedulerDeleteAppointmentParams) SetUpdatedBy(updatedBy *string) {
	o.UpdatedBy = updatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerDeleteAppointmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.Country != nil {

		// query param country
		var qrCountry string

		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {

			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {

			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.CreatedBy != nil {

		// query param created_by
		var qrCreatedBy string

		if o.CreatedBy != nil {
			qrCreatedBy = *o.CreatedBy
		}
		qCreatedBy := qrCreatedBy
		if qCreatedBy != "" {

			if err := r.SetQueryParam("created_by", qCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.Duration != nil {

		// query param duration
		var qrDuration int32

		if o.Duration != nil {
			qrDuration = *o.Duration
		}
		qDuration := swag.FormatInt32(qrDuration)
		if qDuration != "" {

			if err := r.SetQueryParam("duration", qDuration); err != nil {
				return err
			}
		}
	}

	if o.EndAt != nil {

		// query param end_at
		var qrEndAt string

		if o.EndAt != nil {
			qrEndAt = *o.EndAt
		}
		qEndAt := qrEndAt
		if qEndAt != "" {

			if err := r.SetQueryParam("end_at", qEndAt); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.InPerson != nil {

		// query param in_person
		var qrInPerson bool

		if o.InPerson != nil {
			qrInPerson = *o.InPerson
		}
		qInPerson := swag.FormatBool(qrInPerson)
		if qInPerson != "" {

			if err := r.SetQueryParam("in_person", qInPerson); err != nil {
				return err
			}
		}
	}

	if o.Language != nil {

		// query param language
		var qrLanguage string

		if o.Language != nil {
			qrLanguage = *o.Language
		}
		qLanguage := qrLanguage
		if qLanguage != "" {

			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.Padding != nil {

		// query param padding
		var qrPadding bool

		if o.Padding != nil {
			qrPadding = *o.Padding
		}
		qPadding := swag.FormatBool(qrPadding)
		if qPadding != "" {

			if err := r.SetQueryParam("padding", qPadding); err != nil {
				return err
			}
		}
	}

	if o.PatientActive != nil {

		// query param patient.active
		var qrPatientActive bool

		if o.PatientActive != nil {
			qrPatientActive = *o.PatientActive
		}
		qPatientActive := swag.FormatBool(qrPatientActive)
		if qPatientActive != "" {

			if err := r.SetQueryParam("patient.active", qPatientActive); err != nil {
				return err
			}
		}
	}

	if o.PatientCreatedAt != nil {

		// query param patient.created_at
		var qrPatientCreatedAt string

		if o.PatientCreatedAt != nil {
			qrPatientCreatedAt = *o.PatientCreatedAt
		}
		qPatientCreatedAt := qrPatientCreatedAt
		if qPatientCreatedAt != "" {

			if err := r.SetQueryParam("patient.created_at", qPatientCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.PatientCreatedBy != nil {

		// query param patient.created_by
		var qrPatientCreatedBy string

		if o.PatientCreatedBy != nil {
			qrPatientCreatedBy = *o.PatientCreatedBy
		}
		qPatientCreatedBy := qrPatientCreatedBy
		if qPatientCreatedBy != "" {

			if err := r.SetQueryParam("patient.created_by", qPatientCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.PatientGivenName != nil {

		// query param patient.given_name
		var qrPatientGivenName string

		if o.PatientGivenName != nil {
			qrPatientGivenName = *o.PatientGivenName
		}
		qPatientGivenName := qrPatientGivenName
		if qPatientGivenName != "" {

			if err := r.SetQueryParam("patient.given_name", qPatientGivenName); err != nil {
				return err
			}
		}
	}

	if o.PatientID != nil {

		// query param patient.id
		var qrPatientID string

		if o.PatientID != nil {
			qrPatientID = *o.PatientID
		}
		qPatientID := qrPatientID
		if qPatientID != "" {

			if err := r.SetQueryParam("patient.id", qPatientID); err != nil {
				return err
			}
		}
	}

	if o.PatientOrgID != nil {

		// query param patient.org_id
		var qrPatientOrgID string

		if o.PatientOrgID != nil {
			qrPatientOrgID = *o.PatientOrgID
		}
		qPatientOrgID := qrPatientOrgID
		if qPatientOrgID != "" {

			if err := r.SetQueryParam("patient.org_id", qPatientOrgID); err != nil {
				return err
			}
		}
	}

	if o.PatientPrefix != nil {

		// query param patient.prefix
		var qrPatientPrefix string

		if o.PatientPrefix != nil {
			qrPatientPrefix = *o.PatientPrefix
		}
		qPatientPrefix := qrPatientPrefix
		if qPatientPrefix != "" {

			if err := r.SetQueryParam("patient.prefix", qPatientPrefix); err != nil {
				return err
			}
		}
	}

	if o.PatientRefID != nil {

		// query param patient.ref_id
		var qrPatientRefID string

		if o.PatientRefID != nil {
			qrPatientRefID = *o.PatientRefID
		}
		qPatientRefID := qrPatientRefID
		if qPatientRefID != "" {

			if err := r.SetQueryParam("patient.ref_id", qPatientRefID); err != nil {
				return err
			}
		}
	}

	if o.PatientSuffix != nil {

		// query param patient.suffix
		var qrPatientSuffix string

		if o.PatientSuffix != nil {
			qrPatientSuffix = *o.PatientSuffix
		}
		qPatientSuffix := qrPatientSuffix
		if qPatientSuffix != "" {

			if err := r.SetQueryParam("patient.suffix", qPatientSuffix); err != nil {
				return err
			}
		}
	}

	if o.PatientSurname != nil {

		// query param patient.surname
		var qrPatientSurname string

		if o.PatientSurname != nil {
			qrPatientSurname = *o.PatientSurname
		}
		qPatientSurname := qrPatientSurname
		if qPatientSurname != "" {

			if err := r.SetQueryParam("patient.surname", qPatientSurname); err != nil {
				return err
			}
		}
	}

	if o.PatientUpdatedAt != nil {

		// query param patient.updated_at
		var qrPatientUpdatedAt string

		if o.PatientUpdatedAt != nil {
			qrPatientUpdatedAt = *o.PatientUpdatedAt
		}
		qPatientUpdatedAt := qrPatientUpdatedAt
		if qPatientUpdatedAt != "" {

			if err := r.SetQueryParam("patient.updated_at", qPatientUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.PatientUpdatedBy != nil {

		// query param patient.updated_by
		var qrPatientUpdatedBy string

		if o.PatientUpdatedBy != nil {
			qrPatientUpdatedBy = *o.PatientUpdatedBy
		}
		qPatientUpdatedBy := qrPatientUpdatedBy
		if qPatientUpdatedBy != "" {

			if err := r.SetQueryParam("patient.updated_by", qPatientUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.Pending != nil {

		// query param pending
		var qrPending bool

		if o.Pending != nil {
			qrPending = *o.Pending
		}
		qPending := swag.FormatBool(qrPending)
		if qPending != "" {

			if err := r.SetQueryParam("pending", qPending); err != nil {
				return err
			}
		}
	}

	if o.ProviderActive != nil {

		// query param provider.active
		var qrProviderActive bool

		if o.ProviderActive != nil {
			qrProviderActive = *o.ProviderActive
		}
		qProviderActive := swag.FormatBool(qrProviderActive)
		if qProviderActive != "" {

			if err := r.SetQueryParam("provider.active", qProviderActive); err != nil {
				return err
			}
		}
	}

	if o.ProviderCreatedAt != nil {

		// query param provider.created_at
		var qrProviderCreatedAt string

		if o.ProviderCreatedAt != nil {
			qrProviderCreatedAt = *o.ProviderCreatedAt
		}
		qProviderCreatedAt := qrProviderCreatedAt
		if qProviderCreatedAt != "" {

			if err := r.SetQueryParam("provider.created_at", qProviderCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ProviderCreatedBy != nil {

		// query param provider.created_by
		var qrProviderCreatedBy string

		if o.ProviderCreatedBy != nil {
			qrProviderCreatedBy = *o.ProviderCreatedBy
		}
		qProviderCreatedBy := qrProviderCreatedBy
		if qProviderCreatedBy != "" {

			if err := r.SetQueryParam("provider.created_by", qProviderCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ProviderGender != nil {

		// query param provider.gender
		var qrProviderGender string

		if o.ProviderGender != nil {
			qrProviderGender = *o.ProviderGender
		}
		qProviderGender := qrProviderGender
		if qProviderGender != "" {

			if err := r.SetQueryParam("provider.gender", qProviderGender); err != nil {
				return err
			}
		}
	}

	if o.ProviderGivenName != nil {

		// query param provider.given_name
		var qrProviderGivenName string

		if o.ProviderGivenName != nil {
			qrProviderGivenName = *o.ProviderGivenName
		}
		qProviderGivenName := qrProviderGivenName
		if qProviderGivenName != "" {

			if err := r.SetQueryParam("provider.given_name", qProviderGivenName); err != nil {
				return err
			}
		}
	}

	if o.ProviderID != nil {

		// query param provider.id
		var qrProviderID string

		if o.ProviderID != nil {
			qrProviderID = *o.ProviderID
		}
		qProviderID := qrProviderID
		if qProviderID != "" {

			if err := r.SetQueryParam("provider.id", qProviderID); err != nil {
				return err
			}
		}
	}

	if o.ProviderOrgID != nil {

		// query param provider.org_id
		var qrProviderOrgID string

		if o.ProviderOrgID != nil {
			qrProviderOrgID = *o.ProviderOrgID
		}
		qProviderOrgID := qrProviderOrgID
		if qProviderOrgID != "" {

			if err := r.SetQueryParam("provider.org_id", qProviderOrgID); err != nil {
				return err
			}
		}
	}

	if o.ProviderPrefix != nil {

		// query param provider.prefix
		var qrProviderPrefix string

		if o.ProviderPrefix != nil {
			qrProviderPrefix = *o.ProviderPrefix
		}
		qProviderPrefix := qrProviderPrefix
		if qProviderPrefix != "" {

			if err := r.SetQueryParam("provider.prefix", qProviderPrefix); err != nil {
				return err
			}
		}
	}

	if o.ProviderRefID != nil {

		// query param provider.ref_id
		var qrProviderRefID string

		if o.ProviderRefID != nil {
			qrProviderRefID = *o.ProviderRefID
		}
		qProviderRefID := qrProviderRefID
		if qProviderRefID != "" {

			if err := r.SetQueryParam("provider.ref_id", qProviderRefID); err != nil {
				return err
			}
		}
	}

	if o.ProviderRole != nil {

		// query param provider.role
		var qrProviderRole string

		if o.ProviderRole != nil {
			qrProviderRole = *o.ProviderRole
		}
		qProviderRole := qrProviderRole
		if qProviderRole != "" {

			if err := r.SetQueryParam("provider.role", qProviderRole); err != nil {
				return err
			}
		}
	}

	if o.ProviderSuffix != nil {

		// query param provider.suffix
		var qrProviderSuffix string

		if o.ProviderSuffix != nil {
			qrProviderSuffix = *o.ProviderSuffix
		}
		qProviderSuffix := qrProviderSuffix
		if qProviderSuffix != "" {

			if err := r.SetQueryParam("provider.suffix", qProviderSuffix); err != nil {
				return err
			}
		}
	}

	if o.ProviderSurname != nil {

		// query param provider.surname
		var qrProviderSurname string

		if o.ProviderSurname != nil {
			qrProviderSurname = *o.ProviderSurname
		}
		qProviderSurname := qrProviderSurname
		if qProviderSurname != "" {

			if err := r.SetQueryParam("provider.surname", qProviderSurname); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneAbbreviation != nil {

		// query param provider.timezone.abbreviation
		var qrProviderTimezoneAbbreviation string

		if o.ProviderTimezoneAbbreviation != nil {
			qrProviderTimezoneAbbreviation = *o.ProviderTimezoneAbbreviation
		}
		qProviderTimezoneAbbreviation := qrProviderTimezoneAbbreviation
		if qProviderTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("provider.timezone.abbreviation", qProviderTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneDst != nil {

		// query param provider.timezone.dst
		var qrProviderTimezoneDst bool

		if o.ProviderTimezoneDst != nil {
			qrProviderTimezoneDst = *o.ProviderTimezoneDst
		}
		qProviderTimezoneDst := swag.FormatBool(qrProviderTimezoneDst)
		if qProviderTimezoneDst != "" {

			if err := r.SetQueryParam("provider.timezone.dst", qProviderTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneGmtOffset != nil {

		// query param provider.timezone.gmt_offset
		var qrProviderTimezoneGmtOffset int32

		if o.ProviderTimezoneGmtOffset != nil {
			qrProviderTimezoneGmtOffset = *o.ProviderTimezoneGmtOffset
		}
		qProviderTimezoneGmtOffset := swag.FormatInt32(qrProviderTimezoneGmtOffset)
		if qProviderTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("provider.timezone.gmt_offset", qProviderTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneID != nil {

		// query param provider.timezone.id
		var qrProviderTimezoneID int32

		if o.ProviderTimezoneID != nil {
			qrProviderTimezoneID = *o.ProviderTimezoneID
		}
		qProviderTimezoneID := swag.FormatInt32(qrProviderTimezoneID)
		if qProviderTimezoneID != "" {

			if err := r.SetQueryParam("provider.timezone.id", qProviderTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneTimeStart != nil {

		// query param provider.timezone.time_start
		var qrProviderTimezoneTimeStart string

		if o.ProviderTimezoneTimeStart != nil {
			qrProviderTimezoneTimeStart = *o.ProviderTimezoneTimeStart
		}
		qProviderTimezoneTimeStart := qrProviderTimezoneTimeStart
		if qProviderTimezoneTimeStart != "" {

			if err := r.SetQueryParam("provider.timezone.time_start", qProviderTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneCountryCode != nil {

		// query param provider.timezone.zone.country_code
		var qrProviderTimezoneZoneCountryCode string

		if o.ProviderTimezoneZoneCountryCode != nil {
			qrProviderTimezoneZoneCountryCode = *o.ProviderTimezoneZoneCountryCode
		}
		qProviderTimezoneZoneCountryCode := qrProviderTimezoneZoneCountryCode
		if qProviderTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("provider.timezone.zone.country_code", qProviderTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneID != nil {

		// query param provider.timezone.zone.id
		var qrProviderTimezoneZoneID int32

		if o.ProviderTimezoneZoneID != nil {
			qrProviderTimezoneZoneID = *o.ProviderTimezoneZoneID
		}
		qProviderTimezoneZoneID := swag.FormatInt32(qrProviderTimezoneZoneID)
		if qProviderTimezoneZoneID != "" {

			if err := r.SetQueryParam("provider.timezone.zone.id", qProviderTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneName != nil {

		// query param provider.timezone.zone.name
		var qrProviderTimezoneZoneName string

		if o.ProviderTimezoneZoneName != nil {
			qrProviderTimezoneZoneName = *o.ProviderTimezoneZoneName
		}
		qProviderTimezoneZoneName := qrProviderTimezoneZoneName
		if qProviderTimezoneZoneName != "" {

			if err := r.SetQueryParam("provider.timezone.zone.name", qProviderTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.ProviderUpdatedAt != nil {

		// query param provider.updated_at
		var qrProviderUpdatedAt string

		if o.ProviderUpdatedAt != nil {
			qrProviderUpdatedAt = *o.ProviderUpdatedAt
		}
		qProviderUpdatedAt := qrProviderUpdatedAt
		if qProviderUpdatedAt != "" {

			if err := r.SetQueryParam("provider.updated_at", qProviderUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ProviderUpdatedBy != nil {

		// query param provider.updated_by
		var qrProviderUpdatedBy string

		if o.ProviderUpdatedBy != nil {
			qrProviderUpdatedBy = *o.ProviderUpdatedBy
		}
		qProviderUpdatedBy := qrProviderUpdatedBy
		if qProviderUpdatedBy != "" {

			if err := r.SetQueryParam("provider.updated_by", qProviderUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.RefID != nil {

		// query param ref_id
		var qrRefID string

		if o.RefID != nil {
			qrRefID = *o.RefID
		}
		qRefID := qrRefID
		if qRefID != "" {

			if err := r.SetQueryParam("ref_id", qRefID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleBlockID != nil {

		// query param schedule_block_id
		var qrScheduleBlockID string

		if o.ScheduleBlockID != nil {
			qrScheduleBlockID = *o.ScheduleBlockID
		}
		qScheduleBlockID := qrScheduleBlockID
		if qScheduleBlockID != "" {

			if err := r.SetQueryParam("schedule_block_id", qScheduleBlockID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleID != nil {

		// query param schedule_id
		var qrScheduleID string

		if o.ScheduleID != nil {
			qrScheduleID = *o.ScheduleID
		}
		qScheduleID := qrScheduleID
		if qScheduleID != "" {

			if err := r.SetQueryParam("schedule_id", qScheduleID); err != nil {
				return err
			}
		}
	}

	if o.ServiceActive != nil {

		// query param service.active
		var qrServiceActive bool

		if o.ServiceActive != nil {
			qrServiceActive = *o.ServiceActive
		}
		qServiceActive := swag.FormatBool(qrServiceActive)
		if qServiceActive != "" {

			if err := r.SetQueryParam("service.active", qServiceActive); err != nil {
				return err
			}
		}
	}

	if o.ServiceConfigDurations != nil {

		// binding items for service.config.durations
		joinedServiceConfigDurations := o.bindParamServiceConfigDurations(reg)

		// query array param service.config.durations
		if err := r.SetQueryParam("service.config.durations", joinedServiceConfigDurations...); err != nil {
			return err
		}
	}

	if o.ServiceConfigFixedDuration != nil {

		// query param service.config.fixed_duration
		var qrServiceConfigFixedDuration int32

		if o.ServiceConfigFixedDuration != nil {
			qrServiceConfigFixedDuration = *o.ServiceConfigFixedDuration
		}
		qServiceConfigFixedDuration := swag.FormatInt32(qrServiceConfigFixedDuration)
		if qServiceConfigFixedDuration != "" {

			if err := r.SetQueryParam("service.config.fixed_duration", qServiceConfigFixedDuration); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedAt != nil {

		// query param service.created_at
		var qrServiceCreatedAt string

		if o.ServiceCreatedAt != nil {
			qrServiceCreatedAt = *o.ServiceCreatedAt
		}
		qServiceCreatedAt := qrServiceCreatedAt
		if qServiceCreatedAt != "" {

			if err := r.SetQueryParam("service.created_at", qServiceCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedBy != nil {

		// query param service.created_by
		var qrServiceCreatedBy string

		if o.ServiceCreatedBy != nil {
			qrServiceCreatedBy = *o.ServiceCreatedBy
		}
		qServiceCreatedBy := qrServiceCreatedBy
		if qServiceCreatedBy != "" {

			if err := r.SetQueryParam("service.created_by", qServiceCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceDescription != nil {

		// query param service.description
		var qrServiceDescription string

		if o.ServiceDescription != nil {
			qrServiceDescription = *o.ServiceDescription
		}
		qServiceDescription := qrServiceDescription
		if qServiceDescription != "" {

			if err := r.SetQueryParam("service.description", qServiceDescription); err != nil {
				return err
			}
		}
	}

	if o.ServiceID != nil {

		// query param service.id
		var qrServiceID string

		if o.ServiceID != nil {
			qrServiceID = *o.ServiceID
		}
		qServiceID := qrServiceID
		if qServiceID != "" {

			if err := r.SetQueryParam("service.id", qServiceID); err != nil {
				return err
			}
		}
	}

	if o.ServiceName != nil {

		// query param service.name
		var qrServiceName string

		if o.ServiceName != nil {
			qrServiceName = *o.ServiceName
		}
		qServiceName := qrServiceName
		if qServiceName != "" {

			if err := r.SetQueryParam("service.name", qServiceName); err != nil {
				return err
			}
		}
	}

	if o.ServiceOrgID != nil {

		// query param service.org_id
		var qrServiceOrgID string

		if o.ServiceOrgID != nil {
			qrServiceOrgID = *o.ServiceOrgID
		}
		qServiceOrgID := qrServiceOrgID
		if qServiceOrgID != "" {

			if err := r.SetQueryParam("service.org_id", qServiceOrgID); err != nil {
				return err
			}
		}
	}

	if o.ServiceRefID != nil {

		// query param service.ref_id
		var qrServiceRefID string

		if o.ServiceRefID != nil {
			qrServiceRefID = *o.ServiceRefID
		}
		qServiceRefID := qrServiceRefID
		if qServiceRefID != "" {

			if err := r.SetQueryParam("service.ref_id", qServiceRefID); err != nil {
				return err
			}
		}
	}

	if o.ServiceUpdatedAt != nil {

		// query param service.updated_at
		var qrServiceUpdatedAt string

		if o.ServiceUpdatedAt != nil {
			qrServiceUpdatedAt = *o.ServiceUpdatedAt
		}
		qServiceUpdatedAt := qrServiceUpdatedAt
		if qServiceUpdatedAt != "" {

			if err := r.SetQueryParam("service.updated_at", qServiceUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceUpdatedBy != nil {

		// query param service.updated_by
		var qrServiceUpdatedBy string

		if o.ServiceUpdatedBy != nil {
			qrServiceUpdatedBy = *o.ServiceUpdatedBy
		}
		qServiceUpdatedBy := qrServiceUpdatedBy
		if qServiceUpdatedBy != "" {

			if err := r.SetQueryParam("service.updated_by", qServiceUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.StartAt != nil {

		// query param start_at
		var qrStartAt string

		if o.StartAt != nil {
			qrStartAt = *o.StartAt
		}
		qStartAt := qrStartAt
		if qStartAt != "" {

			if err := r.SetQueryParam("start_at", qStartAt); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.Unavailable != nil {

		// query param unavailable
		var qrUnavailable bool

		if o.Unavailable != nil {
			qrUnavailable = *o.Unavailable
		}
		qUnavailable := swag.FormatBool(qrUnavailable)
		if qUnavailable != "" {

			if err := r.SetQueryParam("unavailable", qUnavailable); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.UpdatedBy != nil {

		// query param updated_by
		var qrUpdatedBy string

		if o.UpdatedBy != nil {
			qrUpdatedBy = *o.UpdatedBy
		}
		qUpdatedBy := qrUpdatedBy
		if qUpdatedBy != "" {

			if err := r.SetQueryParam("updated_by", qUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerDeleteAppointment binds the parameter service.config.durations
func (o *SchedulerDeleteAppointmentParams) bindParamServiceConfigDurations(formats strfmt.Registry) []string {
	serviceConfigDurationsIR := o.ServiceConfigDurations

	var serviceConfigDurationsIC []string
	for _, serviceConfigDurationsIIR := range serviceConfigDurationsIR { // explode []int32

		serviceConfigDurationsIIV := swag.FormatInt32(serviceConfigDurationsIIR) // int32 as string
		serviceConfigDurationsIC = append(serviceConfigDurationsIC, serviceConfigDurationsIIV)
	}

	// items.CollectionFormat: "multi"
	serviceConfigDurationsIS := swag.JoinByFormat(serviceConfigDurationsIC, "multi")

	return serviceConfigDurationsIS
}
