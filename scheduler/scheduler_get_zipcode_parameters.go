// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetZipcodeParams creates a new SchedulerGetZipcodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetZipcodeParams() *SchedulerGetZipcodeParams {
	return &SchedulerGetZipcodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetZipcodeParamsWithTimeout creates a new SchedulerGetZipcodeParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetZipcodeParamsWithTimeout(timeout time.Duration) *SchedulerGetZipcodeParams {
	return &SchedulerGetZipcodeParams{
		timeout: timeout,
	}
}

// NewSchedulerGetZipcodeParamsWithContext creates a new SchedulerGetZipcodeParams object
// with the ability to set a context for a request.
func NewSchedulerGetZipcodeParamsWithContext(ctx context.Context) *SchedulerGetZipcodeParams {
	return &SchedulerGetZipcodeParams{
		Context: ctx,
	}
}

// NewSchedulerGetZipcodeParamsWithHTTPClient creates a new SchedulerGetZipcodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetZipcodeParamsWithHTTPClient(client *http.Client) *SchedulerGetZipcodeParams {
	return &SchedulerGetZipcodeParams{
		HTTPClient: client,
	}
}

/* SchedulerGetZipcodeParams contains all the parameters to send to the API endpoint
   for the scheduler get zipcode operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetZipcodeParams struct {

	// City.
	City *string

	// Country.
	Country *string

	// Dst.
	Dst *bool

	// Latitude.
	//
	// Format: float
	Latitude *float32

	// Longitude.
	//
	// Format: float
	Longitude *float32

	// State.
	State *string

	// Timezone.
	//
	// Format: int32
	Timezone *int32

	// Zip.
	Zip string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get zipcode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetZipcodeParams) WithDefaults() *SchedulerGetZipcodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get zipcode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetZipcodeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithTimeout(timeout time.Duration) *SchedulerGetZipcodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithContext(ctx context.Context) *SchedulerGetZipcodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithHTTPClient(client *http.Client) *SchedulerGetZipcodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCity adds the city to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithCity(city *string) *SchedulerGetZipcodeParams {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetCity(city *string) {
	o.City = city
}

// WithCountry adds the country to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithCountry(country *string) *SchedulerGetZipcodeParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetCountry(country *string) {
	o.Country = country
}

// WithDst adds the dst to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithDst(dst *bool) *SchedulerGetZipcodeParams {
	o.SetDst(dst)
	return o
}

// SetDst adds the dst to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetDst(dst *bool) {
	o.Dst = dst
}

// WithLatitude adds the latitude to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithLatitude(latitude *float32) *SchedulerGetZipcodeParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetLatitude(latitude *float32) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithLongitude(longitude *float32) *SchedulerGetZipcodeParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetLongitude(longitude *float32) {
	o.Longitude = longitude
}

// WithState adds the state to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithState(state *string) *SchedulerGetZipcodeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetState(state *string) {
	o.State = state
}

// WithTimezone adds the timezone to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithTimezone(timezone *int32) *SchedulerGetZipcodeParams {
	o.SetTimezone(timezone)
	return o
}

// SetTimezone adds the timezone to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetTimezone(timezone *int32) {
	o.Timezone = timezone
}

// WithZip adds the zip to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) WithZip(zip string) *SchedulerGetZipcodeParams {
	o.SetZip(zip)
	return o
}

// SetZip adds the zip to the scheduler get zipcode params
func (o *SchedulerGetZipcodeParams) SetZip(zip string) {
	o.Zip = zip
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetZipcodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.City != nil {

		// query param city
		var qrCity string

		if o.City != nil {
			qrCity = *o.City
		}
		qCity := qrCity
		if qCity != "" {

			if err := r.SetQueryParam("city", qCity); err != nil {
				return err
			}
		}
	}

	if o.Country != nil {

		// query param country
		var qrCountry string

		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {

			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}
	}

	if o.Dst != nil {

		// query param dst
		var qrDst bool

		if o.Dst != nil {
			qrDst = *o.Dst
		}
		qDst := swag.FormatBool(qrDst)
		if qDst != "" {

			if err := r.SetQueryParam("dst", qDst); err != nil {
				return err
			}
		}
	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float32

		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat32(qrLatitude)
		if qLatitude != "" {

			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}
	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float32

		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat32(qrLongitude)
		if qLongitude != "" {

			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Timezone != nil {

		// query param timezone
		var qrTimezone int32

		if o.Timezone != nil {
			qrTimezone = *o.Timezone
		}
		qTimezone := swag.FormatInt32(qrTimezone)
		if qTimezone != "" {

			if err := r.SetQueryParam("timezone", qTimezone); err != nil {
				return err
			}
		}
	}

	// path param zip
	if err := r.SetPathParam("zip", o.Zip); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
