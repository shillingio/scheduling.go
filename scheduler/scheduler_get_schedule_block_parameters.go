// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetScheduleBlockParams creates a new SchedulerGetScheduleBlockParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetScheduleBlockParams() *SchedulerGetScheduleBlockParams {
	return &SchedulerGetScheduleBlockParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetScheduleBlockParamsWithTimeout creates a new SchedulerGetScheduleBlockParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetScheduleBlockParamsWithTimeout(timeout time.Duration) *SchedulerGetScheduleBlockParams {
	return &SchedulerGetScheduleBlockParams{
		timeout: timeout,
	}
}

// NewSchedulerGetScheduleBlockParamsWithContext creates a new SchedulerGetScheduleBlockParams object
// with the ability to set a context for a request.
func NewSchedulerGetScheduleBlockParamsWithContext(ctx context.Context) *SchedulerGetScheduleBlockParams {
	return &SchedulerGetScheduleBlockParams{
		Context: ctx,
	}
}

// NewSchedulerGetScheduleBlockParamsWithHTTPClient creates a new SchedulerGetScheduleBlockParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetScheduleBlockParamsWithHTTPClient(client *http.Client) *SchedulerGetScheduleBlockParams {
	return &SchedulerGetScheduleBlockParams{
		HTTPClient: client,
	}
}

/* SchedulerGetScheduleBlockParams contains all the parameters to send to the API endpoint
   for the scheduler get schedule block operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetScheduleBlockParams struct {

	// Active.
	Active *bool

	// CreatedAt.
	CreatedAt *string

	// CreatedBy.
	CreatedBy *string

	// DayOfWeek.
	//
	// Format: int32
	DayOfWeek *int32

	// EndAt.
	EndAt *string

	// ID.
	ID string

	// MinimumPadding.
	//
	// Format: int32
	MinimumPadding *int32

	// ParentID.
	ParentID *string

	// ProviderID.
	ProviderID *string

	// Repeat.
	Repeat *bool

	// RepeatLimit.
	//
	// Format: int32
	RepeatLimit *int32

	// RepeatStep.
	RepeatStep *string

	// RepeatUntil.
	RepeatUntil *string

	// RepeatWeekDays.
	RepeatWeekDays []int32

	// ScheduleActive.
	ScheduleActive *bool

	// ScheduleActiveFrom.
	ScheduleActiveFrom *string

	// ScheduleActiveTo.
	ScheduleActiveTo *string

	// ScheduleCreatedAt.
	ScheduleCreatedAt *string

	// ScheduleCreatedBy.
	ScheduleCreatedBy *string

	// ScheduleDefault.
	ScheduleDefault *bool

	// ScheduleID.
	ScheduleID string

	// ScheduleIncludeBlocks.
	ScheduleIncludeBlocks *bool

	// ScheduleMaxPer.
	//
	// Format: int32
	ScheduleMaxPer *int32

	// ScheduleMaxPerType.
	ScheduleMaxPerType *string

	// ScheduleName.
	ScheduleName *string

	// ScheduleProviderActive.
	ScheduleProviderActive *bool

	// ScheduleProviderCreatedAt.
	ScheduleProviderCreatedAt *string

	// ScheduleProviderCreatedBy.
	ScheduleProviderCreatedBy *string

	// ScheduleProviderGender.
	ScheduleProviderGender *string

	// ScheduleProviderGivenName.
	ScheduleProviderGivenName *string

	// ScheduleProviderID.
	ScheduleProviderID *string

	// ScheduleProviderOrgID.
	ScheduleProviderOrgID *string

	// ScheduleProviderPrefix.
	ScheduleProviderPrefix *string

	// ScheduleProviderRefID.
	ScheduleProviderRefID *string

	// ScheduleProviderRole.
	ScheduleProviderRole *string

	// ScheduleProviderSuffix.
	ScheduleProviderSuffix *string

	// ScheduleProviderSurname.
	ScheduleProviderSurname *string

	// ScheduleProviderTimezoneAbbreviation.
	ScheduleProviderTimezoneAbbreviation *string

	// ScheduleProviderTimezoneDst.
	ScheduleProviderTimezoneDst *bool

	// ScheduleProviderTimezoneGmtOffset.
	//
	// Format: int32
	ScheduleProviderTimezoneGmtOffset *int32

	// ScheduleProviderTimezoneID.
	//
	// Format: int32
	ScheduleProviderTimezoneID *int32

	// ScheduleProviderTimezoneTimeStart.
	//
	// Format: int64
	ScheduleProviderTimezoneTimeStart *string

	// ScheduleProviderTimezoneZoneCountryCode.
	ScheduleProviderTimezoneZoneCountryCode *string

	// ScheduleProviderTimezoneZoneID.
	//
	// Format: int32
	ScheduleProviderTimezoneZoneID *int32

	// ScheduleProviderTimezoneZoneName.
	ScheduleProviderTimezoneZoneName *string

	// ScheduleProviderUpdatedAt.
	ScheduleProviderUpdatedAt *string

	// ScheduleProviderUpdatedBy.
	ScheduleProviderUpdatedBy *string

	// ScheduleTimezoneAbbreviation.
	ScheduleTimezoneAbbreviation *string

	// ScheduleTimezoneDst.
	ScheduleTimezoneDst *bool

	// ScheduleTimezoneGmtOffset.
	//
	// Format: int32
	ScheduleTimezoneGmtOffset *int32

	// ScheduleTimezoneID.
	//
	// Format: int32
	ScheduleTimezoneID *int32

	// ScheduleTimezoneTimeStart.
	//
	// Format: int64
	ScheduleTimezoneTimeStart *string

	// ScheduleTimezoneZoneCountryCode.
	ScheduleTimezoneZoneCountryCode *string

	// ScheduleTimezoneZoneID.
	//
	// Format: int32
	ScheduleTimezoneZoneID *int32

	// ScheduleTimezoneZoneName.
	ScheduleTimezoneZoneName *string

	// ScheduleTz.
	ScheduleTz *string

	// ScheduleUpdatedAt.
	ScheduleUpdatedAt *string

	// ScheduleUpdatedBy.
	ScheduleUpdatedBy *string

	// StartAt.
	StartAt *string

	// Tz.
	Tz *string

	// Unavailable.
	Unavailable *bool

	// UpdatedAt.
	UpdatedAt *string

	// UpdatedBy.
	UpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get schedule block params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetScheduleBlockParams) WithDefaults() *SchedulerGetScheduleBlockParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get schedule block params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetScheduleBlockParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithTimeout(timeout time.Duration) *SchedulerGetScheduleBlockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithContext(ctx context.Context) *SchedulerGetScheduleBlockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithHTTPClient(client *http.Client) *SchedulerGetScheduleBlockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithActive(active *bool) *SchedulerGetScheduleBlockParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetActive(active *bool) {
	o.Active = active
}

// WithCreatedAt adds the createdAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithCreatedAt(createdAt *string) *SchedulerGetScheduleBlockParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedBy adds the createdBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithCreatedBy(createdBy *string) *SchedulerGetScheduleBlockParams {
	o.SetCreatedBy(createdBy)
	return o
}

// SetCreatedBy adds the createdBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetCreatedBy(createdBy *string) {
	o.CreatedBy = createdBy
}

// WithDayOfWeek adds the dayOfWeek to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithDayOfWeek(dayOfWeek *int32) *SchedulerGetScheduleBlockParams {
	o.SetDayOfWeek(dayOfWeek)
	return o
}

// SetDayOfWeek adds the dayOfWeek to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetDayOfWeek(dayOfWeek *int32) {
	o.DayOfWeek = dayOfWeek
}

// WithEndAt adds the endAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithEndAt(endAt *string) *SchedulerGetScheduleBlockParams {
	o.SetEndAt(endAt)
	return o
}

// SetEndAt adds the endAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetEndAt(endAt *string) {
	o.EndAt = endAt
}

// WithID adds the id to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithID(id string) *SchedulerGetScheduleBlockParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetID(id string) {
	o.ID = id
}

// WithMinimumPadding adds the minimumPadding to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithMinimumPadding(minimumPadding *int32) *SchedulerGetScheduleBlockParams {
	o.SetMinimumPadding(minimumPadding)
	return o
}

// SetMinimumPadding adds the minimumPadding to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetMinimumPadding(minimumPadding *int32) {
	o.MinimumPadding = minimumPadding
}

// WithParentID adds the parentID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithParentID(parentID *string) *SchedulerGetScheduleBlockParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithProviderID adds the providerID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithProviderID(providerID *string) *SchedulerGetScheduleBlockParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetProviderID(providerID *string) {
	o.ProviderID = providerID
}

// WithRepeat adds the repeat to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithRepeat(repeat *bool) *SchedulerGetScheduleBlockParams {
	o.SetRepeat(repeat)
	return o
}

// SetRepeat adds the repeat to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetRepeat(repeat *bool) {
	o.Repeat = repeat
}

// WithRepeatLimit adds the repeatLimit to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithRepeatLimit(repeatLimit *int32) *SchedulerGetScheduleBlockParams {
	o.SetRepeatLimit(repeatLimit)
	return o
}

// SetRepeatLimit adds the repeatLimit to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetRepeatLimit(repeatLimit *int32) {
	o.RepeatLimit = repeatLimit
}

// WithRepeatStep adds the repeatStep to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithRepeatStep(repeatStep *string) *SchedulerGetScheduleBlockParams {
	o.SetRepeatStep(repeatStep)
	return o
}

// SetRepeatStep adds the repeatStep to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetRepeatStep(repeatStep *string) {
	o.RepeatStep = repeatStep
}

// WithRepeatUntil adds the repeatUntil to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithRepeatUntil(repeatUntil *string) *SchedulerGetScheduleBlockParams {
	o.SetRepeatUntil(repeatUntil)
	return o
}

// SetRepeatUntil adds the repeatUntil to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetRepeatUntil(repeatUntil *string) {
	o.RepeatUntil = repeatUntil
}

// WithRepeatWeekDays adds the repeatWeekDays to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithRepeatWeekDays(repeatWeekDays []int32) *SchedulerGetScheduleBlockParams {
	o.SetRepeatWeekDays(repeatWeekDays)
	return o
}

// SetRepeatWeekDays adds the repeatWeekDays to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetRepeatWeekDays(repeatWeekDays []int32) {
	o.RepeatWeekDays = repeatWeekDays
}

// WithScheduleActive adds the scheduleActive to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleActive(scheduleActive *bool) *SchedulerGetScheduleBlockParams {
	o.SetScheduleActive(scheduleActive)
	return o
}

// SetScheduleActive adds the scheduleActive to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleActive(scheduleActive *bool) {
	o.ScheduleActive = scheduleActive
}

// WithScheduleActiveFrom adds the scheduleActiveFrom to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleActiveFrom(scheduleActiveFrom *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleActiveFrom(scheduleActiveFrom)
	return o
}

// SetScheduleActiveFrom adds the scheduleActiveFrom to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleActiveFrom(scheduleActiveFrom *string) {
	o.ScheduleActiveFrom = scheduleActiveFrom
}

// WithScheduleActiveTo adds the scheduleActiveTo to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleActiveTo(scheduleActiveTo *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleActiveTo(scheduleActiveTo)
	return o
}

// SetScheduleActiveTo adds the scheduleActiveTo to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleActiveTo(scheduleActiveTo *string) {
	o.ScheduleActiveTo = scheduleActiveTo
}

// WithScheduleCreatedAt adds the scheduleCreatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleCreatedAt(scheduleCreatedAt *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleCreatedAt(scheduleCreatedAt)
	return o
}

// SetScheduleCreatedAt adds the scheduleCreatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleCreatedAt(scheduleCreatedAt *string) {
	o.ScheduleCreatedAt = scheduleCreatedAt
}

// WithScheduleCreatedBy adds the scheduleCreatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleCreatedBy(scheduleCreatedBy *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleCreatedBy(scheduleCreatedBy)
	return o
}

// SetScheduleCreatedBy adds the scheduleCreatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleCreatedBy(scheduleCreatedBy *string) {
	o.ScheduleCreatedBy = scheduleCreatedBy
}

// WithScheduleDefault adds the scheduleDefault to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleDefault(scheduleDefault *bool) *SchedulerGetScheduleBlockParams {
	o.SetScheduleDefault(scheduleDefault)
	return o
}

// SetScheduleDefault adds the scheduleDefault to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleDefault(scheduleDefault *bool) {
	o.ScheduleDefault = scheduleDefault
}

// WithScheduleID adds the scheduleID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleID(scheduleID string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleID(scheduleID)
	return o
}

// SetScheduleID adds the scheduleId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleID(scheduleID string) {
	o.ScheduleID = scheduleID
}

// WithScheduleIncludeBlocks adds the scheduleIncludeBlocks to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleIncludeBlocks(scheduleIncludeBlocks *bool) *SchedulerGetScheduleBlockParams {
	o.SetScheduleIncludeBlocks(scheduleIncludeBlocks)
	return o
}

// SetScheduleIncludeBlocks adds the scheduleIncludeBlocks to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleIncludeBlocks(scheduleIncludeBlocks *bool) {
	o.ScheduleIncludeBlocks = scheduleIncludeBlocks
}

// WithScheduleMaxPer adds the scheduleMaxPer to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleMaxPer(scheduleMaxPer *int32) *SchedulerGetScheduleBlockParams {
	o.SetScheduleMaxPer(scheduleMaxPer)
	return o
}

// SetScheduleMaxPer adds the scheduleMaxPer to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleMaxPer(scheduleMaxPer *int32) {
	o.ScheduleMaxPer = scheduleMaxPer
}

// WithScheduleMaxPerType adds the scheduleMaxPerType to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleMaxPerType(scheduleMaxPerType *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleMaxPerType(scheduleMaxPerType)
	return o
}

// SetScheduleMaxPerType adds the scheduleMaxPerType to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleMaxPerType(scheduleMaxPerType *string) {
	o.ScheduleMaxPerType = scheduleMaxPerType
}

// WithScheduleName adds the scheduleName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleName(scheduleName *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleName(scheduleName)
	return o
}

// SetScheduleName adds the scheduleName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleName(scheduleName *string) {
	o.ScheduleName = scheduleName
}

// WithScheduleProviderActive adds the scheduleProviderActive to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderActive(scheduleProviderActive *bool) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderActive(scheduleProviderActive)
	return o
}

// SetScheduleProviderActive adds the scheduleProviderActive to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderActive(scheduleProviderActive *bool) {
	o.ScheduleProviderActive = scheduleProviderActive
}

// WithScheduleProviderCreatedAt adds the scheduleProviderCreatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderCreatedAt(scheduleProviderCreatedAt *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderCreatedAt(scheduleProviderCreatedAt)
	return o
}

// SetScheduleProviderCreatedAt adds the scheduleProviderCreatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderCreatedAt(scheduleProviderCreatedAt *string) {
	o.ScheduleProviderCreatedAt = scheduleProviderCreatedAt
}

// WithScheduleProviderCreatedBy adds the scheduleProviderCreatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderCreatedBy(scheduleProviderCreatedBy *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderCreatedBy(scheduleProviderCreatedBy)
	return o
}

// SetScheduleProviderCreatedBy adds the scheduleProviderCreatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderCreatedBy(scheduleProviderCreatedBy *string) {
	o.ScheduleProviderCreatedBy = scheduleProviderCreatedBy
}

// WithScheduleProviderGender adds the scheduleProviderGender to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderGender(scheduleProviderGender *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderGender(scheduleProviderGender)
	return o
}

// SetScheduleProviderGender adds the scheduleProviderGender to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderGender(scheduleProviderGender *string) {
	o.ScheduleProviderGender = scheduleProviderGender
}

// WithScheduleProviderGivenName adds the scheduleProviderGivenName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderGivenName(scheduleProviderGivenName *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderGivenName(scheduleProviderGivenName)
	return o
}

// SetScheduleProviderGivenName adds the scheduleProviderGivenName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderGivenName(scheduleProviderGivenName *string) {
	o.ScheduleProviderGivenName = scheduleProviderGivenName
}

// WithScheduleProviderID adds the scheduleProviderID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderID(scheduleProviderID *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderID(scheduleProviderID)
	return o
}

// SetScheduleProviderID adds the scheduleProviderId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderID(scheduleProviderID *string) {
	o.ScheduleProviderID = scheduleProviderID
}

// WithScheduleProviderOrgID adds the scheduleProviderOrgID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderOrgID(scheduleProviderOrgID *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderOrgID(scheduleProviderOrgID)
	return o
}

// SetScheduleProviderOrgID adds the scheduleProviderOrgId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderOrgID(scheduleProviderOrgID *string) {
	o.ScheduleProviderOrgID = scheduleProviderOrgID
}

// WithScheduleProviderPrefix adds the scheduleProviderPrefix to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderPrefix(scheduleProviderPrefix *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderPrefix(scheduleProviderPrefix)
	return o
}

// SetScheduleProviderPrefix adds the scheduleProviderPrefix to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderPrefix(scheduleProviderPrefix *string) {
	o.ScheduleProviderPrefix = scheduleProviderPrefix
}

// WithScheduleProviderRefID adds the scheduleProviderRefID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderRefID(scheduleProviderRefID *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderRefID(scheduleProviderRefID)
	return o
}

// SetScheduleProviderRefID adds the scheduleProviderRefId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderRefID(scheduleProviderRefID *string) {
	o.ScheduleProviderRefID = scheduleProviderRefID
}

// WithScheduleProviderRole adds the scheduleProviderRole to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderRole(scheduleProviderRole *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderRole(scheduleProviderRole)
	return o
}

// SetScheduleProviderRole adds the scheduleProviderRole to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderRole(scheduleProviderRole *string) {
	o.ScheduleProviderRole = scheduleProviderRole
}

// WithScheduleProviderSuffix adds the scheduleProviderSuffix to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderSuffix(scheduleProviderSuffix *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderSuffix(scheduleProviderSuffix)
	return o
}

// SetScheduleProviderSuffix adds the scheduleProviderSuffix to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderSuffix(scheduleProviderSuffix *string) {
	o.ScheduleProviderSuffix = scheduleProviderSuffix
}

// WithScheduleProviderSurname adds the scheduleProviderSurname to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderSurname(scheduleProviderSurname *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderSurname(scheduleProviderSurname)
	return o
}

// SetScheduleProviderSurname adds the scheduleProviderSurname to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderSurname(scheduleProviderSurname *string) {
	o.ScheduleProviderSurname = scheduleProviderSurname
}

// WithScheduleProviderTimezoneAbbreviation adds the scheduleProviderTimezoneAbbreviation to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneAbbreviation(scheduleProviderTimezoneAbbreviation *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneAbbreviation(scheduleProviderTimezoneAbbreviation)
	return o
}

// SetScheduleProviderTimezoneAbbreviation adds the scheduleProviderTimezoneAbbreviation to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneAbbreviation(scheduleProviderTimezoneAbbreviation *string) {
	o.ScheduleProviderTimezoneAbbreviation = scheduleProviderTimezoneAbbreviation
}

// WithScheduleProviderTimezoneDst adds the scheduleProviderTimezoneDst to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneDst(scheduleProviderTimezoneDst *bool) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneDst(scheduleProviderTimezoneDst)
	return o
}

// SetScheduleProviderTimezoneDst adds the scheduleProviderTimezoneDst to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneDst(scheduleProviderTimezoneDst *bool) {
	o.ScheduleProviderTimezoneDst = scheduleProviderTimezoneDst
}

// WithScheduleProviderTimezoneGmtOffset adds the scheduleProviderTimezoneGmtOffset to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneGmtOffset(scheduleProviderTimezoneGmtOffset *int32) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneGmtOffset(scheduleProviderTimezoneGmtOffset)
	return o
}

// SetScheduleProviderTimezoneGmtOffset adds the scheduleProviderTimezoneGmtOffset to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneGmtOffset(scheduleProviderTimezoneGmtOffset *int32) {
	o.ScheduleProviderTimezoneGmtOffset = scheduleProviderTimezoneGmtOffset
}

// WithScheduleProviderTimezoneID adds the scheduleProviderTimezoneID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneID(scheduleProviderTimezoneID *int32) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneID(scheduleProviderTimezoneID)
	return o
}

// SetScheduleProviderTimezoneID adds the scheduleProviderTimezoneId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneID(scheduleProviderTimezoneID *int32) {
	o.ScheduleProviderTimezoneID = scheduleProviderTimezoneID
}

// WithScheduleProviderTimezoneTimeStart adds the scheduleProviderTimezoneTimeStart to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneTimeStart(scheduleProviderTimezoneTimeStart *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneTimeStart(scheduleProviderTimezoneTimeStart)
	return o
}

// SetScheduleProviderTimezoneTimeStart adds the scheduleProviderTimezoneTimeStart to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneTimeStart(scheduleProviderTimezoneTimeStart *string) {
	o.ScheduleProviderTimezoneTimeStart = scheduleProviderTimezoneTimeStart
}

// WithScheduleProviderTimezoneZoneCountryCode adds the scheduleProviderTimezoneZoneCountryCode to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneZoneCountryCode(scheduleProviderTimezoneZoneCountryCode *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneZoneCountryCode(scheduleProviderTimezoneZoneCountryCode)
	return o
}

// SetScheduleProviderTimezoneZoneCountryCode adds the scheduleProviderTimezoneZoneCountryCode to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneZoneCountryCode(scheduleProviderTimezoneZoneCountryCode *string) {
	o.ScheduleProviderTimezoneZoneCountryCode = scheduleProviderTimezoneZoneCountryCode
}

// WithScheduleProviderTimezoneZoneID adds the scheduleProviderTimezoneZoneID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneZoneID(scheduleProviderTimezoneZoneID *int32) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneZoneID(scheduleProviderTimezoneZoneID)
	return o
}

// SetScheduleProviderTimezoneZoneID adds the scheduleProviderTimezoneZoneId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneZoneID(scheduleProviderTimezoneZoneID *int32) {
	o.ScheduleProviderTimezoneZoneID = scheduleProviderTimezoneZoneID
}

// WithScheduleProviderTimezoneZoneName adds the scheduleProviderTimezoneZoneName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderTimezoneZoneName(scheduleProviderTimezoneZoneName *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderTimezoneZoneName(scheduleProviderTimezoneZoneName)
	return o
}

// SetScheduleProviderTimezoneZoneName adds the scheduleProviderTimezoneZoneName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderTimezoneZoneName(scheduleProviderTimezoneZoneName *string) {
	o.ScheduleProviderTimezoneZoneName = scheduleProviderTimezoneZoneName
}

// WithScheduleProviderUpdatedAt adds the scheduleProviderUpdatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderUpdatedAt(scheduleProviderUpdatedAt *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderUpdatedAt(scheduleProviderUpdatedAt)
	return o
}

// SetScheduleProviderUpdatedAt adds the scheduleProviderUpdatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderUpdatedAt(scheduleProviderUpdatedAt *string) {
	o.ScheduleProviderUpdatedAt = scheduleProviderUpdatedAt
}

// WithScheduleProviderUpdatedBy adds the scheduleProviderUpdatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleProviderUpdatedBy(scheduleProviderUpdatedBy *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleProviderUpdatedBy(scheduleProviderUpdatedBy)
	return o
}

// SetScheduleProviderUpdatedBy adds the scheduleProviderUpdatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleProviderUpdatedBy(scheduleProviderUpdatedBy *string) {
	o.ScheduleProviderUpdatedBy = scheduleProviderUpdatedBy
}

// WithScheduleTimezoneAbbreviation adds the scheduleTimezoneAbbreviation to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneAbbreviation(scheduleTimezoneAbbreviation *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneAbbreviation(scheduleTimezoneAbbreviation)
	return o
}

// SetScheduleTimezoneAbbreviation adds the scheduleTimezoneAbbreviation to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneAbbreviation(scheduleTimezoneAbbreviation *string) {
	o.ScheduleTimezoneAbbreviation = scheduleTimezoneAbbreviation
}

// WithScheduleTimezoneDst adds the scheduleTimezoneDst to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneDst(scheduleTimezoneDst *bool) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneDst(scheduleTimezoneDst)
	return o
}

// SetScheduleTimezoneDst adds the scheduleTimezoneDst to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneDst(scheduleTimezoneDst *bool) {
	o.ScheduleTimezoneDst = scheduleTimezoneDst
}

// WithScheduleTimezoneGmtOffset adds the scheduleTimezoneGmtOffset to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneGmtOffset(scheduleTimezoneGmtOffset *int32) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneGmtOffset(scheduleTimezoneGmtOffset)
	return o
}

// SetScheduleTimezoneGmtOffset adds the scheduleTimezoneGmtOffset to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneGmtOffset(scheduleTimezoneGmtOffset *int32) {
	o.ScheduleTimezoneGmtOffset = scheduleTimezoneGmtOffset
}

// WithScheduleTimezoneID adds the scheduleTimezoneID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneID(scheduleTimezoneID *int32) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneID(scheduleTimezoneID)
	return o
}

// SetScheduleTimezoneID adds the scheduleTimezoneId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneID(scheduleTimezoneID *int32) {
	o.ScheduleTimezoneID = scheduleTimezoneID
}

// WithScheduleTimezoneTimeStart adds the scheduleTimezoneTimeStart to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneTimeStart(scheduleTimezoneTimeStart *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneTimeStart(scheduleTimezoneTimeStart)
	return o
}

// SetScheduleTimezoneTimeStart adds the scheduleTimezoneTimeStart to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneTimeStart(scheduleTimezoneTimeStart *string) {
	o.ScheduleTimezoneTimeStart = scheduleTimezoneTimeStart
}

// WithScheduleTimezoneZoneCountryCode adds the scheduleTimezoneZoneCountryCode to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneZoneCountryCode(scheduleTimezoneZoneCountryCode *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneZoneCountryCode(scheduleTimezoneZoneCountryCode)
	return o
}

// SetScheduleTimezoneZoneCountryCode adds the scheduleTimezoneZoneCountryCode to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneZoneCountryCode(scheduleTimezoneZoneCountryCode *string) {
	o.ScheduleTimezoneZoneCountryCode = scheduleTimezoneZoneCountryCode
}

// WithScheduleTimezoneZoneID adds the scheduleTimezoneZoneID to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneZoneID(scheduleTimezoneZoneID *int32) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneZoneID(scheduleTimezoneZoneID)
	return o
}

// SetScheduleTimezoneZoneID adds the scheduleTimezoneZoneId to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneZoneID(scheduleTimezoneZoneID *int32) {
	o.ScheduleTimezoneZoneID = scheduleTimezoneZoneID
}

// WithScheduleTimezoneZoneName adds the scheduleTimezoneZoneName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTimezoneZoneName(scheduleTimezoneZoneName *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTimezoneZoneName(scheduleTimezoneZoneName)
	return o
}

// SetScheduleTimezoneZoneName adds the scheduleTimezoneZoneName to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTimezoneZoneName(scheduleTimezoneZoneName *string) {
	o.ScheduleTimezoneZoneName = scheduleTimezoneZoneName
}

// WithScheduleTz adds the scheduleTz to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleTz(scheduleTz *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleTz(scheduleTz)
	return o
}

// SetScheduleTz adds the scheduleTz to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleTz(scheduleTz *string) {
	o.ScheduleTz = scheduleTz
}

// WithScheduleUpdatedAt adds the scheduleUpdatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleUpdatedAt(scheduleUpdatedAt *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleUpdatedAt(scheduleUpdatedAt)
	return o
}

// SetScheduleUpdatedAt adds the scheduleUpdatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleUpdatedAt(scheduleUpdatedAt *string) {
	o.ScheduleUpdatedAt = scheduleUpdatedAt
}

// WithScheduleUpdatedBy adds the scheduleUpdatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithScheduleUpdatedBy(scheduleUpdatedBy *string) *SchedulerGetScheduleBlockParams {
	o.SetScheduleUpdatedBy(scheduleUpdatedBy)
	return o
}

// SetScheduleUpdatedBy adds the scheduleUpdatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetScheduleUpdatedBy(scheduleUpdatedBy *string) {
	o.ScheduleUpdatedBy = scheduleUpdatedBy
}

// WithStartAt adds the startAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithStartAt(startAt *string) *SchedulerGetScheduleBlockParams {
	o.SetStartAt(startAt)
	return o
}

// SetStartAt adds the startAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetStartAt(startAt *string) {
	o.StartAt = startAt
}

// WithTz adds the tz to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithTz(tz *string) *SchedulerGetScheduleBlockParams {
	o.SetTz(tz)
	return o
}

// SetTz adds the tz to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetTz(tz *string) {
	o.Tz = tz
}

// WithUnavailable adds the unavailable to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithUnavailable(unavailable *bool) *SchedulerGetScheduleBlockParams {
	o.SetUnavailable(unavailable)
	return o
}

// SetUnavailable adds the unavailable to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetUnavailable(unavailable *bool) {
	o.Unavailable = unavailable
}

// WithUpdatedAt adds the updatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithUpdatedAt(updatedAt *string) *SchedulerGetScheduleBlockParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedBy adds the updatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) WithUpdatedBy(updatedBy *string) *SchedulerGetScheduleBlockParams {
	o.SetUpdatedBy(updatedBy)
	return o
}

// SetUpdatedBy adds the updatedBy to the scheduler get schedule block params
func (o *SchedulerGetScheduleBlockParams) SetUpdatedBy(updatedBy *string) {
	o.UpdatedBy = updatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetScheduleBlockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {

			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.CreatedBy != nil {

		// query param created_by
		var qrCreatedBy string

		if o.CreatedBy != nil {
			qrCreatedBy = *o.CreatedBy
		}
		qCreatedBy := qrCreatedBy
		if qCreatedBy != "" {

			if err := r.SetQueryParam("created_by", qCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.DayOfWeek != nil {

		// query param day_of_week
		var qrDayOfWeek int32

		if o.DayOfWeek != nil {
			qrDayOfWeek = *o.DayOfWeek
		}
		qDayOfWeek := swag.FormatInt32(qrDayOfWeek)
		if qDayOfWeek != "" {

			if err := r.SetQueryParam("day_of_week", qDayOfWeek); err != nil {
				return err
			}
		}
	}

	if o.EndAt != nil {

		// query param end_at
		var qrEndAt string

		if o.EndAt != nil {
			qrEndAt = *o.EndAt
		}
		qEndAt := qrEndAt
		if qEndAt != "" {

			if err := r.SetQueryParam("end_at", qEndAt); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.MinimumPadding != nil {

		// query param minimum_padding
		var qrMinimumPadding int32

		if o.MinimumPadding != nil {
			qrMinimumPadding = *o.MinimumPadding
		}
		qMinimumPadding := swag.FormatInt32(qrMinimumPadding)
		if qMinimumPadding != "" {

			if err := r.SetQueryParam("minimum_padding", qMinimumPadding); err != nil {
				return err
			}
		}
	}

	if o.ParentID != nil {

		// query param parent_id
		var qrParentID string

		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {

			if err := r.SetQueryParam("parent_id", qParentID); err != nil {
				return err
			}
		}
	}

	if o.ProviderID != nil {

		// query param provider_id
		var qrProviderID string

		if o.ProviderID != nil {
			qrProviderID = *o.ProviderID
		}
		qProviderID := qrProviderID
		if qProviderID != "" {

			if err := r.SetQueryParam("provider_id", qProviderID); err != nil {
				return err
			}
		}
	}

	if o.Repeat != nil {

		// query param repeat
		var qrRepeat bool

		if o.Repeat != nil {
			qrRepeat = *o.Repeat
		}
		qRepeat := swag.FormatBool(qrRepeat)
		if qRepeat != "" {

			if err := r.SetQueryParam("repeat", qRepeat); err != nil {
				return err
			}
		}
	}

	if o.RepeatLimit != nil {

		// query param repeat_limit
		var qrRepeatLimit int32

		if o.RepeatLimit != nil {
			qrRepeatLimit = *o.RepeatLimit
		}
		qRepeatLimit := swag.FormatInt32(qrRepeatLimit)
		if qRepeatLimit != "" {

			if err := r.SetQueryParam("repeat_limit", qRepeatLimit); err != nil {
				return err
			}
		}
	}

	if o.RepeatStep != nil {

		// query param repeat_step
		var qrRepeatStep string

		if o.RepeatStep != nil {
			qrRepeatStep = *o.RepeatStep
		}
		qRepeatStep := qrRepeatStep
		if qRepeatStep != "" {

			if err := r.SetQueryParam("repeat_step", qRepeatStep); err != nil {
				return err
			}
		}
	}

	if o.RepeatUntil != nil {

		// query param repeat_until
		var qrRepeatUntil string

		if o.RepeatUntil != nil {
			qrRepeatUntil = *o.RepeatUntil
		}
		qRepeatUntil := qrRepeatUntil
		if qRepeatUntil != "" {

			if err := r.SetQueryParam("repeat_until", qRepeatUntil); err != nil {
				return err
			}
		}
	}

	if o.RepeatWeekDays != nil {

		// binding items for repeat_week_days
		joinedRepeatWeekDays := o.bindParamRepeatWeekDays(reg)

		// query array param repeat_week_days
		if err := r.SetQueryParam("repeat_week_days", joinedRepeatWeekDays...); err != nil {
			return err
		}
	}

	if o.ScheduleActive != nil {

		// query param schedule.active
		var qrScheduleActive bool

		if o.ScheduleActive != nil {
			qrScheduleActive = *o.ScheduleActive
		}
		qScheduleActive := swag.FormatBool(qrScheduleActive)
		if qScheduleActive != "" {

			if err := r.SetQueryParam("schedule.active", qScheduleActive); err != nil {
				return err
			}
		}
	}

	if o.ScheduleActiveFrom != nil {

		// query param schedule.active_from
		var qrScheduleActiveFrom string

		if o.ScheduleActiveFrom != nil {
			qrScheduleActiveFrom = *o.ScheduleActiveFrom
		}
		qScheduleActiveFrom := qrScheduleActiveFrom
		if qScheduleActiveFrom != "" {

			if err := r.SetQueryParam("schedule.active_from", qScheduleActiveFrom); err != nil {
				return err
			}
		}
	}

	if o.ScheduleActiveTo != nil {

		// query param schedule.active_to
		var qrScheduleActiveTo string

		if o.ScheduleActiveTo != nil {
			qrScheduleActiveTo = *o.ScheduleActiveTo
		}
		qScheduleActiveTo := qrScheduleActiveTo
		if qScheduleActiveTo != "" {

			if err := r.SetQueryParam("schedule.active_to", qScheduleActiveTo); err != nil {
				return err
			}
		}
	}

	if o.ScheduleCreatedAt != nil {

		// query param schedule.created_at
		var qrScheduleCreatedAt string

		if o.ScheduleCreatedAt != nil {
			qrScheduleCreatedAt = *o.ScheduleCreatedAt
		}
		qScheduleCreatedAt := qrScheduleCreatedAt
		if qScheduleCreatedAt != "" {

			if err := r.SetQueryParam("schedule.created_at", qScheduleCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ScheduleCreatedBy != nil {

		// query param schedule.created_by
		var qrScheduleCreatedBy string

		if o.ScheduleCreatedBy != nil {
			qrScheduleCreatedBy = *o.ScheduleCreatedBy
		}
		qScheduleCreatedBy := qrScheduleCreatedBy
		if qScheduleCreatedBy != "" {

			if err := r.SetQueryParam("schedule.created_by", qScheduleCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ScheduleDefault != nil {

		// query param schedule.default
		var qrScheduleDefault bool

		if o.ScheduleDefault != nil {
			qrScheduleDefault = *o.ScheduleDefault
		}
		qScheduleDefault := swag.FormatBool(qrScheduleDefault)
		if qScheduleDefault != "" {

			if err := r.SetQueryParam("schedule.default", qScheduleDefault); err != nil {
				return err
			}
		}
	}

	// path param schedule.id
	if err := r.SetPathParam("schedule.id", o.ScheduleID); err != nil {
		return err
	}

	if o.ScheduleIncludeBlocks != nil {

		// query param schedule.include_blocks
		var qrScheduleIncludeBlocks bool

		if o.ScheduleIncludeBlocks != nil {
			qrScheduleIncludeBlocks = *o.ScheduleIncludeBlocks
		}
		qScheduleIncludeBlocks := swag.FormatBool(qrScheduleIncludeBlocks)
		if qScheduleIncludeBlocks != "" {

			if err := r.SetQueryParam("schedule.include_blocks", qScheduleIncludeBlocks); err != nil {
				return err
			}
		}
	}

	if o.ScheduleMaxPer != nil {

		// query param schedule.max_per
		var qrScheduleMaxPer int32

		if o.ScheduleMaxPer != nil {
			qrScheduleMaxPer = *o.ScheduleMaxPer
		}
		qScheduleMaxPer := swag.FormatInt32(qrScheduleMaxPer)
		if qScheduleMaxPer != "" {

			if err := r.SetQueryParam("schedule.max_per", qScheduleMaxPer); err != nil {
				return err
			}
		}
	}

	if o.ScheduleMaxPerType != nil {

		// query param schedule.max_per_type
		var qrScheduleMaxPerType string

		if o.ScheduleMaxPerType != nil {
			qrScheduleMaxPerType = *o.ScheduleMaxPerType
		}
		qScheduleMaxPerType := qrScheduleMaxPerType
		if qScheduleMaxPerType != "" {

			if err := r.SetQueryParam("schedule.max_per_type", qScheduleMaxPerType); err != nil {
				return err
			}
		}
	}

	if o.ScheduleName != nil {

		// query param schedule.name
		var qrScheduleName string

		if o.ScheduleName != nil {
			qrScheduleName = *o.ScheduleName
		}
		qScheduleName := qrScheduleName
		if qScheduleName != "" {

			if err := r.SetQueryParam("schedule.name", qScheduleName); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderActive != nil {

		// query param schedule.provider.active
		var qrScheduleProviderActive bool

		if o.ScheduleProviderActive != nil {
			qrScheduleProviderActive = *o.ScheduleProviderActive
		}
		qScheduleProviderActive := swag.FormatBool(qrScheduleProviderActive)
		if qScheduleProviderActive != "" {

			if err := r.SetQueryParam("schedule.provider.active", qScheduleProviderActive); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderCreatedAt != nil {

		// query param schedule.provider.created_at
		var qrScheduleProviderCreatedAt string

		if o.ScheduleProviderCreatedAt != nil {
			qrScheduleProviderCreatedAt = *o.ScheduleProviderCreatedAt
		}
		qScheduleProviderCreatedAt := qrScheduleProviderCreatedAt
		if qScheduleProviderCreatedAt != "" {

			if err := r.SetQueryParam("schedule.provider.created_at", qScheduleProviderCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderCreatedBy != nil {

		// query param schedule.provider.created_by
		var qrScheduleProviderCreatedBy string

		if o.ScheduleProviderCreatedBy != nil {
			qrScheduleProviderCreatedBy = *o.ScheduleProviderCreatedBy
		}
		qScheduleProviderCreatedBy := qrScheduleProviderCreatedBy
		if qScheduleProviderCreatedBy != "" {

			if err := r.SetQueryParam("schedule.provider.created_by", qScheduleProviderCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderGender != nil {

		// query param schedule.provider.gender
		var qrScheduleProviderGender string

		if o.ScheduleProviderGender != nil {
			qrScheduleProviderGender = *o.ScheduleProviderGender
		}
		qScheduleProviderGender := qrScheduleProviderGender
		if qScheduleProviderGender != "" {

			if err := r.SetQueryParam("schedule.provider.gender", qScheduleProviderGender); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderGivenName != nil {

		// query param schedule.provider.given_name
		var qrScheduleProviderGivenName string

		if o.ScheduleProviderGivenName != nil {
			qrScheduleProviderGivenName = *o.ScheduleProviderGivenName
		}
		qScheduleProviderGivenName := qrScheduleProviderGivenName
		if qScheduleProviderGivenName != "" {

			if err := r.SetQueryParam("schedule.provider.given_name", qScheduleProviderGivenName); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderID != nil {

		// query param schedule.provider.id
		var qrScheduleProviderID string

		if o.ScheduleProviderID != nil {
			qrScheduleProviderID = *o.ScheduleProviderID
		}
		qScheduleProviderID := qrScheduleProviderID
		if qScheduleProviderID != "" {

			if err := r.SetQueryParam("schedule.provider.id", qScheduleProviderID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderOrgID != nil {

		// query param schedule.provider.org_id
		var qrScheduleProviderOrgID string

		if o.ScheduleProviderOrgID != nil {
			qrScheduleProviderOrgID = *o.ScheduleProviderOrgID
		}
		qScheduleProviderOrgID := qrScheduleProviderOrgID
		if qScheduleProviderOrgID != "" {

			if err := r.SetQueryParam("schedule.provider.org_id", qScheduleProviderOrgID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderPrefix != nil {

		// query param schedule.provider.prefix
		var qrScheduleProviderPrefix string

		if o.ScheduleProviderPrefix != nil {
			qrScheduleProviderPrefix = *o.ScheduleProviderPrefix
		}
		qScheduleProviderPrefix := qrScheduleProviderPrefix
		if qScheduleProviderPrefix != "" {

			if err := r.SetQueryParam("schedule.provider.prefix", qScheduleProviderPrefix); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderRefID != nil {

		// query param schedule.provider.ref_id
		var qrScheduleProviderRefID string

		if o.ScheduleProviderRefID != nil {
			qrScheduleProviderRefID = *o.ScheduleProviderRefID
		}
		qScheduleProviderRefID := qrScheduleProviderRefID
		if qScheduleProviderRefID != "" {

			if err := r.SetQueryParam("schedule.provider.ref_id", qScheduleProviderRefID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderRole != nil {

		// query param schedule.provider.role
		var qrScheduleProviderRole string

		if o.ScheduleProviderRole != nil {
			qrScheduleProviderRole = *o.ScheduleProviderRole
		}
		qScheduleProviderRole := qrScheduleProviderRole
		if qScheduleProviderRole != "" {

			if err := r.SetQueryParam("schedule.provider.role", qScheduleProviderRole); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderSuffix != nil {

		// query param schedule.provider.suffix
		var qrScheduleProviderSuffix string

		if o.ScheduleProviderSuffix != nil {
			qrScheduleProviderSuffix = *o.ScheduleProviderSuffix
		}
		qScheduleProviderSuffix := qrScheduleProviderSuffix
		if qScheduleProviderSuffix != "" {

			if err := r.SetQueryParam("schedule.provider.suffix", qScheduleProviderSuffix); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderSurname != nil {

		// query param schedule.provider.surname
		var qrScheduleProviderSurname string

		if o.ScheduleProviderSurname != nil {
			qrScheduleProviderSurname = *o.ScheduleProviderSurname
		}
		qScheduleProviderSurname := qrScheduleProviderSurname
		if qScheduleProviderSurname != "" {

			if err := r.SetQueryParam("schedule.provider.surname", qScheduleProviderSurname); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneAbbreviation != nil {

		// query param schedule.provider.timezone.abbreviation
		var qrScheduleProviderTimezoneAbbreviation string

		if o.ScheduleProviderTimezoneAbbreviation != nil {
			qrScheduleProviderTimezoneAbbreviation = *o.ScheduleProviderTimezoneAbbreviation
		}
		qScheduleProviderTimezoneAbbreviation := qrScheduleProviderTimezoneAbbreviation
		if qScheduleProviderTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.abbreviation", qScheduleProviderTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneDst != nil {

		// query param schedule.provider.timezone.dst
		var qrScheduleProviderTimezoneDst bool

		if o.ScheduleProviderTimezoneDst != nil {
			qrScheduleProviderTimezoneDst = *o.ScheduleProviderTimezoneDst
		}
		qScheduleProviderTimezoneDst := swag.FormatBool(qrScheduleProviderTimezoneDst)
		if qScheduleProviderTimezoneDst != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.dst", qScheduleProviderTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneGmtOffset != nil {

		// query param schedule.provider.timezone.gmt_offset
		var qrScheduleProviderTimezoneGmtOffset int32

		if o.ScheduleProviderTimezoneGmtOffset != nil {
			qrScheduleProviderTimezoneGmtOffset = *o.ScheduleProviderTimezoneGmtOffset
		}
		qScheduleProviderTimezoneGmtOffset := swag.FormatInt32(qrScheduleProviderTimezoneGmtOffset)
		if qScheduleProviderTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.gmt_offset", qScheduleProviderTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneID != nil {

		// query param schedule.provider.timezone.id
		var qrScheduleProviderTimezoneID int32

		if o.ScheduleProviderTimezoneID != nil {
			qrScheduleProviderTimezoneID = *o.ScheduleProviderTimezoneID
		}
		qScheduleProviderTimezoneID := swag.FormatInt32(qrScheduleProviderTimezoneID)
		if qScheduleProviderTimezoneID != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.id", qScheduleProviderTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneTimeStart != nil {

		// query param schedule.provider.timezone.time_start
		var qrScheduleProviderTimezoneTimeStart string

		if o.ScheduleProviderTimezoneTimeStart != nil {
			qrScheduleProviderTimezoneTimeStart = *o.ScheduleProviderTimezoneTimeStart
		}
		qScheduleProviderTimezoneTimeStart := qrScheduleProviderTimezoneTimeStart
		if qScheduleProviderTimezoneTimeStart != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.time_start", qScheduleProviderTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneZoneCountryCode != nil {

		// query param schedule.provider.timezone.zone.country_code
		var qrScheduleProviderTimezoneZoneCountryCode string

		if o.ScheduleProviderTimezoneZoneCountryCode != nil {
			qrScheduleProviderTimezoneZoneCountryCode = *o.ScheduleProviderTimezoneZoneCountryCode
		}
		qScheduleProviderTimezoneZoneCountryCode := qrScheduleProviderTimezoneZoneCountryCode
		if qScheduleProviderTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.zone.country_code", qScheduleProviderTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneZoneID != nil {

		// query param schedule.provider.timezone.zone.id
		var qrScheduleProviderTimezoneZoneID int32

		if o.ScheduleProviderTimezoneZoneID != nil {
			qrScheduleProviderTimezoneZoneID = *o.ScheduleProviderTimezoneZoneID
		}
		qScheduleProviderTimezoneZoneID := swag.FormatInt32(qrScheduleProviderTimezoneZoneID)
		if qScheduleProviderTimezoneZoneID != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.zone.id", qScheduleProviderTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderTimezoneZoneName != nil {

		// query param schedule.provider.timezone.zone.name
		var qrScheduleProviderTimezoneZoneName string

		if o.ScheduleProviderTimezoneZoneName != nil {
			qrScheduleProviderTimezoneZoneName = *o.ScheduleProviderTimezoneZoneName
		}
		qScheduleProviderTimezoneZoneName := qrScheduleProviderTimezoneZoneName
		if qScheduleProviderTimezoneZoneName != "" {

			if err := r.SetQueryParam("schedule.provider.timezone.zone.name", qScheduleProviderTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderUpdatedAt != nil {

		// query param schedule.provider.updated_at
		var qrScheduleProviderUpdatedAt string

		if o.ScheduleProviderUpdatedAt != nil {
			qrScheduleProviderUpdatedAt = *o.ScheduleProviderUpdatedAt
		}
		qScheduleProviderUpdatedAt := qrScheduleProviderUpdatedAt
		if qScheduleProviderUpdatedAt != "" {

			if err := r.SetQueryParam("schedule.provider.updated_at", qScheduleProviderUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ScheduleProviderUpdatedBy != nil {

		// query param schedule.provider.updated_by
		var qrScheduleProviderUpdatedBy string

		if o.ScheduleProviderUpdatedBy != nil {
			qrScheduleProviderUpdatedBy = *o.ScheduleProviderUpdatedBy
		}
		qScheduleProviderUpdatedBy := qrScheduleProviderUpdatedBy
		if qScheduleProviderUpdatedBy != "" {

			if err := r.SetQueryParam("schedule.provider.updated_by", qScheduleProviderUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneAbbreviation != nil {

		// query param schedule.timezone.abbreviation
		var qrScheduleTimezoneAbbreviation string

		if o.ScheduleTimezoneAbbreviation != nil {
			qrScheduleTimezoneAbbreviation = *o.ScheduleTimezoneAbbreviation
		}
		qScheduleTimezoneAbbreviation := qrScheduleTimezoneAbbreviation
		if qScheduleTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("schedule.timezone.abbreviation", qScheduleTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneDst != nil {

		// query param schedule.timezone.dst
		var qrScheduleTimezoneDst bool

		if o.ScheduleTimezoneDst != nil {
			qrScheduleTimezoneDst = *o.ScheduleTimezoneDst
		}
		qScheduleTimezoneDst := swag.FormatBool(qrScheduleTimezoneDst)
		if qScheduleTimezoneDst != "" {

			if err := r.SetQueryParam("schedule.timezone.dst", qScheduleTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneGmtOffset != nil {

		// query param schedule.timezone.gmt_offset
		var qrScheduleTimezoneGmtOffset int32

		if o.ScheduleTimezoneGmtOffset != nil {
			qrScheduleTimezoneGmtOffset = *o.ScheduleTimezoneGmtOffset
		}
		qScheduleTimezoneGmtOffset := swag.FormatInt32(qrScheduleTimezoneGmtOffset)
		if qScheduleTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("schedule.timezone.gmt_offset", qScheduleTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneID != nil {

		// query param schedule.timezone.id
		var qrScheduleTimezoneID int32

		if o.ScheduleTimezoneID != nil {
			qrScheduleTimezoneID = *o.ScheduleTimezoneID
		}
		qScheduleTimezoneID := swag.FormatInt32(qrScheduleTimezoneID)
		if qScheduleTimezoneID != "" {

			if err := r.SetQueryParam("schedule.timezone.id", qScheduleTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneTimeStart != nil {

		// query param schedule.timezone.time_start
		var qrScheduleTimezoneTimeStart string

		if o.ScheduleTimezoneTimeStart != nil {
			qrScheduleTimezoneTimeStart = *o.ScheduleTimezoneTimeStart
		}
		qScheduleTimezoneTimeStart := qrScheduleTimezoneTimeStart
		if qScheduleTimezoneTimeStart != "" {

			if err := r.SetQueryParam("schedule.timezone.time_start", qScheduleTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneZoneCountryCode != nil {

		// query param schedule.timezone.zone.country_code
		var qrScheduleTimezoneZoneCountryCode string

		if o.ScheduleTimezoneZoneCountryCode != nil {
			qrScheduleTimezoneZoneCountryCode = *o.ScheduleTimezoneZoneCountryCode
		}
		qScheduleTimezoneZoneCountryCode := qrScheduleTimezoneZoneCountryCode
		if qScheduleTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("schedule.timezone.zone.country_code", qScheduleTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneZoneID != nil {

		// query param schedule.timezone.zone.id
		var qrScheduleTimezoneZoneID int32

		if o.ScheduleTimezoneZoneID != nil {
			qrScheduleTimezoneZoneID = *o.ScheduleTimezoneZoneID
		}
		qScheduleTimezoneZoneID := swag.FormatInt32(qrScheduleTimezoneZoneID)
		if qScheduleTimezoneZoneID != "" {

			if err := r.SetQueryParam("schedule.timezone.zone.id", qScheduleTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTimezoneZoneName != nil {

		// query param schedule.timezone.zone.name
		var qrScheduleTimezoneZoneName string

		if o.ScheduleTimezoneZoneName != nil {
			qrScheduleTimezoneZoneName = *o.ScheduleTimezoneZoneName
		}
		qScheduleTimezoneZoneName := qrScheduleTimezoneZoneName
		if qScheduleTimezoneZoneName != "" {

			if err := r.SetQueryParam("schedule.timezone.zone.name", qScheduleTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.ScheduleTz != nil {

		// query param schedule.tz
		var qrScheduleTz string

		if o.ScheduleTz != nil {
			qrScheduleTz = *o.ScheduleTz
		}
		qScheduleTz := qrScheduleTz
		if qScheduleTz != "" {

			if err := r.SetQueryParam("schedule.tz", qScheduleTz); err != nil {
				return err
			}
		}
	}

	if o.ScheduleUpdatedAt != nil {

		// query param schedule.updated_at
		var qrScheduleUpdatedAt string

		if o.ScheduleUpdatedAt != nil {
			qrScheduleUpdatedAt = *o.ScheduleUpdatedAt
		}
		qScheduleUpdatedAt := qrScheduleUpdatedAt
		if qScheduleUpdatedAt != "" {

			if err := r.SetQueryParam("schedule.updated_at", qScheduleUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ScheduleUpdatedBy != nil {

		// query param schedule.updated_by
		var qrScheduleUpdatedBy string

		if o.ScheduleUpdatedBy != nil {
			qrScheduleUpdatedBy = *o.ScheduleUpdatedBy
		}
		qScheduleUpdatedBy := qrScheduleUpdatedBy
		if qScheduleUpdatedBy != "" {

			if err := r.SetQueryParam("schedule.updated_by", qScheduleUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.StartAt != nil {

		// query param start_at
		var qrStartAt string

		if o.StartAt != nil {
			qrStartAt = *o.StartAt
		}
		qStartAt := qrStartAt
		if qStartAt != "" {

			if err := r.SetQueryParam("start_at", qStartAt); err != nil {
				return err
			}
		}
	}

	if o.Tz != nil {

		// query param tz
		var qrTz string

		if o.Tz != nil {
			qrTz = *o.Tz
		}
		qTz := qrTz
		if qTz != "" {

			if err := r.SetQueryParam("tz", qTz); err != nil {
				return err
			}
		}
	}

	if o.Unavailable != nil {

		// query param unavailable
		var qrUnavailable bool

		if o.Unavailable != nil {
			qrUnavailable = *o.Unavailable
		}
		qUnavailable := swag.FormatBool(qrUnavailable)
		if qUnavailable != "" {

			if err := r.SetQueryParam("unavailable", qUnavailable); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.UpdatedBy != nil {

		// query param updated_by
		var qrUpdatedBy string

		if o.UpdatedBy != nil {
			qrUpdatedBy = *o.UpdatedBy
		}
		qUpdatedBy := qrUpdatedBy
		if qUpdatedBy != "" {

			if err := r.SetQueryParam("updated_by", qUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerGetScheduleBlock binds the parameter repeat_week_days
func (o *SchedulerGetScheduleBlockParams) bindParamRepeatWeekDays(formats strfmt.Registry) []string {
	repeatWeekDaysIR := o.RepeatWeekDays

	var repeatWeekDaysIC []string
	for _, repeatWeekDaysIIR := range repeatWeekDaysIR { // explode []int32

		repeatWeekDaysIIV := swag.FormatInt32(repeatWeekDaysIIR) // int32 as string
		repeatWeekDaysIC = append(repeatWeekDaysIC, repeatWeekDaysIIV)
	}

	// items.CollectionFormat: "multi"
	repeatWeekDaysIS := swag.JoinByFormat(repeatWeekDaysIC, "multi")

	return repeatWeekDaysIS
}
