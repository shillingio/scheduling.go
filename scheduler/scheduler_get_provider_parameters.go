// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetProviderParams creates a new SchedulerGetProviderParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetProviderParams() *SchedulerGetProviderParams {
	return &SchedulerGetProviderParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetProviderParamsWithTimeout creates a new SchedulerGetProviderParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetProviderParamsWithTimeout(timeout time.Duration) *SchedulerGetProviderParams {
	return &SchedulerGetProviderParams{
		timeout: timeout,
	}
}

// NewSchedulerGetProviderParamsWithContext creates a new SchedulerGetProviderParams object
// with the ability to set a context for a request.
func NewSchedulerGetProviderParamsWithContext(ctx context.Context) *SchedulerGetProviderParams {
	return &SchedulerGetProviderParams{
		Context: ctx,
	}
}

// NewSchedulerGetProviderParamsWithHTTPClient creates a new SchedulerGetProviderParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetProviderParamsWithHTTPClient(client *http.Client) *SchedulerGetProviderParams {
	return &SchedulerGetProviderParams{
		HTTPClient: client,
	}
}

/* SchedulerGetProviderParams contains all the parameters to send to the API endpoint
   for the scheduler get provider operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetProviderParams struct {

	// Active.
	Active *bool

	// CreatedAt.
	CreatedAt *string

	// CreatedBy.
	CreatedBy *string

	// Gender.
	Gender *string

	// GivenName.
	GivenName *string

	// ID.
	ID string

	// OrgID.
	OrgID *string

	// Prefix.
	Prefix *string

	// RefID.
	RefID *string

	// Role.
	Role *string

	// Suffix.
	Suffix *string

	// Surname.
	Surname *string

	// TimezoneAbbreviation.
	TimezoneAbbreviation *string

	// TimezoneDst.
	TimezoneDst *bool

	// TimezoneGmtOffset.
	//
	// Format: int32
	TimezoneGmtOffset *int32

	// TimezoneID.
	//
	// Format: int32
	TimezoneID *int32

	// TimezoneTimeStart.
	//
	// Format: int64
	TimezoneTimeStart *string

	// TimezoneZoneCountryCode.
	TimezoneZoneCountryCode *string

	// TimezoneZoneID.
	//
	// Format: int32
	TimezoneZoneID *int32

	// TimezoneZoneName.
	TimezoneZoneName *string

	// UpdatedAt.
	UpdatedAt *string

	// UpdatedBy.
	UpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get provider params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetProviderParams) WithDefaults() *SchedulerGetProviderParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get provider params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetProviderParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimeout(timeout time.Duration) *SchedulerGetProviderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithContext(ctx context.Context) *SchedulerGetProviderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithHTTPClient(client *http.Client) *SchedulerGetProviderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithActive(active *bool) *SchedulerGetProviderParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetActive(active *bool) {
	o.Active = active
}

// WithCreatedAt adds the createdAt to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithCreatedAt(createdAt *string) *SchedulerGetProviderParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedBy adds the createdBy to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithCreatedBy(createdBy *string) *SchedulerGetProviderParams {
	o.SetCreatedBy(createdBy)
	return o
}

// SetCreatedBy adds the createdBy to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetCreatedBy(createdBy *string) {
	o.CreatedBy = createdBy
}

// WithGender adds the gender to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithGender(gender *string) *SchedulerGetProviderParams {
	o.SetGender(gender)
	return o
}

// SetGender adds the gender to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetGender(gender *string) {
	o.Gender = gender
}

// WithGivenName adds the givenName to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithGivenName(givenName *string) *SchedulerGetProviderParams {
	o.SetGivenName(givenName)
	return o
}

// SetGivenName adds the givenName to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetGivenName(givenName *string) {
	o.GivenName = givenName
}

// WithID adds the id to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithID(id string) *SchedulerGetProviderParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetID(id string) {
	o.ID = id
}

// WithOrgID adds the orgID to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithOrgID(orgID *string) *SchedulerGetProviderParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetOrgID(orgID *string) {
	o.OrgID = orgID
}

// WithPrefix adds the prefix to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithPrefix(prefix *string) *SchedulerGetProviderParams {
	o.SetPrefix(prefix)
	return o
}

// SetPrefix adds the prefix to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetPrefix(prefix *string) {
	o.Prefix = prefix
}

// WithRefID adds the refID to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithRefID(refID *string) *SchedulerGetProviderParams {
	o.SetRefID(refID)
	return o
}

// SetRefID adds the refId to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetRefID(refID *string) {
	o.RefID = refID
}

// WithRole adds the role to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithRole(role *string) *SchedulerGetProviderParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetRole(role *string) {
	o.Role = role
}

// WithSuffix adds the suffix to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithSuffix(suffix *string) *SchedulerGetProviderParams {
	o.SetSuffix(suffix)
	return o
}

// SetSuffix adds the suffix to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetSuffix(suffix *string) {
	o.Suffix = suffix
}

// WithSurname adds the surname to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithSurname(surname *string) *SchedulerGetProviderParams {
	o.SetSurname(surname)
	return o
}

// SetSurname adds the surname to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetSurname(surname *string) {
	o.Surname = surname
}

// WithTimezoneAbbreviation adds the timezoneAbbreviation to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneAbbreviation(timezoneAbbreviation *string) *SchedulerGetProviderParams {
	o.SetTimezoneAbbreviation(timezoneAbbreviation)
	return o
}

// SetTimezoneAbbreviation adds the timezoneAbbreviation to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneAbbreviation(timezoneAbbreviation *string) {
	o.TimezoneAbbreviation = timezoneAbbreviation
}

// WithTimezoneDst adds the timezoneDst to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneDst(timezoneDst *bool) *SchedulerGetProviderParams {
	o.SetTimezoneDst(timezoneDst)
	return o
}

// SetTimezoneDst adds the timezoneDst to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneDst(timezoneDst *bool) {
	o.TimezoneDst = timezoneDst
}

// WithTimezoneGmtOffset adds the timezoneGmtOffset to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneGmtOffset(timezoneGmtOffset *int32) *SchedulerGetProviderParams {
	o.SetTimezoneGmtOffset(timezoneGmtOffset)
	return o
}

// SetTimezoneGmtOffset adds the timezoneGmtOffset to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneGmtOffset(timezoneGmtOffset *int32) {
	o.TimezoneGmtOffset = timezoneGmtOffset
}

// WithTimezoneID adds the timezoneID to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneID(timezoneID *int32) *SchedulerGetProviderParams {
	o.SetTimezoneID(timezoneID)
	return o
}

// SetTimezoneID adds the timezoneId to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneID(timezoneID *int32) {
	o.TimezoneID = timezoneID
}

// WithTimezoneTimeStart adds the timezoneTimeStart to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneTimeStart(timezoneTimeStart *string) *SchedulerGetProviderParams {
	o.SetTimezoneTimeStart(timezoneTimeStart)
	return o
}

// SetTimezoneTimeStart adds the timezoneTimeStart to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneTimeStart(timezoneTimeStart *string) {
	o.TimezoneTimeStart = timezoneTimeStart
}

// WithTimezoneZoneCountryCode adds the timezoneZoneCountryCode to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneZoneCountryCode(timezoneZoneCountryCode *string) *SchedulerGetProviderParams {
	o.SetTimezoneZoneCountryCode(timezoneZoneCountryCode)
	return o
}

// SetTimezoneZoneCountryCode adds the timezoneZoneCountryCode to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneZoneCountryCode(timezoneZoneCountryCode *string) {
	o.TimezoneZoneCountryCode = timezoneZoneCountryCode
}

// WithTimezoneZoneID adds the timezoneZoneID to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneZoneID(timezoneZoneID *int32) *SchedulerGetProviderParams {
	o.SetTimezoneZoneID(timezoneZoneID)
	return o
}

// SetTimezoneZoneID adds the timezoneZoneId to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneZoneID(timezoneZoneID *int32) {
	o.TimezoneZoneID = timezoneZoneID
}

// WithTimezoneZoneName adds the timezoneZoneName to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithTimezoneZoneName(timezoneZoneName *string) *SchedulerGetProviderParams {
	o.SetTimezoneZoneName(timezoneZoneName)
	return o
}

// SetTimezoneZoneName adds the timezoneZoneName to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetTimezoneZoneName(timezoneZoneName *string) {
	o.TimezoneZoneName = timezoneZoneName
}

// WithUpdatedAt adds the updatedAt to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithUpdatedAt(updatedAt *string) *SchedulerGetProviderParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedBy adds the updatedBy to the scheduler get provider params
func (o *SchedulerGetProviderParams) WithUpdatedBy(updatedBy *string) *SchedulerGetProviderParams {
	o.SetUpdatedBy(updatedBy)
	return o
}

// SetUpdatedBy adds the updatedBy to the scheduler get provider params
func (o *SchedulerGetProviderParams) SetUpdatedBy(updatedBy *string) {
	o.UpdatedBy = updatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetProviderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {

			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.CreatedBy != nil {

		// query param created_by
		var qrCreatedBy string

		if o.CreatedBy != nil {
			qrCreatedBy = *o.CreatedBy
		}
		qCreatedBy := qrCreatedBy
		if qCreatedBy != "" {

			if err := r.SetQueryParam("created_by", qCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.Gender != nil {

		// query param gender
		var qrGender string

		if o.Gender != nil {
			qrGender = *o.Gender
		}
		qGender := qrGender
		if qGender != "" {

			if err := r.SetQueryParam("gender", qGender); err != nil {
				return err
			}
		}
	}

	if o.GivenName != nil {

		// query param given_name
		var qrGivenName string

		if o.GivenName != nil {
			qrGivenName = *o.GivenName
		}
		qGivenName := qrGivenName
		if qGivenName != "" {

			if err := r.SetQueryParam("given_name", qGivenName); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.OrgID != nil {

		// query param org_id
		var qrOrgID string

		if o.OrgID != nil {
			qrOrgID = *o.OrgID
		}
		qOrgID := qrOrgID
		if qOrgID != "" {

			if err := r.SetQueryParam("org_id", qOrgID); err != nil {
				return err
			}
		}
	}

	if o.Prefix != nil {

		// query param prefix
		var qrPrefix string

		if o.Prefix != nil {
			qrPrefix = *o.Prefix
		}
		qPrefix := qrPrefix
		if qPrefix != "" {

			if err := r.SetQueryParam("prefix", qPrefix); err != nil {
				return err
			}
		}
	}

	if o.RefID != nil {

		// query param ref_id
		var qrRefID string

		if o.RefID != nil {
			qrRefID = *o.RefID
		}
		qRefID := qrRefID
		if qRefID != "" {

			if err := r.SetQueryParam("ref_id", qRefID); err != nil {
				return err
			}
		}
	}

	if o.Role != nil {

		// query param role
		var qrRole string

		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {

			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}
	}

	if o.Suffix != nil {

		// query param suffix
		var qrSuffix string

		if o.Suffix != nil {
			qrSuffix = *o.Suffix
		}
		qSuffix := qrSuffix
		if qSuffix != "" {

			if err := r.SetQueryParam("suffix", qSuffix); err != nil {
				return err
			}
		}
	}

	if o.Surname != nil {

		// query param surname
		var qrSurname string

		if o.Surname != nil {
			qrSurname = *o.Surname
		}
		qSurname := qrSurname
		if qSurname != "" {

			if err := r.SetQueryParam("surname", qSurname); err != nil {
				return err
			}
		}
	}

	if o.TimezoneAbbreviation != nil {

		// query param timezone.abbreviation
		var qrTimezoneAbbreviation string

		if o.TimezoneAbbreviation != nil {
			qrTimezoneAbbreviation = *o.TimezoneAbbreviation
		}
		qTimezoneAbbreviation := qrTimezoneAbbreviation
		if qTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("timezone.abbreviation", qTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.TimezoneDst != nil {

		// query param timezone.dst
		var qrTimezoneDst bool

		if o.TimezoneDst != nil {
			qrTimezoneDst = *o.TimezoneDst
		}
		qTimezoneDst := swag.FormatBool(qrTimezoneDst)
		if qTimezoneDst != "" {

			if err := r.SetQueryParam("timezone.dst", qTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.TimezoneGmtOffset != nil {

		// query param timezone.gmt_offset
		var qrTimezoneGmtOffset int32

		if o.TimezoneGmtOffset != nil {
			qrTimezoneGmtOffset = *o.TimezoneGmtOffset
		}
		qTimezoneGmtOffset := swag.FormatInt32(qrTimezoneGmtOffset)
		if qTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("timezone.gmt_offset", qTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.TimezoneID != nil {

		// query param timezone.id
		var qrTimezoneID int32

		if o.TimezoneID != nil {
			qrTimezoneID = *o.TimezoneID
		}
		qTimezoneID := swag.FormatInt32(qrTimezoneID)
		if qTimezoneID != "" {

			if err := r.SetQueryParam("timezone.id", qTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.TimezoneTimeStart != nil {

		// query param timezone.time_start
		var qrTimezoneTimeStart string

		if o.TimezoneTimeStart != nil {
			qrTimezoneTimeStart = *o.TimezoneTimeStart
		}
		qTimezoneTimeStart := qrTimezoneTimeStart
		if qTimezoneTimeStart != "" {

			if err := r.SetQueryParam("timezone.time_start", qTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.TimezoneZoneCountryCode != nil {

		// query param timezone.zone.country_code
		var qrTimezoneZoneCountryCode string

		if o.TimezoneZoneCountryCode != nil {
			qrTimezoneZoneCountryCode = *o.TimezoneZoneCountryCode
		}
		qTimezoneZoneCountryCode := qrTimezoneZoneCountryCode
		if qTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("timezone.zone.country_code", qTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.TimezoneZoneID != nil {

		// query param timezone.zone.id
		var qrTimezoneZoneID int32

		if o.TimezoneZoneID != nil {
			qrTimezoneZoneID = *o.TimezoneZoneID
		}
		qTimezoneZoneID := swag.FormatInt32(qrTimezoneZoneID)
		if qTimezoneZoneID != "" {

			if err := r.SetQueryParam("timezone.zone.id", qTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.TimezoneZoneName != nil {

		// query param timezone.zone.name
		var qrTimezoneZoneName string

		if o.TimezoneZoneName != nil {
			qrTimezoneZoneName = *o.TimezoneZoneName
		}
		qTimezoneZoneName := qrTimezoneZoneName
		if qTimezoneZoneName != "" {

			if err := r.SetQueryParam("timezone.zone.name", qTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.UpdatedBy != nil {

		// query param updated_by
		var qrUpdatedBy string

		if o.UpdatedBy != nil {
			qrUpdatedBy = *o.UpdatedBy
		}
		qUpdatedBy := qrUpdatedBy
		if qUpdatedBy != "" {

			if err := r.SetQueryParam("updated_by", qUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
