// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerRemoveProviderServiceParams creates a new SchedulerRemoveProviderServiceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerRemoveProviderServiceParams() *SchedulerRemoveProviderServiceParams {
	return &SchedulerRemoveProviderServiceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerRemoveProviderServiceParamsWithTimeout creates a new SchedulerRemoveProviderServiceParams object
// with the ability to set a timeout on a request.
func NewSchedulerRemoveProviderServiceParamsWithTimeout(timeout time.Duration) *SchedulerRemoveProviderServiceParams {
	return &SchedulerRemoveProviderServiceParams{
		timeout: timeout,
	}
}

// NewSchedulerRemoveProviderServiceParamsWithContext creates a new SchedulerRemoveProviderServiceParams object
// with the ability to set a context for a request.
func NewSchedulerRemoveProviderServiceParamsWithContext(ctx context.Context) *SchedulerRemoveProviderServiceParams {
	return &SchedulerRemoveProviderServiceParams{
		Context: ctx,
	}
}

// NewSchedulerRemoveProviderServiceParamsWithHTTPClient creates a new SchedulerRemoveProviderServiceParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerRemoveProviderServiceParamsWithHTTPClient(client *http.Client) *SchedulerRemoveProviderServiceParams {
	return &SchedulerRemoveProviderServiceParams{
		HTTPClient: client,
	}
}

/* SchedulerRemoveProviderServiceParams contains all the parameters to send to the API endpoint
   for the scheduler remove provider service operation.

   Typically these are written to a http.Request.
*/
type SchedulerRemoveProviderServiceParams struct {

	// Active.
	Active *bool

	// Country.
	Country *string

	// CreatedAt.
	CreatedAt *string

	// CreatedBy.
	CreatedBy *string

	// Durations.
	Durations []int32

	// ID.
	ID *string

	// InPerson.
	InPerson *bool

	// Languages.
	Languages []string

	// ProviderActive.
	ProviderActive *bool

	// ProviderCreatedAt.
	ProviderCreatedAt *string

	// ProviderCreatedBy.
	ProviderCreatedBy *string

	// ProviderGender.
	ProviderGender *string

	// ProviderGivenName.
	ProviderGivenName *string

	// ProviderID.
	ProviderID string

	// ProviderOrgID.
	ProviderOrgID *string

	// ProviderPrefix.
	ProviderPrefix *string

	// ProviderRefID.
	ProviderRefID *string

	// ProviderRole.
	ProviderRole *string

	// ProviderSuffix.
	ProviderSuffix *string

	// ProviderSurname.
	ProviderSurname *string

	// ProviderTimezoneAbbreviation.
	ProviderTimezoneAbbreviation *string

	// ProviderTimezoneDst.
	ProviderTimezoneDst *bool

	// ProviderTimezoneGmtOffset.
	//
	// Format: int32
	ProviderTimezoneGmtOffset *int32

	// ProviderTimezoneID.
	//
	// Format: int32
	ProviderTimezoneID *int32

	// ProviderTimezoneTimeStart.
	//
	// Format: int64
	ProviderTimezoneTimeStart *string

	// ProviderTimezoneZoneCountryCode.
	ProviderTimezoneZoneCountryCode *string

	// ProviderTimezoneZoneID.
	//
	// Format: int32
	ProviderTimezoneZoneID *int32

	// ProviderTimezoneZoneName.
	ProviderTimezoneZoneName *string

	// ProviderUpdatedAt.
	ProviderUpdatedAt *string

	// ProviderUpdatedBy.
	ProviderUpdatedBy *string

	// ServiceActive.
	ServiceActive *bool

	// ServiceConfigDurations.
	ServiceConfigDurations []int32

	// ServiceConfigFixedDuration.
	//
	// Format: int32
	ServiceConfigFixedDuration *int32

	// ServiceCreatedAt.
	ServiceCreatedAt *string

	// ServiceCreatedBy.
	ServiceCreatedBy *string

	// ServiceDescription.
	ServiceDescription *string

	// ServiceID.
	ServiceID string

	// ServiceName.
	ServiceName *string

	// ServiceOrgID.
	ServiceOrgID *string

	// ServiceRefID.
	ServiceRefID *string

	// ServiceUpdatedAt.
	ServiceUpdatedAt *string

	// ServiceUpdatedBy.
	ServiceUpdatedBy *string

	// States.
	States []string

	// Types.
	Types []string

	// UpdatedAt.
	UpdatedAt *string

	// UpdatedBy.
	UpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler remove provider service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerRemoveProviderServiceParams) WithDefaults() *SchedulerRemoveProviderServiceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler remove provider service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerRemoveProviderServiceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithTimeout(timeout time.Duration) *SchedulerRemoveProviderServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithContext(ctx context.Context) *SchedulerRemoveProviderServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithHTTPClient(client *http.Client) *SchedulerRemoveProviderServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithActive(active *bool) *SchedulerRemoveProviderServiceParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetActive(active *bool) {
	o.Active = active
}

// WithCountry adds the country to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithCountry(country *string) *SchedulerRemoveProviderServiceParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetCountry(country *string) {
	o.Country = country
}

// WithCreatedAt adds the createdAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithCreatedAt(createdAt *string) *SchedulerRemoveProviderServiceParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedBy adds the createdBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithCreatedBy(createdBy *string) *SchedulerRemoveProviderServiceParams {
	o.SetCreatedBy(createdBy)
	return o
}

// SetCreatedBy adds the createdBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetCreatedBy(createdBy *string) {
	o.CreatedBy = createdBy
}

// WithDurations adds the durations to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithDurations(durations []int32) *SchedulerRemoveProviderServiceParams {
	o.SetDurations(durations)
	return o
}

// SetDurations adds the durations to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetDurations(durations []int32) {
	o.Durations = durations
}

// WithID adds the id to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithID(id *string) *SchedulerRemoveProviderServiceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetID(id *string) {
	o.ID = id
}

// WithInPerson adds the inPerson to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithInPerson(inPerson *bool) *SchedulerRemoveProviderServiceParams {
	o.SetInPerson(inPerson)
	return o
}

// SetInPerson adds the inPerson to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetInPerson(inPerson *bool) {
	o.InPerson = inPerson
}

// WithLanguages adds the languages to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithLanguages(languages []string) *SchedulerRemoveProviderServiceParams {
	o.SetLanguages(languages)
	return o
}

// SetLanguages adds the languages to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetLanguages(languages []string) {
	o.Languages = languages
}

// WithProviderActive adds the providerActive to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderActive(providerActive *bool) *SchedulerRemoveProviderServiceParams {
	o.SetProviderActive(providerActive)
	return o
}

// SetProviderActive adds the providerActive to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderActive(providerActive *bool) {
	o.ProviderActive = providerActive
}

// WithProviderCreatedAt adds the providerCreatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderCreatedAt(providerCreatedAt *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderCreatedAt(providerCreatedAt)
	return o
}

// SetProviderCreatedAt adds the providerCreatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderCreatedAt(providerCreatedAt *string) {
	o.ProviderCreatedAt = providerCreatedAt
}

// WithProviderCreatedBy adds the providerCreatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderCreatedBy(providerCreatedBy *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderCreatedBy(providerCreatedBy)
	return o
}

// SetProviderCreatedBy adds the providerCreatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderCreatedBy(providerCreatedBy *string) {
	o.ProviderCreatedBy = providerCreatedBy
}

// WithProviderGender adds the providerGender to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderGender(providerGender *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderGender(providerGender)
	return o
}

// SetProviderGender adds the providerGender to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderGender(providerGender *string) {
	o.ProviderGender = providerGender
}

// WithProviderGivenName adds the providerGivenName to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderGivenName(providerGivenName *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderGivenName(providerGivenName)
	return o
}

// SetProviderGivenName adds the providerGivenName to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderGivenName(providerGivenName *string) {
	o.ProviderGivenName = providerGivenName
}

// WithProviderID adds the providerID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderID(providerID string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderID(providerID string) {
	o.ProviderID = providerID
}

// WithProviderOrgID adds the providerOrgID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderOrgID(providerOrgID *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderOrgID(providerOrgID)
	return o
}

// SetProviderOrgID adds the providerOrgId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderOrgID(providerOrgID *string) {
	o.ProviderOrgID = providerOrgID
}

// WithProviderPrefix adds the providerPrefix to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderPrefix(providerPrefix *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderPrefix(providerPrefix)
	return o
}

// SetProviderPrefix adds the providerPrefix to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderPrefix(providerPrefix *string) {
	o.ProviderPrefix = providerPrefix
}

// WithProviderRefID adds the providerRefID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderRefID(providerRefID *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderRefID(providerRefID)
	return o
}

// SetProviderRefID adds the providerRefId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderRefID(providerRefID *string) {
	o.ProviderRefID = providerRefID
}

// WithProviderRole adds the providerRole to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderRole(providerRole *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderRole(providerRole)
	return o
}

// SetProviderRole adds the providerRole to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderRole(providerRole *string) {
	o.ProviderRole = providerRole
}

// WithProviderSuffix adds the providerSuffix to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderSuffix(providerSuffix *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderSuffix(providerSuffix)
	return o
}

// SetProviderSuffix adds the providerSuffix to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderSuffix(providerSuffix *string) {
	o.ProviderSuffix = providerSuffix
}

// WithProviderSurname adds the providerSurname to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderSurname(providerSurname *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderSurname(providerSurname)
	return o
}

// SetProviderSurname adds the providerSurname to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderSurname(providerSurname *string) {
	o.ProviderSurname = providerSurname
}

// WithProviderTimezoneAbbreviation adds the providerTimezoneAbbreviation to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneAbbreviation(providerTimezoneAbbreviation *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneAbbreviation(providerTimezoneAbbreviation)
	return o
}

// SetProviderTimezoneAbbreviation adds the providerTimezoneAbbreviation to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneAbbreviation(providerTimezoneAbbreviation *string) {
	o.ProviderTimezoneAbbreviation = providerTimezoneAbbreviation
}

// WithProviderTimezoneDst adds the providerTimezoneDst to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneDst(providerTimezoneDst *bool) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneDst(providerTimezoneDst)
	return o
}

// SetProviderTimezoneDst adds the providerTimezoneDst to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneDst(providerTimezoneDst *bool) {
	o.ProviderTimezoneDst = providerTimezoneDst
}

// WithProviderTimezoneGmtOffset adds the providerTimezoneGmtOffset to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneGmtOffset(providerTimezoneGmtOffset *int32) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneGmtOffset(providerTimezoneGmtOffset)
	return o
}

// SetProviderTimezoneGmtOffset adds the providerTimezoneGmtOffset to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneGmtOffset(providerTimezoneGmtOffset *int32) {
	o.ProviderTimezoneGmtOffset = providerTimezoneGmtOffset
}

// WithProviderTimezoneID adds the providerTimezoneID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneID(providerTimezoneID *int32) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneID(providerTimezoneID)
	return o
}

// SetProviderTimezoneID adds the providerTimezoneId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneID(providerTimezoneID *int32) {
	o.ProviderTimezoneID = providerTimezoneID
}

// WithProviderTimezoneTimeStart adds the providerTimezoneTimeStart to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneTimeStart(providerTimezoneTimeStart *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneTimeStart(providerTimezoneTimeStart)
	return o
}

// SetProviderTimezoneTimeStart adds the providerTimezoneTimeStart to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneTimeStart(providerTimezoneTimeStart *string) {
	o.ProviderTimezoneTimeStart = providerTimezoneTimeStart
}

// WithProviderTimezoneZoneCountryCode adds the providerTimezoneZoneCountryCode to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode)
	return o
}

// SetProviderTimezoneZoneCountryCode adds the providerTimezoneZoneCountryCode to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode *string) {
	o.ProviderTimezoneZoneCountryCode = providerTimezoneZoneCountryCode
}

// WithProviderTimezoneZoneID adds the providerTimezoneZoneID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneZoneID(providerTimezoneZoneID *int32) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneZoneID(providerTimezoneZoneID)
	return o
}

// SetProviderTimezoneZoneID adds the providerTimezoneZoneId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneZoneID(providerTimezoneZoneID *int32) {
	o.ProviderTimezoneZoneID = providerTimezoneZoneID
}

// WithProviderTimezoneZoneName adds the providerTimezoneZoneName to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderTimezoneZoneName(providerTimezoneZoneName *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderTimezoneZoneName(providerTimezoneZoneName)
	return o
}

// SetProviderTimezoneZoneName adds the providerTimezoneZoneName to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderTimezoneZoneName(providerTimezoneZoneName *string) {
	o.ProviderTimezoneZoneName = providerTimezoneZoneName
}

// WithProviderUpdatedAt adds the providerUpdatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderUpdatedAt(providerUpdatedAt *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderUpdatedAt(providerUpdatedAt)
	return o
}

// SetProviderUpdatedAt adds the providerUpdatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderUpdatedAt(providerUpdatedAt *string) {
	o.ProviderUpdatedAt = providerUpdatedAt
}

// WithProviderUpdatedBy adds the providerUpdatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithProviderUpdatedBy(providerUpdatedBy *string) *SchedulerRemoveProviderServiceParams {
	o.SetProviderUpdatedBy(providerUpdatedBy)
	return o
}

// SetProviderUpdatedBy adds the providerUpdatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetProviderUpdatedBy(providerUpdatedBy *string) {
	o.ProviderUpdatedBy = providerUpdatedBy
}

// WithServiceActive adds the serviceActive to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceActive(serviceActive *bool) *SchedulerRemoveProviderServiceParams {
	o.SetServiceActive(serviceActive)
	return o
}

// SetServiceActive adds the serviceActive to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceActive(serviceActive *bool) {
	o.ServiceActive = serviceActive
}

// WithServiceConfigDurations adds the serviceConfigDurations to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceConfigDurations(serviceConfigDurations []int32) *SchedulerRemoveProviderServiceParams {
	o.SetServiceConfigDurations(serviceConfigDurations)
	return o
}

// SetServiceConfigDurations adds the serviceConfigDurations to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceConfigDurations(serviceConfigDurations []int32) {
	o.ServiceConfigDurations = serviceConfigDurations
}

// WithServiceConfigFixedDuration adds the serviceConfigFixedDuration to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceConfigFixedDuration(serviceConfigFixedDuration *int32) *SchedulerRemoveProviderServiceParams {
	o.SetServiceConfigFixedDuration(serviceConfigFixedDuration)
	return o
}

// SetServiceConfigFixedDuration adds the serviceConfigFixedDuration to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceConfigFixedDuration(serviceConfigFixedDuration *int32) {
	o.ServiceConfigFixedDuration = serviceConfigFixedDuration
}

// WithServiceCreatedAt adds the serviceCreatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceCreatedAt(serviceCreatedAt *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceCreatedAt(serviceCreatedAt)
	return o
}

// SetServiceCreatedAt adds the serviceCreatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceCreatedAt(serviceCreatedAt *string) {
	o.ServiceCreatedAt = serviceCreatedAt
}

// WithServiceCreatedBy adds the serviceCreatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceCreatedBy(serviceCreatedBy *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceCreatedBy(serviceCreatedBy)
	return o
}

// SetServiceCreatedBy adds the serviceCreatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceCreatedBy(serviceCreatedBy *string) {
	o.ServiceCreatedBy = serviceCreatedBy
}

// WithServiceDescription adds the serviceDescription to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceDescription(serviceDescription *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceDescription(serviceDescription)
	return o
}

// SetServiceDescription adds the serviceDescription to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceDescription(serviceDescription *string) {
	o.ServiceDescription = serviceDescription
}

// WithServiceID adds the serviceID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceID(serviceID string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceID(serviceID)
	return o
}

// SetServiceID adds the serviceId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceID(serviceID string) {
	o.ServiceID = serviceID
}

// WithServiceName adds the serviceName to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceName(serviceName *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithServiceOrgID adds the serviceOrgID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceOrgID(serviceOrgID *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceOrgID(serviceOrgID)
	return o
}

// SetServiceOrgID adds the serviceOrgId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceOrgID(serviceOrgID *string) {
	o.ServiceOrgID = serviceOrgID
}

// WithServiceRefID adds the serviceRefID to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceRefID(serviceRefID *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceRefID(serviceRefID)
	return o
}

// SetServiceRefID adds the serviceRefId to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceRefID(serviceRefID *string) {
	o.ServiceRefID = serviceRefID
}

// WithServiceUpdatedAt adds the serviceUpdatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceUpdatedAt(serviceUpdatedAt *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceUpdatedAt(serviceUpdatedAt)
	return o
}

// SetServiceUpdatedAt adds the serviceUpdatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceUpdatedAt(serviceUpdatedAt *string) {
	o.ServiceUpdatedAt = serviceUpdatedAt
}

// WithServiceUpdatedBy adds the serviceUpdatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithServiceUpdatedBy(serviceUpdatedBy *string) *SchedulerRemoveProviderServiceParams {
	o.SetServiceUpdatedBy(serviceUpdatedBy)
	return o
}

// SetServiceUpdatedBy adds the serviceUpdatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetServiceUpdatedBy(serviceUpdatedBy *string) {
	o.ServiceUpdatedBy = serviceUpdatedBy
}

// WithStates adds the states to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithStates(states []string) *SchedulerRemoveProviderServiceParams {
	o.SetStates(states)
	return o
}

// SetStates adds the states to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetStates(states []string) {
	o.States = states
}

// WithTypes adds the types to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithTypes(types []string) *SchedulerRemoveProviderServiceParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetTypes(types []string) {
	o.Types = types
}

// WithUpdatedAt adds the updatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithUpdatedAt(updatedAt *string) *SchedulerRemoveProviderServiceParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedBy adds the updatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) WithUpdatedBy(updatedBy *string) *SchedulerRemoveProviderServiceParams {
	o.SetUpdatedBy(updatedBy)
	return o
}

// SetUpdatedBy adds the updatedBy to the scheduler remove provider service params
func (o *SchedulerRemoveProviderServiceParams) SetUpdatedBy(updatedBy *string) {
	o.UpdatedBy = updatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerRemoveProviderServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool

		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {

			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}
	}

	if o.Country != nil {

		// query param country
		var qrCountry string

		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {

			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {

			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.CreatedBy != nil {

		// query param created_by
		var qrCreatedBy string

		if o.CreatedBy != nil {
			qrCreatedBy = *o.CreatedBy
		}
		qCreatedBy := qrCreatedBy
		if qCreatedBy != "" {

			if err := r.SetQueryParam("created_by", qCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.Durations != nil {

		// binding items for durations
		joinedDurations := o.bindParamDurations(reg)

		// query array param durations
		if err := r.SetQueryParam("durations", joinedDurations...); err != nil {
			return err
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.InPerson != nil {

		// query param in_person
		var qrInPerson bool

		if o.InPerson != nil {
			qrInPerson = *o.InPerson
		}
		qInPerson := swag.FormatBool(qrInPerson)
		if qInPerson != "" {

			if err := r.SetQueryParam("in_person", qInPerson); err != nil {
				return err
			}
		}
	}

	if o.Languages != nil {

		// binding items for languages
		joinedLanguages := o.bindParamLanguages(reg)

		// query array param languages
		if err := r.SetQueryParam("languages", joinedLanguages...); err != nil {
			return err
		}
	}

	if o.ProviderActive != nil {

		// query param provider.active
		var qrProviderActive bool

		if o.ProviderActive != nil {
			qrProviderActive = *o.ProviderActive
		}
		qProviderActive := swag.FormatBool(qrProviderActive)
		if qProviderActive != "" {

			if err := r.SetQueryParam("provider.active", qProviderActive); err != nil {
				return err
			}
		}
	}

	if o.ProviderCreatedAt != nil {

		// query param provider.created_at
		var qrProviderCreatedAt string

		if o.ProviderCreatedAt != nil {
			qrProviderCreatedAt = *o.ProviderCreatedAt
		}
		qProviderCreatedAt := qrProviderCreatedAt
		if qProviderCreatedAt != "" {

			if err := r.SetQueryParam("provider.created_at", qProviderCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ProviderCreatedBy != nil {

		// query param provider.created_by
		var qrProviderCreatedBy string

		if o.ProviderCreatedBy != nil {
			qrProviderCreatedBy = *o.ProviderCreatedBy
		}
		qProviderCreatedBy := qrProviderCreatedBy
		if qProviderCreatedBy != "" {

			if err := r.SetQueryParam("provider.created_by", qProviderCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ProviderGender != nil {

		// query param provider.gender
		var qrProviderGender string

		if o.ProviderGender != nil {
			qrProviderGender = *o.ProviderGender
		}
		qProviderGender := qrProviderGender
		if qProviderGender != "" {

			if err := r.SetQueryParam("provider.gender", qProviderGender); err != nil {
				return err
			}
		}
	}

	if o.ProviderGivenName != nil {

		// query param provider.given_name
		var qrProviderGivenName string

		if o.ProviderGivenName != nil {
			qrProviderGivenName = *o.ProviderGivenName
		}
		qProviderGivenName := qrProviderGivenName
		if qProviderGivenName != "" {

			if err := r.SetQueryParam("provider.given_name", qProviderGivenName); err != nil {
				return err
			}
		}
	}

	// path param provider.id
	if err := r.SetPathParam("provider.id", o.ProviderID); err != nil {
		return err
	}

	if o.ProviderOrgID != nil {

		// query param provider.org_id
		var qrProviderOrgID string

		if o.ProviderOrgID != nil {
			qrProviderOrgID = *o.ProviderOrgID
		}
		qProviderOrgID := qrProviderOrgID
		if qProviderOrgID != "" {

			if err := r.SetQueryParam("provider.org_id", qProviderOrgID); err != nil {
				return err
			}
		}
	}

	if o.ProviderPrefix != nil {

		// query param provider.prefix
		var qrProviderPrefix string

		if o.ProviderPrefix != nil {
			qrProviderPrefix = *o.ProviderPrefix
		}
		qProviderPrefix := qrProviderPrefix
		if qProviderPrefix != "" {

			if err := r.SetQueryParam("provider.prefix", qProviderPrefix); err != nil {
				return err
			}
		}
	}

	if o.ProviderRefID != nil {

		// query param provider.ref_id
		var qrProviderRefID string

		if o.ProviderRefID != nil {
			qrProviderRefID = *o.ProviderRefID
		}
		qProviderRefID := qrProviderRefID
		if qProviderRefID != "" {

			if err := r.SetQueryParam("provider.ref_id", qProviderRefID); err != nil {
				return err
			}
		}
	}

	if o.ProviderRole != nil {

		// query param provider.role
		var qrProviderRole string

		if o.ProviderRole != nil {
			qrProviderRole = *o.ProviderRole
		}
		qProviderRole := qrProviderRole
		if qProviderRole != "" {

			if err := r.SetQueryParam("provider.role", qProviderRole); err != nil {
				return err
			}
		}
	}

	if o.ProviderSuffix != nil {

		// query param provider.suffix
		var qrProviderSuffix string

		if o.ProviderSuffix != nil {
			qrProviderSuffix = *o.ProviderSuffix
		}
		qProviderSuffix := qrProviderSuffix
		if qProviderSuffix != "" {

			if err := r.SetQueryParam("provider.suffix", qProviderSuffix); err != nil {
				return err
			}
		}
	}

	if o.ProviderSurname != nil {

		// query param provider.surname
		var qrProviderSurname string

		if o.ProviderSurname != nil {
			qrProviderSurname = *o.ProviderSurname
		}
		qProviderSurname := qrProviderSurname
		if qProviderSurname != "" {

			if err := r.SetQueryParam("provider.surname", qProviderSurname); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneAbbreviation != nil {

		// query param provider.timezone.abbreviation
		var qrProviderTimezoneAbbreviation string

		if o.ProviderTimezoneAbbreviation != nil {
			qrProviderTimezoneAbbreviation = *o.ProviderTimezoneAbbreviation
		}
		qProviderTimezoneAbbreviation := qrProviderTimezoneAbbreviation
		if qProviderTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("provider.timezone.abbreviation", qProviderTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneDst != nil {

		// query param provider.timezone.dst
		var qrProviderTimezoneDst bool

		if o.ProviderTimezoneDst != nil {
			qrProviderTimezoneDst = *o.ProviderTimezoneDst
		}
		qProviderTimezoneDst := swag.FormatBool(qrProviderTimezoneDst)
		if qProviderTimezoneDst != "" {

			if err := r.SetQueryParam("provider.timezone.dst", qProviderTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneGmtOffset != nil {

		// query param provider.timezone.gmt_offset
		var qrProviderTimezoneGmtOffset int32

		if o.ProviderTimezoneGmtOffset != nil {
			qrProviderTimezoneGmtOffset = *o.ProviderTimezoneGmtOffset
		}
		qProviderTimezoneGmtOffset := swag.FormatInt32(qrProviderTimezoneGmtOffset)
		if qProviderTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("provider.timezone.gmt_offset", qProviderTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneID != nil {

		// query param provider.timezone.id
		var qrProviderTimezoneID int32

		if o.ProviderTimezoneID != nil {
			qrProviderTimezoneID = *o.ProviderTimezoneID
		}
		qProviderTimezoneID := swag.FormatInt32(qrProviderTimezoneID)
		if qProviderTimezoneID != "" {

			if err := r.SetQueryParam("provider.timezone.id", qProviderTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneTimeStart != nil {

		// query param provider.timezone.time_start
		var qrProviderTimezoneTimeStart string

		if o.ProviderTimezoneTimeStart != nil {
			qrProviderTimezoneTimeStart = *o.ProviderTimezoneTimeStart
		}
		qProviderTimezoneTimeStart := qrProviderTimezoneTimeStart
		if qProviderTimezoneTimeStart != "" {

			if err := r.SetQueryParam("provider.timezone.time_start", qProviderTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneCountryCode != nil {

		// query param provider.timezone.zone.country_code
		var qrProviderTimezoneZoneCountryCode string

		if o.ProviderTimezoneZoneCountryCode != nil {
			qrProviderTimezoneZoneCountryCode = *o.ProviderTimezoneZoneCountryCode
		}
		qProviderTimezoneZoneCountryCode := qrProviderTimezoneZoneCountryCode
		if qProviderTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("provider.timezone.zone.country_code", qProviderTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneID != nil {

		// query param provider.timezone.zone.id
		var qrProviderTimezoneZoneID int32

		if o.ProviderTimezoneZoneID != nil {
			qrProviderTimezoneZoneID = *o.ProviderTimezoneZoneID
		}
		qProviderTimezoneZoneID := swag.FormatInt32(qrProviderTimezoneZoneID)
		if qProviderTimezoneZoneID != "" {

			if err := r.SetQueryParam("provider.timezone.zone.id", qProviderTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneName != nil {

		// query param provider.timezone.zone.name
		var qrProviderTimezoneZoneName string

		if o.ProviderTimezoneZoneName != nil {
			qrProviderTimezoneZoneName = *o.ProviderTimezoneZoneName
		}
		qProviderTimezoneZoneName := qrProviderTimezoneZoneName
		if qProviderTimezoneZoneName != "" {

			if err := r.SetQueryParam("provider.timezone.zone.name", qProviderTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.ProviderUpdatedAt != nil {

		// query param provider.updated_at
		var qrProviderUpdatedAt string

		if o.ProviderUpdatedAt != nil {
			qrProviderUpdatedAt = *o.ProviderUpdatedAt
		}
		qProviderUpdatedAt := qrProviderUpdatedAt
		if qProviderUpdatedAt != "" {

			if err := r.SetQueryParam("provider.updated_at", qProviderUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ProviderUpdatedBy != nil {

		// query param provider.updated_by
		var qrProviderUpdatedBy string

		if o.ProviderUpdatedBy != nil {
			qrProviderUpdatedBy = *o.ProviderUpdatedBy
		}
		qProviderUpdatedBy := qrProviderUpdatedBy
		if qProviderUpdatedBy != "" {

			if err := r.SetQueryParam("provider.updated_by", qProviderUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceActive != nil {

		// query param service.active
		var qrServiceActive bool

		if o.ServiceActive != nil {
			qrServiceActive = *o.ServiceActive
		}
		qServiceActive := swag.FormatBool(qrServiceActive)
		if qServiceActive != "" {

			if err := r.SetQueryParam("service.active", qServiceActive); err != nil {
				return err
			}
		}
	}

	if o.ServiceConfigDurations != nil {

		// binding items for service.config.durations
		joinedServiceConfigDurations := o.bindParamServiceConfigDurations(reg)

		// query array param service.config.durations
		if err := r.SetQueryParam("service.config.durations", joinedServiceConfigDurations...); err != nil {
			return err
		}
	}

	if o.ServiceConfigFixedDuration != nil {

		// query param service.config.fixed_duration
		var qrServiceConfigFixedDuration int32

		if o.ServiceConfigFixedDuration != nil {
			qrServiceConfigFixedDuration = *o.ServiceConfigFixedDuration
		}
		qServiceConfigFixedDuration := swag.FormatInt32(qrServiceConfigFixedDuration)
		if qServiceConfigFixedDuration != "" {

			if err := r.SetQueryParam("service.config.fixed_duration", qServiceConfigFixedDuration); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedAt != nil {

		// query param service.created_at
		var qrServiceCreatedAt string

		if o.ServiceCreatedAt != nil {
			qrServiceCreatedAt = *o.ServiceCreatedAt
		}
		qServiceCreatedAt := qrServiceCreatedAt
		if qServiceCreatedAt != "" {

			if err := r.SetQueryParam("service.created_at", qServiceCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedBy != nil {

		// query param service.created_by
		var qrServiceCreatedBy string

		if o.ServiceCreatedBy != nil {
			qrServiceCreatedBy = *o.ServiceCreatedBy
		}
		qServiceCreatedBy := qrServiceCreatedBy
		if qServiceCreatedBy != "" {

			if err := r.SetQueryParam("service.created_by", qServiceCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceDescription != nil {

		// query param service.description
		var qrServiceDescription string

		if o.ServiceDescription != nil {
			qrServiceDescription = *o.ServiceDescription
		}
		qServiceDescription := qrServiceDescription
		if qServiceDescription != "" {

			if err := r.SetQueryParam("service.description", qServiceDescription); err != nil {
				return err
			}
		}
	}

	// path param service.id
	if err := r.SetPathParam("service.id", o.ServiceID); err != nil {
		return err
	}

	if o.ServiceName != nil {

		// query param service.name
		var qrServiceName string

		if o.ServiceName != nil {
			qrServiceName = *o.ServiceName
		}
		qServiceName := qrServiceName
		if qServiceName != "" {

			if err := r.SetQueryParam("service.name", qServiceName); err != nil {
				return err
			}
		}
	}

	if o.ServiceOrgID != nil {

		// query param service.org_id
		var qrServiceOrgID string

		if o.ServiceOrgID != nil {
			qrServiceOrgID = *o.ServiceOrgID
		}
		qServiceOrgID := qrServiceOrgID
		if qServiceOrgID != "" {

			if err := r.SetQueryParam("service.org_id", qServiceOrgID); err != nil {
				return err
			}
		}
	}

	if o.ServiceRefID != nil {

		// query param service.ref_id
		var qrServiceRefID string

		if o.ServiceRefID != nil {
			qrServiceRefID = *o.ServiceRefID
		}
		qServiceRefID := qrServiceRefID
		if qServiceRefID != "" {

			if err := r.SetQueryParam("service.ref_id", qServiceRefID); err != nil {
				return err
			}
		}
	}

	if o.ServiceUpdatedAt != nil {

		// query param service.updated_at
		var qrServiceUpdatedAt string

		if o.ServiceUpdatedAt != nil {
			qrServiceUpdatedAt = *o.ServiceUpdatedAt
		}
		qServiceUpdatedAt := qrServiceUpdatedAt
		if qServiceUpdatedAt != "" {

			if err := r.SetQueryParam("service.updated_at", qServiceUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceUpdatedBy != nil {

		// query param service.updated_by
		var qrServiceUpdatedBy string

		if o.ServiceUpdatedBy != nil {
			qrServiceUpdatedBy = *o.ServiceUpdatedBy
		}
		qServiceUpdatedBy := qrServiceUpdatedBy
		if qServiceUpdatedBy != "" {

			if err := r.SetQueryParam("service.updated_by", qServiceUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.States != nil {

		// binding items for states
		joinedStates := o.bindParamStates(reg)

		// query array param states
		if err := r.SetQueryParam("states", joinedStates...); err != nil {
			return err
		}
	}

	if o.Types != nil {

		// binding items for types
		joinedTypes := o.bindParamTypes(reg)

		// query array param types
		if err := r.SetQueryParam("types", joinedTypes...); err != nil {
			return err
		}
	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.UpdatedBy != nil {

		// query param updated_by
		var qrUpdatedBy string

		if o.UpdatedBy != nil {
			qrUpdatedBy = *o.UpdatedBy
		}
		qUpdatedBy := qrUpdatedBy
		if qUpdatedBy != "" {

			if err := r.SetQueryParam("updated_by", qUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerRemoveProviderService binds the parameter durations
func (o *SchedulerRemoveProviderServiceParams) bindParamDurations(formats strfmt.Registry) []string {
	durationsIR := o.Durations

	var durationsIC []string
	for _, durationsIIR := range durationsIR { // explode []int32

		durationsIIV := swag.FormatInt32(durationsIIR) // int32 as string
		durationsIC = append(durationsIC, durationsIIV)
	}

	// items.CollectionFormat: "multi"
	durationsIS := swag.JoinByFormat(durationsIC, "multi")

	return durationsIS
}

// bindParamSchedulerRemoveProviderService binds the parameter languages
func (o *SchedulerRemoveProviderServiceParams) bindParamLanguages(formats strfmt.Registry) []string {
	languagesIR := o.Languages

	var languagesIC []string
	for _, languagesIIR := range languagesIR { // explode []string

		languagesIIV := languagesIIR // string as string
		languagesIC = append(languagesIC, languagesIIV)
	}

	// items.CollectionFormat: "multi"
	languagesIS := swag.JoinByFormat(languagesIC, "multi")

	return languagesIS
}

// bindParamSchedulerRemoveProviderService binds the parameter service.config.durations
func (o *SchedulerRemoveProviderServiceParams) bindParamServiceConfigDurations(formats strfmt.Registry) []string {
	serviceConfigDurationsIR := o.ServiceConfigDurations

	var serviceConfigDurationsIC []string
	for _, serviceConfigDurationsIIR := range serviceConfigDurationsIR { // explode []int32

		serviceConfigDurationsIIV := swag.FormatInt32(serviceConfigDurationsIIR) // int32 as string
		serviceConfigDurationsIC = append(serviceConfigDurationsIC, serviceConfigDurationsIIV)
	}

	// items.CollectionFormat: "multi"
	serviceConfigDurationsIS := swag.JoinByFormat(serviceConfigDurationsIC, "multi")

	return serviceConfigDurationsIS
}

// bindParamSchedulerRemoveProviderService binds the parameter states
func (o *SchedulerRemoveProviderServiceParams) bindParamStates(formats strfmt.Registry) []string {
	statesIR := o.States

	var statesIC []string
	for _, statesIIR := range statesIR { // explode []string

		statesIIV := statesIIR // string as string
		statesIC = append(statesIC, statesIIV)
	}

	// items.CollectionFormat: "multi"
	statesIS := swag.JoinByFormat(statesIC, "multi")

	return statesIS
}

// bindParamSchedulerRemoveProviderService binds the parameter types
func (o *SchedulerRemoveProviderServiceParams) bindParamTypes(formats strfmt.Registry) []string {
	typesIR := o.Types

	var typesIC []string
	for _, typesIIR := range typesIR { // explode []string

		typesIIV := typesIIR // string as string
		typesIC = append(typesIC, typesIIV)
	}

	// items.CollectionFormat: "multi"
	typesIS := swag.JoinByFormat(typesIC, "multi")

	return typesIS
}
