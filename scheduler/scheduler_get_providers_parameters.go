// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetProvidersParams creates a new SchedulerGetProvidersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetProvidersParams() *SchedulerGetProvidersParams {
	return &SchedulerGetProvidersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetProvidersParamsWithTimeout creates a new SchedulerGetProvidersParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetProvidersParamsWithTimeout(timeout time.Duration) *SchedulerGetProvidersParams {
	return &SchedulerGetProvidersParams{
		timeout: timeout,
	}
}

// NewSchedulerGetProvidersParamsWithContext creates a new SchedulerGetProvidersParams object
// with the ability to set a context for a request.
func NewSchedulerGetProvidersParamsWithContext(ctx context.Context) *SchedulerGetProvidersParams {
	return &SchedulerGetProvidersParams{
		Context: ctx,
	}
}

// NewSchedulerGetProvidersParamsWithHTTPClient creates a new SchedulerGetProvidersParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetProvidersParamsWithHTTPClient(client *http.Client) *SchedulerGetProvidersParams {
	return &SchedulerGetProvidersParams{
		HTTPClient: client,
	}
}

/* SchedulerGetProvidersParams contains all the parameters to send to the API endpoint
   for the scheduler get providers operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetProvidersParams struct {

	// ID.
	ID *string

	// Ids.
	Ids []int32

	// Limit.
	//
	// Format: int32
	Limit *int32

	// Offset.
	//
	// Format: int32
	Offset *int32

	// OrganizationID.
	OrganizationID *string

	// ProviderActive.
	ProviderActive *bool

	// ProviderCreatedAt.
	ProviderCreatedAt *string

	// ProviderCreatedBy.
	ProviderCreatedBy *string

	// ProviderGender.
	ProviderGender *string

	// ProviderGivenName.
	ProviderGivenName *string

	// ProviderID.
	ProviderID *string

	// ProviderOrgID.
	ProviderOrgID *string

	// ProviderPrefix.
	ProviderPrefix *string

	// ProviderRefID.
	ProviderRefID *string

	// ProviderRole.
	ProviderRole *string

	// ProviderSuffix.
	ProviderSuffix *string

	// ProviderSurname.
	ProviderSurname *string

	// ProviderTimezoneAbbreviation.
	ProviderTimezoneAbbreviation *string

	// ProviderTimezoneDst.
	ProviderTimezoneDst *bool

	// ProviderTimezoneGmtOffset.
	//
	// Format: int32
	ProviderTimezoneGmtOffset *int32

	// ProviderTimezoneID.
	//
	// Format: int32
	ProviderTimezoneID *int32

	// ProviderTimezoneTimeStart.
	//
	// Format: int64
	ProviderTimezoneTimeStart *string

	// ProviderTimezoneZoneCountryCode.
	ProviderTimezoneZoneCountryCode *string

	// ProviderTimezoneZoneID.
	//
	// Format: int32
	ProviderTimezoneZoneID *int32

	// ProviderTimezoneZoneName.
	ProviderTimezoneZoneName *string

	// ProviderUpdatedAt.
	ProviderUpdatedAt *string

	// ProviderUpdatedBy.
	ProviderUpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get providers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetProvidersParams) WithDefaults() *SchedulerGetProvidersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get providers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetProvidersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithTimeout(timeout time.Duration) *SchedulerGetProvidersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithContext(ctx context.Context) *SchedulerGetProvidersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithHTTPClient(client *http.Client) *SchedulerGetProvidersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithID(id *string) *SchedulerGetProvidersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetID(id *string) {
	o.ID = id
}

// WithIds adds the ids to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithIds(ids []int32) *SchedulerGetProvidersParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetIds(ids []int32) {
	o.Ids = ids
}

// WithLimit adds the limit to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithLimit(limit *int32) *SchedulerGetProvidersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithOffset(offset *int32) *SchedulerGetProvidersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithOrganizationID(organizationID *string) *SchedulerGetProvidersParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithProviderActive adds the providerActive to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderActive(providerActive *bool) *SchedulerGetProvidersParams {
	o.SetProviderActive(providerActive)
	return o
}

// SetProviderActive adds the providerActive to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderActive(providerActive *bool) {
	o.ProviderActive = providerActive
}

// WithProviderCreatedAt adds the providerCreatedAt to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderCreatedAt(providerCreatedAt *string) *SchedulerGetProvidersParams {
	o.SetProviderCreatedAt(providerCreatedAt)
	return o
}

// SetProviderCreatedAt adds the providerCreatedAt to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderCreatedAt(providerCreatedAt *string) {
	o.ProviderCreatedAt = providerCreatedAt
}

// WithProviderCreatedBy adds the providerCreatedBy to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderCreatedBy(providerCreatedBy *string) *SchedulerGetProvidersParams {
	o.SetProviderCreatedBy(providerCreatedBy)
	return o
}

// SetProviderCreatedBy adds the providerCreatedBy to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderCreatedBy(providerCreatedBy *string) {
	o.ProviderCreatedBy = providerCreatedBy
}

// WithProviderGender adds the providerGender to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderGender(providerGender *string) *SchedulerGetProvidersParams {
	o.SetProviderGender(providerGender)
	return o
}

// SetProviderGender adds the providerGender to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderGender(providerGender *string) {
	o.ProviderGender = providerGender
}

// WithProviderGivenName adds the providerGivenName to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderGivenName(providerGivenName *string) *SchedulerGetProvidersParams {
	o.SetProviderGivenName(providerGivenName)
	return o
}

// SetProviderGivenName adds the providerGivenName to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderGivenName(providerGivenName *string) {
	o.ProviderGivenName = providerGivenName
}

// WithProviderID adds the providerID to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderID(providerID *string) *SchedulerGetProvidersParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderID(providerID *string) {
	o.ProviderID = providerID
}

// WithProviderOrgID adds the providerOrgID to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderOrgID(providerOrgID *string) *SchedulerGetProvidersParams {
	o.SetProviderOrgID(providerOrgID)
	return o
}

// SetProviderOrgID adds the providerOrgId to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderOrgID(providerOrgID *string) {
	o.ProviderOrgID = providerOrgID
}

// WithProviderPrefix adds the providerPrefix to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderPrefix(providerPrefix *string) *SchedulerGetProvidersParams {
	o.SetProviderPrefix(providerPrefix)
	return o
}

// SetProviderPrefix adds the providerPrefix to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderPrefix(providerPrefix *string) {
	o.ProviderPrefix = providerPrefix
}

// WithProviderRefID adds the providerRefID to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderRefID(providerRefID *string) *SchedulerGetProvidersParams {
	o.SetProviderRefID(providerRefID)
	return o
}

// SetProviderRefID adds the providerRefId to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderRefID(providerRefID *string) {
	o.ProviderRefID = providerRefID
}

// WithProviderRole adds the providerRole to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderRole(providerRole *string) *SchedulerGetProvidersParams {
	o.SetProviderRole(providerRole)
	return o
}

// SetProviderRole adds the providerRole to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderRole(providerRole *string) {
	o.ProviderRole = providerRole
}

// WithProviderSuffix adds the providerSuffix to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderSuffix(providerSuffix *string) *SchedulerGetProvidersParams {
	o.SetProviderSuffix(providerSuffix)
	return o
}

// SetProviderSuffix adds the providerSuffix to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderSuffix(providerSuffix *string) {
	o.ProviderSuffix = providerSuffix
}

// WithProviderSurname adds the providerSurname to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderSurname(providerSurname *string) *SchedulerGetProvidersParams {
	o.SetProviderSurname(providerSurname)
	return o
}

// SetProviderSurname adds the providerSurname to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderSurname(providerSurname *string) {
	o.ProviderSurname = providerSurname
}

// WithProviderTimezoneAbbreviation adds the providerTimezoneAbbreviation to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneAbbreviation(providerTimezoneAbbreviation *string) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneAbbreviation(providerTimezoneAbbreviation)
	return o
}

// SetProviderTimezoneAbbreviation adds the providerTimezoneAbbreviation to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneAbbreviation(providerTimezoneAbbreviation *string) {
	o.ProviderTimezoneAbbreviation = providerTimezoneAbbreviation
}

// WithProviderTimezoneDst adds the providerTimezoneDst to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneDst(providerTimezoneDst *bool) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneDst(providerTimezoneDst)
	return o
}

// SetProviderTimezoneDst adds the providerTimezoneDst to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneDst(providerTimezoneDst *bool) {
	o.ProviderTimezoneDst = providerTimezoneDst
}

// WithProviderTimezoneGmtOffset adds the providerTimezoneGmtOffset to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneGmtOffset(providerTimezoneGmtOffset *int32) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneGmtOffset(providerTimezoneGmtOffset)
	return o
}

// SetProviderTimezoneGmtOffset adds the providerTimezoneGmtOffset to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneGmtOffset(providerTimezoneGmtOffset *int32) {
	o.ProviderTimezoneGmtOffset = providerTimezoneGmtOffset
}

// WithProviderTimezoneID adds the providerTimezoneID to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneID(providerTimezoneID *int32) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneID(providerTimezoneID)
	return o
}

// SetProviderTimezoneID adds the providerTimezoneId to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneID(providerTimezoneID *int32) {
	o.ProviderTimezoneID = providerTimezoneID
}

// WithProviderTimezoneTimeStart adds the providerTimezoneTimeStart to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneTimeStart(providerTimezoneTimeStart *string) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneTimeStart(providerTimezoneTimeStart)
	return o
}

// SetProviderTimezoneTimeStart adds the providerTimezoneTimeStart to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneTimeStart(providerTimezoneTimeStart *string) {
	o.ProviderTimezoneTimeStart = providerTimezoneTimeStart
}

// WithProviderTimezoneZoneCountryCode adds the providerTimezoneZoneCountryCode to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode *string) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode)
	return o
}

// SetProviderTimezoneZoneCountryCode adds the providerTimezoneZoneCountryCode to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneZoneCountryCode(providerTimezoneZoneCountryCode *string) {
	o.ProviderTimezoneZoneCountryCode = providerTimezoneZoneCountryCode
}

// WithProviderTimezoneZoneID adds the providerTimezoneZoneID to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneZoneID(providerTimezoneZoneID *int32) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneZoneID(providerTimezoneZoneID)
	return o
}

// SetProviderTimezoneZoneID adds the providerTimezoneZoneId to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneZoneID(providerTimezoneZoneID *int32) {
	o.ProviderTimezoneZoneID = providerTimezoneZoneID
}

// WithProviderTimezoneZoneName adds the providerTimezoneZoneName to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderTimezoneZoneName(providerTimezoneZoneName *string) *SchedulerGetProvidersParams {
	o.SetProviderTimezoneZoneName(providerTimezoneZoneName)
	return o
}

// SetProviderTimezoneZoneName adds the providerTimezoneZoneName to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderTimezoneZoneName(providerTimezoneZoneName *string) {
	o.ProviderTimezoneZoneName = providerTimezoneZoneName
}

// WithProviderUpdatedAt adds the providerUpdatedAt to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderUpdatedAt(providerUpdatedAt *string) *SchedulerGetProvidersParams {
	o.SetProviderUpdatedAt(providerUpdatedAt)
	return o
}

// SetProviderUpdatedAt adds the providerUpdatedAt to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderUpdatedAt(providerUpdatedAt *string) {
	o.ProviderUpdatedAt = providerUpdatedAt
}

// WithProviderUpdatedBy adds the providerUpdatedBy to the scheduler get providers params
func (o *SchedulerGetProvidersParams) WithProviderUpdatedBy(providerUpdatedBy *string) *SchedulerGetProvidersParams {
	o.SetProviderUpdatedBy(providerUpdatedBy)
	return o
}

// SetProviderUpdatedBy adds the providerUpdatedBy to the scheduler get providers params
func (o *SchedulerGetProvidersParams) SetProviderUpdatedBy(providerUpdatedBy *string) {
	o.ProviderUpdatedBy = providerUpdatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetProvidersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.ProviderActive != nil {

		// query param provider.active
		var qrProviderActive bool

		if o.ProviderActive != nil {
			qrProviderActive = *o.ProviderActive
		}
		qProviderActive := swag.FormatBool(qrProviderActive)
		if qProviderActive != "" {

			if err := r.SetQueryParam("provider.active", qProviderActive); err != nil {
				return err
			}
		}
	}

	if o.ProviderCreatedAt != nil {

		// query param provider.created_at
		var qrProviderCreatedAt string

		if o.ProviderCreatedAt != nil {
			qrProviderCreatedAt = *o.ProviderCreatedAt
		}
		qProviderCreatedAt := qrProviderCreatedAt
		if qProviderCreatedAt != "" {

			if err := r.SetQueryParam("provider.created_at", qProviderCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ProviderCreatedBy != nil {

		// query param provider.created_by
		var qrProviderCreatedBy string

		if o.ProviderCreatedBy != nil {
			qrProviderCreatedBy = *o.ProviderCreatedBy
		}
		qProviderCreatedBy := qrProviderCreatedBy
		if qProviderCreatedBy != "" {

			if err := r.SetQueryParam("provider.created_by", qProviderCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ProviderGender != nil {

		// query param provider.gender
		var qrProviderGender string

		if o.ProviderGender != nil {
			qrProviderGender = *o.ProviderGender
		}
		qProviderGender := qrProviderGender
		if qProviderGender != "" {

			if err := r.SetQueryParam("provider.gender", qProviderGender); err != nil {
				return err
			}
		}
	}

	if o.ProviderGivenName != nil {

		// query param provider.given_name
		var qrProviderGivenName string

		if o.ProviderGivenName != nil {
			qrProviderGivenName = *o.ProviderGivenName
		}
		qProviderGivenName := qrProviderGivenName
		if qProviderGivenName != "" {

			if err := r.SetQueryParam("provider.given_name", qProviderGivenName); err != nil {
				return err
			}
		}
	}

	if o.ProviderID != nil {

		// query param provider.id
		var qrProviderID string

		if o.ProviderID != nil {
			qrProviderID = *o.ProviderID
		}
		qProviderID := qrProviderID
		if qProviderID != "" {

			if err := r.SetQueryParam("provider.id", qProviderID); err != nil {
				return err
			}
		}
	}

	if o.ProviderOrgID != nil {

		// query param provider.org_id
		var qrProviderOrgID string

		if o.ProviderOrgID != nil {
			qrProviderOrgID = *o.ProviderOrgID
		}
		qProviderOrgID := qrProviderOrgID
		if qProviderOrgID != "" {

			if err := r.SetQueryParam("provider.org_id", qProviderOrgID); err != nil {
				return err
			}
		}
	}

	if o.ProviderPrefix != nil {

		// query param provider.prefix
		var qrProviderPrefix string

		if o.ProviderPrefix != nil {
			qrProviderPrefix = *o.ProviderPrefix
		}
		qProviderPrefix := qrProviderPrefix
		if qProviderPrefix != "" {

			if err := r.SetQueryParam("provider.prefix", qProviderPrefix); err != nil {
				return err
			}
		}
	}

	if o.ProviderRefID != nil {

		// query param provider.ref_id
		var qrProviderRefID string

		if o.ProviderRefID != nil {
			qrProviderRefID = *o.ProviderRefID
		}
		qProviderRefID := qrProviderRefID
		if qProviderRefID != "" {

			if err := r.SetQueryParam("provider.ref_id", qProviderRefID); err != nil {
				return err
			}
		}
	}

	if o.ProviderRole != nil {

		// query param provider.role
		var qrProviderRole string

		if o.ProviderRole != nil {
			qrProviderRole = *o.ProviderRole
		}
		qProviderRole := qrProviderRole
		if qProviderRole != "" {

			if err := r.SetQueryParam("provider.role", qProviderRole); err != nil {
				return err
			}
		}
	}

	if o.ProviderSuffix != nil {

		// query param provider.suffix
		var qrProviderSuffix string

		if o.ProviderSuffix != nil {
			qrProviderSuffix = *o.ProviderSuffix
		}
		qProviderSuffix := qrProviderSuffix
		if qProviderSuffix != "" {

			if err := r.SetQueryParam("provider.suffix", qProviderSuffix); err != nil {
				return err
			}
		}
	}

	if o.ProviderSurname != nil {

		// query param provider.surname
		var qrProviderSurname string

		if o.ProviderSurname != nil {
			qrProviderSurname = *o.ProviderSurname
		}
		qProviderSurname := qrProviderSurname
		if qProviderSurname != "" {

			if err := r.SetQueryParam("provider.surname", qProviderSurname); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneAbbreviation != nil {

		// query param provider.timezone.abbreviation
		var qrProviderTimezoneAbbreviation string

		if o.ProviderTimezoneAbbreviation != nil {
			qrProviderTimezoneAbbreviation = *o.ProviderTimezoneAbbreviation
		}
		qProviderTimezoneAbbreviation := qrProviderTimezoneAbbreviation
		if qProviderTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("provider.timezone.abbreviation", qProviderTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneDst != nil {

		// query param provider.timezone.dst
		var qrProviderTimezoneDst bool

		if o.ProviderTimezoneDst != nil {
			qrProviderTimezoneDst = *o.ProviderTimezoneDst
		}
		qProviderTimezoneDst := swag.FormatBool(qrProviderTimezoneDst)
		if qProviderTimezoneDst != "" {

			if err := r.SetQueryParam("provider.timezone.dst", qProviderTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneGmtOffset != nil {

		// query param provider.timezone.gmt_offset
		var qrProviderTimezoneGmtOffset int32

		if o.ProviderTimezoneGmtOffset != nil {
			qrProviderTimezoneGmtOffset = *o.ProviderTimezoneGmtOffset
		}
		qProviderTimezoneGmtOffset := swag.FormatInt32(qrProviderTimezoneGmtOffset)
		if qProviderTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("provider.timezone.gmt_offset", qProviderTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneID != nil {

		// query param provider.timezone.id
		var qrProviderTimezoneID int32

		if o.ProviderTimezoneID != nil {
			qrProviderTimezoneID = *o.ProviderTimezoneID
		}
		qProviderTimezoneID := swag.FormatInt32(qrProviderTimezoneID)
		if qProviderTimezoneID != "" {

			if err := r.SetQueryParam("provider.timezone.id", qProviderTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneTimeStart != nil {

		// query param provider.timezone.time_start
		var qrProviderTimezoneTimeStart string

		if o.ProviderTimezoneTimeStart != nil {
			qrProviderTimezoneTimeStart = *o.ProviderTimezoneTimeStart
		}
		qProviderTimezoneTimeStart := qrProviderTimezoneTimeStart
		if qProviderTimezoneTimeStart != "" {

			if err := r.SetQueryParam("provider.timezone.time_start", qProviderTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneCountryCode != nil {

		// query param provider.timezone.zone.country_code
		var qrProviderTimezoneZoneCountryCode string

		if o.ProviderTimezoneZoneCountryCode != nil {
			qrProviderTimezoneZoneCountryCode = *o.ProviderTimezoneZoneCountryCode
		}
		qProviderTimezoneZoneCountryCode := qrProviderTimezoneZoneCountryCode
		if qProviderTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("provider.timezone.zone.country_code", qProviderTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneID != nil {

		// query param provider.timezone.zone.id
		var qrProviderTimezoneZoneID int32

		if o.ProviderTimezoneZoneID != nil {
			qrProviderTimezoneZoneID = *o.ProviderTimezoneZoneID
		}
		qProviderTimezoneZoneID := swag.FormatInt32(qrProviderTimezoneZoneID)
		if qProviderTimezoneZoneID != "" {

			if err := r.SetQueryParam("provider.timezone.zone.id", qProviderTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.ProviderTimezoneZoneName != nil {

		// query param provider.timezone.zone.name
		var qrProviderTimezoneZoneName string

		if o.ProviderTimezoneZoneName != nil {
			qrProviderTimezoneZoneName = *o.ProviderTimezoneZoneName
		}
		qProviderTimezoneZoneName := qrProviderTimezoneZoneName
		if qProviderTimezoneZoneName != "" {

			if err := r.SetQueryParam("provider.timezone.zone.name", qProviderTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.ProviderUpdatedAt != nil {

		// query param provider.updated_at
		var qrProviderUpdatedAt string

		if o.ProviderUpdatedAt != nil {
			qrProviderUpdatedAt = *o.ProviderUpdatedAt
		}
		qProviderUpdatedAt := qrProviderUpdatedAt
		if qProviderUpdatedAt != "" {

			if err := r.SetQueryParam("provider.updated_at", qProviderUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ProviderUpdatedBy != nil {

		// query param provider.updated_by
		var qrProviderUpdatedBy string

		if o.ProviderUpdatedBy != nil {
			qrProviderUpdatedBy = *o.ProviderUpdatedBy
		}
		qProviderUpdatedBy := qrProviderUpdatedBy
		if qProviderUpdatedBy != "" {

			if err := r.SetQueryParam("provider.updated_by", qProviderUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerGetProviders binds the parameter ids
func (o *SchedulerGetProvidersParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int32

		idsIIV := swag.FormatInt32(idsIIR) // int32 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}
