// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scheduler API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scheduler API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SchedulerActivateProvider(params *SchedulerActivateProviderParams, opts ...ClientOption) (*SchedulerActivateProviderOK, error)

	SchedulerActivateSchedule(params *SchedulerActivateScheduleParams, opts ...ClientOption) (*SchedulerActivateScheduleOK, error)

	SchedulerAddProviderService(params *SchedulerAddProviderServiceParams, opts ...ClientOption) (*SchedulerAddProviderServiceOK, error)

	SchedulerCreateAppointment(params *SchedulerCreateAppointmentParams, opts ...ClientOption) (*SchedulerCreateAppointmentOK, error)

	SchedulerCreatePatient(params *SchedulerCreatePatientParams, opts ...ClientOption) (*SchedulerCreatePatientOK, error)

	SchedulerCreateProvider(params *SchedulerCreateProviderParams, opts ...ClientOption) (*SchedulerCreateProviderOK, error)

	SchedulerCreateSchedule(params *SchedulerCreateScheduleParams, opts ...ClientOption) (*SchedulerCreateScheduleOK, error)

	SchedulerCreateService(params *SchedulerCreateServiceParams, opts ...ClientOption) (*SchedulerCreateServiceOK, error)

	SchedulerDeactivateProvider(params *SchedulerDeactivateProviderParams, opts ...ClientOption) (*SchedulerDeactivateProviderOK, error)

	SchedulerDeleteAppointment(params *SchedulerDeleteAppointmentParams, opts ...ClientOption) (*SchedulerDeleteAppointmentOK, error)

	SchedulerGetAppointments(params *SchedulerGetAppointmentsParams, opts ...ClientOption) (*SchedulerGetAppointmentsOK, error)

	SchedulerGetCountries(params *SchedulerGetCountriesParams, opts ...ClientOption) (*SchedulerGetCountriesOK, error)

	SchedulerGetPatient(params *SchedulerGetPatientParams, opts ...ClientOption) (*SchedulerGetPatientOK, error)

	SchedulerGetPatientAppointments(params *SchedulerGetPatientAppointmentsParams, opts ...ClientOption) (*SchedulerGetPatientAppointmentsOK, error)

	SchedulerGetPatients(params *SchedulerGetPatientsParams, opts ...ClientOption) (*SchedulerGetPatientsOK, error)

	SchedulerGetProvider(params *SchedulerGetProviderParams, opts ...ClientOption) (*SchedulerGetProviderOK, error)

	SchedulerGetProviderAppointments(params *SchedulerGetProviderAppointmentsParams, opts ...ClientOption) (*SchedulerGetProviderAppointmentsOK, error)

	SchedulerGetProviderServices(params *SchedulerGetProviderServicesParams, opts ...ClientOption) (*SchedulerGetProviderServicesOK, error)

	SchedulerGetProviders(params *SchedulerGetProvidersParams, opts ...ClientOption) (*SchedulerGetProvidersOK, error)

	SchedulerGetScheduleBlock(params *SchedulerGetScheduleBlockParams, opts ...ClientOption) (*SchedulerGetScheduleBlockOK, error)

	SchedulerGetService(params *SchedulerGetServiceParams, opts ...ClientOption) (*SchedulerGetServiceOK, error)

	SchedulerGetServices(params *SchedulerGetServicesParams, opts ...ClientOption) (*SchedulerGetServicesOK, error)

	SchedulerGetZipcode(params *SchedulerGetZipcodeParams, opts ...ClientOption) (*SchedulerGetZipcodeOK, error)

	SchedulerInfo(params *SchedulerInfoParams, opts ...ClientOption) (*SchedulerInfoOK, error)

	SchedulerRemoveProviderService(params *SchedulerRemoveProviderServiceParams, opts ...ClientOption) (*SchedulerRemoveProviderServiceOK, error)

	SchedulerSearchAvailability(params *SchedulerSearchAvailabilityParams, opts ...ClientOption) (*SchedulerSearchAvailabilityOK, error)

	SchedulerSearchProviders(params *SchedulerSearchProvidersParams, opts ...ClientOption) (*SchedulerSearchProvidersOK, error)

	SchedulerUpdatePatient(params *SchedulerUpdatePatientParams, opts ...ClientOption) (*SchedulerUpdatePatientOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SchedulerActivateProvider scheduler activate provider API
*/
func (a *Client) SchedulerActivateProvider(params *SchedulerActivateProviderParams, opts ...ClientOption) (*SchedulerActivateProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerActivateProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_ActivateProvider",
		Method:             "PUT",
		PathPattern:        "/v1/providers/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerActivateProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerActivateProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerActivateProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerActivateSchedule scheduler activate schedule API
*/
func (a *Client) SchedulerActivateSchedule(params *SchedulerActivateScheduleParams, opts ...ClientOption) (*SchedulerActivateScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerActivateScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_ActivateSchedule",
		Method:             "PUT",
		PathPattern:        "/v1/schedules/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerActivateScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerActivateScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerActivateScheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerAddProviderService scheduler add provider service API
*/
func (a *Client) SchedulerAddProviderService(params *SchedulerAddProviderServiceParams, opts ...ClientOption) (*SchedulerAddProviderServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerAddProviderServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_AddProviderService",
		Method:             "POST",
		PathPattern:        "/v1/providers/{provider.id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerAddProviderServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerAddProviderServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerAddProviderServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerCreateAppointment scheduler create appointment API
*/
func (a *Client) SchedulerCreateAppointment(params *SchedulerCreateAppointmentParams, opts ...ClientOption) (*SchedulerCreateAppointmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerCreateAppointmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_CreateAppointment",
		Method:             "POST",
		PathPattern:        "/v1/appointments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerCreateAppointmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerCreateAppointmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerCreateAppointmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerCreatePatient scheduler create patient API
*/
func (a *Client) SchedulerCreatePatient(params *SchedulerCreatePatientParams, opts ...ClientOption) (*SchedulerCreatePatientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerCreatePatientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_CreatePatient",
		Method:             "POST",
		PathPattern:        "/v1/patients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerCreatePatientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerCreatePatientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerCreatePatientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerCreateProvider scheduler create provider API
*/
func (a *Client) SchedulerCreateProvider(params *SchedulerCreateProviderParams, opts ...ClientOption) (*SchedulerCreateProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerCreateProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_CreateProvider",
		Method:             "POST",
		PathPattern:        "/v1/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerCreateProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerCreateProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerCreateProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerCreateSchedule scheduler create schedule API
*/
func (a *Client) SchedulerCreateSchedule(params *SchedulerCreateScheduleParams, opts ...ClientOption) (*SchedulerCreateScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerCreateScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_CreateSchedule",
		Method:             "POST",
		PathPattern:        "/v1/providers/{provider.id}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerCreateScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerCreateScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerCreateScheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerCreateService scheduler create service API
*/
func (a *Client) SchedulerCreateService(params *SchedulerCreateServiceParams, opts ...ClientOption) (*SchedulerCreateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerCreateServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_CreateService",
		Method:             "POST",
		PathPattern:        "/v1/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerCreateServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerCreateServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerCreateServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerDeactivateProvider scheduler deactivate provider API
*/
func (a *Client) SchedulerDeactivateProvider(params *SchedulerDeactivateProviderParams, opts ...ClientOption) (*SchedulerDeactivateProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerDeactivateProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_DeactivateProvider",
		Method:             "PUT",
		PathPattern:        "/v1/providers/{id}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerDeactivateProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerDeactivateProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerDeactivateProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerDeleteAppointment scheduler delete appointment API
*/
func (a *Client) SchedulerDeleteAppointment(params *SchedulerDeleteAppointmentParams, opts ...ClientOption) (*SchedulerDeleteAppointmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerDeleteAppointmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_DeleteAppointment",
		Method:             "DELETE",
		PathPattern:        "/v1/appointments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerDeleteAppointmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerDeleteAppointmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerDeleteAppointmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetAppointments scheduler get appointments API
*/
func (a *Client) SchedulerGetAppointments(params *SchedulerGetAppointmentsParams, opts ...ClientOption) (*SchedulerGetAppointmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetAppointmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetAppointments",
		Method:             "GET",
		PathPattern:        "/v1/appointments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetAppointmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetAppointmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetAppointmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetCountries scheduler get countries API
*/
func (a *Client) SchedulerGetCountries(params *SchedulerGetCountriesParams, opts ...ClientOption) (*SchedulerGetCountriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetCountriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetCountries",
		Method:             "GET",
		PathPattern:        "/v1/countries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetCountriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetCountriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetCountriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetPatient scheduler get patient API
*/
func (a *Client) SchedulerGetPatient(params *SchedulerGetPatientParams, opts ...ClientOption) (*SchedulerGetPatientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetPatientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetPatient",
		Method:             "GET",
		PathPattern:        "/v1/patients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetPatientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetPatientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetPatientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetPatientAppointments scheduler get patient appointments API
*/
func (a *Client) SchedulerGetPatientAppointments(params *SchedulerGetPatientAppointmentsParams, opts ...ClientOption) (*SchedulerGetPatientAppointmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetPatientAppointmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetPatientAppointments",
		Method:             "GET",
		PathPattern:        "/v1/patients/{patient_id}/appointments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetPatientAppointmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetPatientAppointmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetPatientAppointmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetPatients scheduler get patients API
*/
func (a *Client) SchedulerGetPatients(params *SchedulerGetPatientsParams, opts ...ClientOption) (*SchedulerGetPatientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetPatientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetPatients",
		Method:             "GET",
		PathPattern:        "/v1/patients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetPatientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetPatientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetPatientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetProvider scheduler get provider API
*/
func (a *Client) SchedulerGetProvider(params *SchedulerGetProviderParams, opts ...ClientOption) (*SchedulerGetProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetProvider",
		Method:             "GET",
		PathPattern:        "/v1/providers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetProviderAppointments scheduler get provider appointments API
*/
func (a *Client) SchedulerGetProviderAppointments(params *SchedulerGetProviderAppointmentsParams, opts ...ClientOption) (*SchedulerGetProviderAppointmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetProviderAppointmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetProviderAppointments",
		Method:             "GET",
		PathPattern:        "/v1/providers/{provider_id}/appointments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetProviderAppointmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetProviderAppointmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetProviderAppointmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetProviderServices scheduler get provider services API
*/
func (a *Client) SchedulerGetProviderServices(params *SchedulerGetProviderServicesParams, opts ...ClientOption) (*SchedulerGetProviderServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetProviderServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetProviderServices",
		Method:             "GET",
		PathPattern:        "/v1/providers/{provider_id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetProviderServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetProviderServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetProviderServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetProviders scheduler get providers API
*/
func (a *Client) SchedulerGetProviders(params *SchedulerGetProvidersParams, opts ...ClientOption) (*SchedulerGetProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetProviders",
		Method:             "GET",
		PathPattern:        "/v1/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetScheduleBlock scheduler get schedule block API
*/
func (a *Client) SchedulerGetScheduleBlock(params *SchedulerGetScheduleBlockParams, opts ...ClientOption) (*SchedulerGetScheduleBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetScheduleBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetScheduleBlock",
		Method:             "GET",
		PathPattern:        "/v1/schedules/{schedule.id}/blocks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetScheduleBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetScheduleBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetScheduleBlockDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetService scheduler get service API
*/
func (a *Client) SchedulerGetService(params *SchedulerGetServiceParams, opts ...ClientOption) (*SchedulerGetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetService",
		Method:             "GET",
		PathPattern:        "/v1/services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetServices scheduler get services API
*/
func (a *Client) SchedulerGetServices(params *SchedulerGetServicesParams, opts ...ClientOption) (*SchedulerGetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetServices",
		Method:             "GET",
		PathPattern:        "/v1/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerGetZipcode scheduler get zipcode API
*/
func (a *Client) SchedulerGetZipcode(params *SchedulerGetZipcodeParams, opts ...ClientOption) (*SchedulerGetZipcodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerGetZipcodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_GetZipcode",
		Method:             "GET",
		PathPattern:        "/v1/zipcodes/{zip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerGetZipcodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerGetZipcodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerGetZipcodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerInfo gets service version and build info
*/
func (a *Client) SchedulerInfo(params *SchedulerInfoParams, opts ...ClientOption) (*SchedulerInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_Info",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerRemoveProviderService scheduler remove provider service API
*/
func (a *Client) SchedulerRemoveProviderService(params *SchedulerRemoveProviderServiceParams, opts ...ClientOption) (*SchedulerRemoveProviderServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerRemoveProviderServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_RemoveProviderService",
		Method:             "DELETE",
		PathPattern:        "/v1/providers/{provider.id}/services/{service.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerRemoveProviderServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerRemoveProviderServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerRemoveProviderServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerSearchAvailability scheduler search availability API
*/
func (a *Client) SchedulerSearchAvailability(params *SchedulerSearchAvailabilityParams, opts ...ClientOption) (*SchedulerSearchAvailabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerSearchAvailabilityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_SearchAvailability",
		Method:             "POST",
		PathPattern:        "/v1/search/availability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerSearchAvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerSearchAvailabilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerSearchAvailabilityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerSearchProviders scheduler search providers API
*/
func (a *Client) SchedulerSearchProviders(params *SchedulerSearchProvidersParams, opts ...ClientOption) (*SchedulerSearchProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerSearchProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_SearchProviders",
		Method:             "POST",
		PathPattern:        "/v1/search/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerSearchProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerSearchProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerSearchProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SchedulerUpdatePatient scheduler update patient API
*/
func (a *Client) SchedulerUpdatePatient(params *SchedulerUpdatePatientParams, opts ...ClientOption) (*SchedulerUpdatePatientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchedulerUpdatePatientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Scheduler_UpdatePatient",
		Method:             "PUT",
		PathPattern:        "/v1/patients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SchedulerUpdatePatientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SchedulerUpdatePatientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SchedulerUpdatePatientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
