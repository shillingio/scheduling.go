// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetProviderServicesParams creates a new SchedulerGetProviderServicesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetProviderServicesParams() *SchedulerGetProviderServicesParams {
	return &SchedulerGetProviderServicesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetProviderServicesParamsWithTimeout creates a new SchedulerGetProviderServicesParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetProviderServicesParamsWithTimeout(timeout time.Duration) *SchedulerGetProviderServicesParams {
	return &SchedulerGetProviderServicesParams{
		timeout: timeout,
	}
}

// NewSchedulerGetProviderServicesParamsWithContext creates a new SchedulerGetProviderServicesParams object
// with the ability to set a context for a request.
func NewSchedulerGetProviderServicesParamsWithContext(ctx context.Context) *SchedulerGetProviderServicesParams {
	return &SchedulerGetProviderServicesParams{
		Context: ctx,
	}
}

// NewSchedulerGetProviderServicesParamsWithHTTPClient creates a new SchedulerGetProviderServicesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetProviderServicesParamsWithHTTPClient(client *http.Client) *SchedulerGetProviderServicesParams {
	return &SchedulerGetProviderServicesParams{
		HTTPClient: client,
	}
}

/* SchedulerGetProviderServicesParams contains all the parameters to send to the API endpoint
   for the scheduler get provider services operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetProviderServicesParams struct {

	// ID.
	ID *string

	// Ids.
	Ids []int32

	// Limit.
	//
	// Format: int32
	Limit *int32

	// Offset.
	//
	// Format: int32
	Offset *int32

	// ProviderID.
	ProviderID string

	// ServiceActive.
	ServiceActive *bool

	// ServiceCountry.
	ServiceCountry *string

	// ServiceCreatedAt.
	ServiceCreatedAt *string

	// ServiceCreatedBy.
	ServiceCreatedBy *string

	// ServiceDurations.
	ServiceDurations []int32

	// ServiceID.
	ServiceID *string

	// ServiceInPerson.
	ServiceInPerson *bool

	// ServiceLanguages.
	ServiceLanguages []string

	// ServiceProviderActive.
	ServiceProviderActive *bool

	// ServiceProviderCreatedAt.
	ServiceProviderCreatedAt *string

	// ServiceProviderCreatedBy.
	ServiceProviderCreatedBy *string

	// ServiceProviderGender.
	ServiceProviderGender *string

	// ServiceProviderGivenName.
	ServiceProviderGivenName *string

	// ServiceProviderID.
	ServiceProviderID *string

	// ServiceProviderOrgID.
	ServiceProviderOrgID *string

	// ServiceProviderPrefix.
	ServiceProviderPrefix *string

	// ServiceProviderRefID.
	ServiceProviderRefID *string

	// ServiceProviderRole.
	ServiceProviderRole *string

	// ServiceProviderSuffix.
	ServiceProviderSuffix *string

	// ServiceProviderSurname.
	ServiceProviderSurname *string

	// ServiceProviderTimezoneAbbreviation.
	ServiceProviderTimezoneAbbreviation *string

	// ServiceProviderTimezoneDst.
	ServiceProviderTimezoneDst *bool

	// ServiceProviderTimezoneGmtOffset.
	//
	// Format: int32
	ServiceProviderTimezoneGmtOffset *int32

	// ServiceProviderTimezoneID.
	//
	// Format: int32
	ServiceProviderTimezoneID *int32

	// ServiceProviderTimezoneTimeStart.
	//
	// Format: int64
	ServiceProviderTimezoneTimeStart *string

	// ServiceProviderTimezoneZoneCountryCode.
	ServiceProviderTimezoneZoneCountryCode *string

	// ServiceProviderTimezoneZoneID.
	//
	// Format: int32
	ServiceProviderTimezoneZoneID *int32

	// ServiceProviderTimezoneZoneName.
	ServiceProviderTimezoneZoneName *string

	// ServiceProviderUpdatedAt.
	ServiceProviderUpdatedAt *string

	// ServiceProviderUpdatedBy.
	ServiceProviderUpdatedBy *string

	// ServiceServiceActive.
	ServiceServiceActive *bool

	// ServiceServiceConfigDurations.
	ServiceServiceConfigDurations []int32

	// ServiceServiceConfigFixedDuration.
	//
	// Format: int32
	ServiceServiceConfigFixedDuration *int32

	// ServiceServiceCreatedAt.
	ServiceServiceCreatedAt *string

	// ServiceServiceCreatedBy.
	ServiceServiceCreatedBy *string

	// ServiceServiceDescription.
	ServiceServiceDescription *string

	// ServiceServiceID.
	ServiceServiceID *string

	// ServiceServiceName.
	ServiceServiceName *string

	// ServiceServiceOrgID.
	ServiceServiceOrgID *string

	// ServiceServiceRefID.
	ServiceServiceRefID *string

	// ServiceServiceUpdatedAt.
	ServiceServiceUpdatedAt *string

	// ServiceServiceUpdatedBy.
	ServiceServiceUpdatedBy *string

	// ServiceStates.
	ServiceStates []string

	// ServiceTypes.
	ServiceTypes []string

	// ServiceUpdatedAt.
	ServiceUpdatedAt *string

	// ServiceUpdatedBy.
	ServiceUpdatedBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get provider services params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetProviderServicesParams) WithDefaults() *SchedulerGetProviderServicesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get provider services params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetProviderServicesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithTimeout(timeout time.Duration) *SchedulerGetProviderServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithContext(ctx context.Context) *SchedulerGetProviderServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithHTTPClient(client *http.Client) *SchedulerGetProviderServicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithID(id *string) *SchedulerGetProviderServicesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetID(id *string) {
	o.ID = id
}

// WithIds adds the ids to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithIds(ids []int32) *SchedulerGetProviderServicesParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetIds(ids []int32) {
	o.Ids = ids
}

// WithLimit adds the limit to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithLimit(limit *int32) *SchedulerGetProviderServicesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithOffset(offset *int32) *SchedulerGetProviderServicesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithProviderID adds the providerID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithProviderID(providerID string) *SchedulerGetProviderServicesParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetProviderID(providerID string) {
	o.ProviderID = providerID
}

// WithServiceActive adds the serviceActive to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceActive(serviceActive *bool) *SchedulerGetProviderServicesParams {
	o.SetServiceActive(serviceActive)
	return o
}

// SetServiceActive adds the serviceActive to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceActive(serviceActive *bool) {
	o.ServiceActive = serviceActive
}

// WithServiceCountry adds the serviceCountry to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceCountry(serviceCountry *string) *SchedulerGetProviderServicesParams {
	o.SetServiceCountry(serviceCountry)
	return o
}

// SetServiceCountry adds the serviceCountry to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceCountry(serviceCountry *string) {
	o.ServiceCountry = serviceCountry
}

// WithServiceCreatedAt adds the serviceCreatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceCreatedAt(serviceCreatedAt *string) *SchedulerGetProviderServicesParams {
	o.SetServiceCreatedAt(serviceCreatedAt)
	return o
}

// SetServiceCreatedAt adds the serviceCreatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceCreatedAt(serviceCreatedAt *string) {
	o.ServiceCreatedAt = serviceCreatedAt
}

// WithServiceCreatedBy adds the serviceCreatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceCreatedBy(serviceCreatedBy *string) *SchedulerGetProviderServicesParams {
	o.SetServiceCreatedBy(serviceCreatedBy)
	return o
}

// SetServiceCreatedBy adds the serviceCreatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceCreatedBy(serviceCreatedBy *string) {
	o.ServiceCreatedBy = serviceCreatedBy
}

// WithServiceDurations adds the serviceDurations to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceDurations(serviceDurations []int32) *SchedulerGetProviderServicesParams {
	o.SetServiceDurations(serviceDurations)
	return o
}

// SetServiceDurations adds the serviceDurations to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceDurations(serviceDurations []int32) {
	o.ServiceDurations = serviceDurations
}

// WithServiceID adds the serviceID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceID(serviceID *string) *SchedulerGetProviderServicesParams {
	o.SetServiceID(serviceID)
	return o
}

// SetServiceID adds the serviceId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceID(serviceID *string) {
	o.ServiceID = serviceID
}

// WithServiceInPerson adds the serviceInPerson to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceInPerson(serviceInPerson *bool) *SchedulerGetProviderServicesParams {
	o.SetServiceInPerson(serviceInPerson)
	return o
}

// SetServiceInPerson adds the serviceInPerson to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceInPerson(serviceInPerson *bool) {
	o.ServiceInPerson = serviceInPerson
}

// WithServiceLanguages adds the serviceLanguages to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceLanguages(serviceLanguages []string) *SchedulerGetProviderServicesParams {
	o.SetServiceLanguages(serviceLanguages)
	return o
}

// SetServiceLanguages adds the serviceLanguages to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceLanguages(serviceLanguages []string) {
	o.ServiceLanguages = serviceLanguages
}

// WithServiceProviderActive adds the serviceProviderActive to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderActive(serviceProviderActive *bool) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderActive(serviceProviderActive)
	return o
}

// SetServiceProviderActive adds the serviceProviderActive to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderActive(serviceProviderActive *bool) {
	o.ServiceProviderActive = serviceProviderActive
}

// WithServiceProviderCreatedAt adds the serviceProviderCreatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderCreatedAt(serviceProviderCreatedAt *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderCreatedAt(serviceProviderCreatedAt)
	return o
}

// SetServiceProviderCreatedAt adds the serviceProviderCreatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderCreatedAt(serviceProviderCreatedAt *string) {
	o.ServiceProviderCreatedAt = serviceProviderCreatedAt
}

// WithServiceProviderCreatedBy adds the serviceProviderCreatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderCreatedBy(serviceProviderCreatedBy *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderCreatedBy(serviceProviderCreatedBy)
	return o
}

// SetServiceProviderCreatedBy adds the serviceProviderCreatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderCreatedBy(serviceProviderCreatedBy *string) {
	o.ServiceProviderCreatedBy = serviceProviderCreatedBy
}

// WithServiceProviderGender adds the serviceProviderGender to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderGender(serviceProviderGender *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderGender(serviceProviderGender)
	return o
}

// SetServiceProviderGender adds the serviceProviderGender to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderGender(serviceProviderGender *string) {
	o.ServiceProviderGender = serviceProviderGender
}

// WithServiceProviderGivenName adds the serviceProviderGivenName to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderGivenName(serviceProviderGivenName *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderGivenName(serviceProviderGivenName)
	return o
}

// SetServiceProviderGivenName adds the serviceProviderGivenName to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderGivenName(serviceProviderGivenName *string) {
	o.ServiceProviderGivenName = serviceProviderGivenName
}

// WithServiceProviderID adds the serviceProviderID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderID(serviceProviderID *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderID(serviceProviderID)
	return o
}

// SetServiceProviderID adds the serviceProviderId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderID(serviceProviderID *string) {
	o.ServiceProviderID = serviceProviderID
}

// WithServiceProviderOrgID adds the serviceProviderOrgID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderOrgID(serviceProviderOrgID *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderOrgID(serviceProviderOrgID)
	return o
}

// SetServiceProviderOrgID adds the serviceProviderOrgId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderOrgID(serviceProviderOrgID *string) {
	o.ServiceProviderOrgID = serviceProviderOrgID
}

// WithServiceProviderPrefix adds the serviceProviderPrefix to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderPrefix(serviceProviderPrefix *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderPrefix(serviceProviderPrefix)
	return o
}

// SetServiceProviderPrefix adds the serviceProviderPrefix to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderPrefix(serviceProviderPrefix *string) {
	o.ServiceProviderPrefix = serviceProviderPrefix
}

// WithServiceProviderRefID adds the serviceProviderRefID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderRefID(serviceProviderRefID *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderRefID(serviceProviderRefID)
	return o
}

// SetServiceProviderRefID adds the serviceProviderRefId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderRefID(serviceProviderRefID *string) {
	o.ServiceProviderRefID = serviceProviderRefID
}

// WithServiceProviderRole adds the serviceProviderRole to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderRole(serviceProviderRole *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderRole(serviceProviderRole)
	return o
}

// SetServiceProviderRole adds the serviceProviderRole to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderRole(serviceProviderRole *string) {
	o.ServiceProviderRole = serviceProviderRole
}

// WithServiceProviderSuffix adds the serviceProviderSuffix to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderSuffix(serviceProviderSuffix *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderSuffix(serviceProviderSuffix)
	return o
}

// SetServiceProviderSuffix adds the serviceProviderSuffix to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderSuffix(serviceProviderSuffix *string) {
	o.ServiceProviderSuffix = serviceProviderSuffix
}

// WithServiceProviderSurname adds the serviceProviderSurname to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderSurname(serviceProviderSurname *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderSurname(serviceProviderSurname)
	return o
}

// SetServiceProviderSurname adds the serviceProviderSurname to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderSurname(serviceProviderSurname *string) {
	o.ServiceProviderSurname = serviceProviderSurname
}

// WithServiceProviderTimezoneAbbreviation adds the serviceProviderTimezoneAbbreviation to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneAbbreviation(serviceProviderTimezoneAbbreviation *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneAbbreviation(serviceProviderTimezoneAbbreviation)
	return o
}

// SetServiceProviderTimezoneAbbreviation adds the serviceProviderTimezoneAbbreviation to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneAbbreviation(serviceProviderTimezoneAbbreviation *string) {
	o.ServiceProviderTimezoneAbbreviation = serviceProviderTimezoneAbbreviation
}

// WithServiceProviderTimezoneDst adds the serviceProviderTimezoneDst to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneDst(serviceProviderTimezoneDst *bool) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneDst(serviceProviderTimezoneDst)
	return o
}

// SetServiceProviderTimezoneDst adds the serviceProviderTimezoneDst to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneDst(serviceProviderTimezoneDst *bool) {
	o.ServiceProviderTimezoneDst = serviceProviderTimezoneDst
}

// WithServiceProviderTimezoneGmtOffset adds the serviceProviderTimezoneGmtOffset to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneGmtOffset(serviceProviderTimezoneGmtOffset *int32) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneGmtOffset(serviceProviderTimezoneGmtOffset)
	return o
}

// SetServiceProviderTimezoneGmtOffset adds the serviceProviderTimezoneGmtOffset to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneGmtOffset(serviceProviderTimezoneGmtOffset *int32) {
	o.ServiceProviderTimezoneGmtOffset = serviceProviderTimezoneGmtOffset
}

// WithServiceProviderTimezoneID adds the serviceProviderTimezoneID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneID(serviceProviderTimezoneID *int32) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneID(serviceProviderTimezoneID)
	return o
}

// SetServiceProviderTimezoneID adds the serviceProviderTimezoneId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneID(serviceProviderTimezoneID *int32) {
	o.ServiceProviderTimezoneID = serviceProviderTimezoneID
}

// WithServiceProviderTimezoneTimeStart adds the serviceProviderTimezoneTimeStart to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneTimeStart(serviceProviderTimezoneTimeStart *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneTimeStart(serviceProviderTimezoneTimeStart)
	return o
}

// SetServiceProviderTimezoneTimeStart adds the serviceProviderTimezoneTimeStart to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneTimeStart(serviceProviderTimezoneTimeStart *string) {
	o.ServiceProviderTimezoneTimeStart = serviceProviderTimezoneTimeStart
}

// WithServiceProviderTimezoneZoneCountryCode adds the serviceProviderTimezoneZoneCountryCode to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneZoneCountryCode(serviceProviderTimezoneZoneCountryCode *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneZoneCountryCode(serviceProviderTimezoneZoneCountryCode)
	return o
}

// SetServiceProviderTimezoneZoneCountryCode adds the serviceProviderTimezoneZoneCountryCode to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneZoneCountryCode(serviceProviderTimezoneZoneCountryCode *string) {
	o.ServiceProviderTimezoneZoneCountryCode = serviceProviderTimezoneZoneCountryCode
}

// WithServiceProviderTimezoneZoneID adds the serviceProviderTimezoneZoneID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneZoneID(serviceProviderTimezoneZoneID *int32) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneZoneID(serviceProviderTimezoneZoneID)
	return o
}

// SetServiceProviderTimezoneZoneID adds the serviceProviderTimezoneZoneId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneZoneID(serviceProviderTimezoneZoneID *int32) {
	o.ServiceProviderTimezoneZoneID = serviceProviderTimezoneZoneID
}

// WithServiceProviderTimezoneZoneName adds the serviceProviderTimezoneZoneName to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderTimezoneZoneName(serviceProviderTimezoneZoneName *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderTimezoneZoneName(serviceProviderTimezoneZoneName)
	return o
}

// SetServiceProviderTimezoneZoneName adds the serviceProviderTimezoneZoneName to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderTimezoneZoneName(serviceProviderTimezoneZoneName *string) {
	o.ServiceProviderTimezoneZoneName = serviceProviderTimezoneZoneName
}

// WithServiceProviderUpdatedAt adds the serviceProviderUpdatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderUpdatedAt(serviceProviderUpdatedAt *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderUpdatedAt(serviceProviderUpdatedAt)
	return o
}

// SetServiceProviderUpdatedAt adds the serviceProviderUpdatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderUpdatedAt(serviceProviderUpdatedAt *string) {
	o.ServiceProviderUpdatedAt = serviceProviderUpdatedAt
}

// WithServiceProviderUpdatedBy adds the serviceProviderUpdatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceProviderUpdatedBy(serviceProviderUpdatedBy *string) *SchedulerGetProviderServicesParams {
	o.SetServiceProviderUpdatedBy(serviceProviderUpdatedBy)
	return o
}

// SetServiceProviderUpdatedBy adds the serviceProviderUpdatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceProviderUpdatedBy(serviceProviderUpdatedBy *string) {
	o.ServiceProviderUpdatedBy = serviceProviderUpdatedBy
}

// WithServiceServiceActive adds the serviceServiceActive to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceActive(serviceServiceActive *bool) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceActive(serviceServiceActive)
	return o
}

// SetServiceServiceActive adds the serviceServiceActive to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceActive(serviceServiceActive *bool) {
	o.ServiceServiceActive = serviceServiceActive
}

// WithServiceServiceConfigDurations adds the serviceServiceConfigDurations to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceConfigDurations(serviceServiceConfigDurations []int32) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceConfigDurations(serviceServiceConfigDurations)
	return o
}

// SetServiceServiceConfigDurations adds the serviceServiceConfigDurations to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceConfigDurations(serviceServiceConfigDurations []int32) {
	o.ServiceServiceConfigDurations = serviceServiceConfigDurations
}

// WithServiceServiceConfigFixedDuration adds the serviceServiceConfigFixedDuration to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceConfigFixedDuration(serviceServiceConfigFixedDuration *int32) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceConfigFixedDuration(serviceServiceConfigFixedDuration)
	return o
}

// SetServiceServiceConfigFixedDuration adds the serviceServiceConfigFixedDuration to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceConfigFixedDuration(serviceServiceConfigFixedDuration *int32) {
	o.ServiceServiceConfigFixedDuration = serviceServiceConfigFixedDuration
}

// WithServiceServiceCreatedAt adds the serviceServiceCreatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceCreatedAt(serviceServiceCreatedAt *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceCreatedAt(serviceServiceCreatedAt)
	return o
}

// SetServiceServiceCreatedAt adds the serviceServiceCreatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceCreatedAt(serviceServiceCreatedAt *string) {
	o.ServiceServiceCreatedAt = serviceServiceCreatedAt
}

// WithServiceServiceCreatedBy adds the serviceServiceCreatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceCreatedBy(serviceServiceCreatedBy *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceCreatedBy(serviceServiceCreatedBy)
	return o
}

// SetServiceServiceCreatedBy adds the serviceServiceCreatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceCreatedBy(serviceServiceCreatedBy *string) {
	o.ServiceServiceCreatedBy = serviceServiceCreatedBy
}

// WithServiceServiceDescription adds the serviceServiceDescription to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceDescription(serviceServiceDescription *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceDescription(serviceServiceDescription)
	return o
}

// SetServiceServiceDescription adds the serviceServiceDescription to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceDescription(serviceServiceDescription *string) {
	o.ServiceServiceDescription = serviceServiceDescription
}

// WithServiceServiceID adds the serviceServiceID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceID(serviceServiceID *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceID(serviceServiceID)
	return o
}

// SetServiceServiceID adds the serviceServiceId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceID(serviceServiceID *string) {
	o.ServiceServiceID = serviceServiceID
}

// WithServiceServiceName adds the serviceServiceName to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceName(serviceServiceName *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceName(serviceServiceName)
	return o
}

// SetServiceServiceName adds the serviceServiceName to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceName(serviceServiceName *string) {
	o.ServiceServiceName = serviceServiceName
}

// WithServiceServiceOrgID adds the serviceServiceOrgID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceOrgID(serviceServiceOrgID *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceOrgID(serviceServiceOrgID)
	return o
}

// SetServiceServiceOrgID adds the serviceServiceOrgId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceOrgID(serviceServiceOrgID *string) {
	o.ServiceServiceOrgID = serviceServiceOrgID
}

// WithServiceServiceRefID adds the serviceServiceRefID to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceRefID(serviceServiceRefID *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceRefID(serviceServiceRefID)
	return o
}

// SetServiceServiceRefID adds the serviceServiceRefId to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceRefID(serviceServiceRefID *string) {
	o.ServiceServiceRefID = serviceServiceRefID
}

// WithServiceServiceUpdatedAt adds the serviceServiceUpdatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceUpdatedAt(serviceServiceUpdatedAt *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceUpdatedAt(serviceServiceUpdatedAt)
	return o
}

// SetServiceServiceUpdatedAt adds the serviceServiceUpdatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceUpdatedAt(serviceServiceUpdatedAt *string) {
	o.ServiceServiceUpdatedAt = serviceServiceUpdatedAt
}

// WithServiceServiceUpdatedBy adds the serviceServiceUpdatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceServiceUpdatedBy(serviceServiceUpdatedBy *string) *SchedulerGetProviderServicesParams {
	o.SetServiceServiceUpdatedBy(serviceServiceUpdatedBy)
	return o
}

// SetServiceServiceUpdatedBy adds the serviceServiceUpdatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceServiceUpdatedBy(serviceServiceUpdatedBy *string) {
	o.ServiceServiceUpdatedBy = serviceServiceUpdatedBy
}

// WithServiceStates adds the serviceStates to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceStates(serviceStates []string) *SchedulerGetProviderServicesParams {
	o.SetServiceStates(serviceStates)
	return o
}

// SetServiceStates adds the serviceStates to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceStates(serviceStates []string) {
	o.ServiceStates = serviceStates
}

// WithServiceTypes adds the serviceTypes to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceTypes(serviceTypes []string) *SchedulerGetProviderServicesParams {
	o.SetServiceTypes(serviceTypes)
	return o
}

// SetServiceTypes adds the serviceTypes to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceTypes(serviceTypes []string) {
	o.ServiceTypes = serviceTypes
}

// WithServiceUpdatedAt adds the serviceUpdatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceUpdatedAt(serviceUpdatedAt *string) *SchedulerGetProviderServicesParams {
	o.SetServiceUpdatedAt(serviceUpdatedAt)
	return o
}

// SetServiceUpdatedAt adds the serviceUpdatedAt to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceUpdatedAt(serviceUpdatedAt *string) {
	o.ServiceUpdatedAt = serviceUpdatedAt
}

// WithServiceUpdatedBy adds the serviceUpdatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) WithServiceUpdatedBy(serviceUpdatedBy *string) *SchedulerGetProviderServicesParams {
	o.SetServiceUpdatedBy(serviceUpdatedBy)
	return o
}

// SetServiceUpdatedBy adds the serviceUpdatedBy to the scheduler get provider services params
func (o *SchedulerGetProviderServicesParams) SetServiceUpdatedBy(serviceUpdatedBy *string) {
	o.ServiceUpdatedBy = serviceUpdatedBy
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetProviderServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// path param provider_id
	if err := r.SetPathParam("provider_id", o.ProviderID); err != nil {
		return err
	}

	if o.ServiceActive != nil {

		// query param service.active
		var qrServiceActive bool

		if o.ServiceActive != nil {
			qrServiceActive = *o.ServiceActive
		}
		qServiceActive := swag.FormatBool(qrServiceActive)
		if qServiceActive != "" {

			if err := r.SetQueryParam("service.active", qServiceActive); err != nil {
				return err
			}
		}
	}

	if o.ServiceCountry != nil {

		// query param service.country
		var qrServiceCountry string

		if o.ServiceCountry != nil {
			qrServiceCountry = *o.ServiceCountry
		}
		qServiceCountry := qrServiceCountry
		if qServiceCountry != "" {

			if err := r.SetQueryParam("service.country", qServiceCountry); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedAt != nil {

		// query param service.created_at
		var qrServiceCreatedAt string

		if o.ServiceCreatedAt != nil {
			qrServiceCreatedAt = *o.ServiceCreatedAt
		}
		qServiceCreatedAt := qrServiceCreatedAt
		if qServiceCreatedAt != "" {

			if err := r.SetQueryParam("service.created_at", qServiceCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceCreatedBy != nil {

		// query param service.created_by
		var qrServiceCreatedBy string

		if o.ServiceCreatedBy != nil {
			qrServiceCreatedBy = *o.ServiceCreatedBy
		}
		qServiceCreatedBy := qrServiceCreatedBy
		if qServiceCreatedBy != "" {

			if err := r.SetQueryParam("service.created_by", qServiceCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceDurations != nil {

		// binding items for service.durations
		joinedServiceDurations := o.bindParamServiceDurations(reg)

		// query array param service.durations
		if err := r.SetQueryParam("service.durations", joinedServiceDurations...); err != nil {
			return err
		}
	}

	if o.ServiceID != nil {

		// query param service.id
		var qrServiceID string

		if o.ServiceID != nil {
			qrServiceID = *o.ServiceID
		}
		qServiceID := qrServiceID
		if qServiceID != "" {

			if err := r.SetQueryParam("service.id", qServiceID); err != nil {
				return err
			}
		}
	}

	if o.ServiceInPerson != nil {

		// query param service.in_person
		var qrServiceInPerson bool

		if o.ServiceInPerson != nil {
			qrServiceInPerson = *o.ServiceInPerson
		}
		qServiceInPerson := swag.FormatBool(qrServiceInPerson)
		if qServiceInPerson != "" {

			if err := r.SetQueryParam("service.in_person", qServiceInPerson); err != nil {
				return err
			}
		}
	}

	if o.ServiceLanguages != nil {

		// binding items for service.languages
		joinedServiceLanguages := o.bindParamServiceLanguages(reg)

		// query array param service.languages
		if err := r.SetQueryParam("service.languages", joinedServiceLanguages...); err != nil {
			return err
		}
	}

	if o.ServiceProviderActive != nil {

		// query param service.provider.active
		var qrServiceProviderActive bool

		if o.ServiceProviderActive != nil {
			qrServiceProviderActive = *o.ServiceProviderActive
		}
		qServiceProviderActive := swag.FormatBool(qrServiceProviderActive)
		if qServiceProviderActive != "" {

			if err := r.SetQueryParam("service.provider.active", qServiceProviderActive); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderCreatedAt != nil {

		// query param service.provider.created_at
		var qrServiceProviderCreatedAt string

		if o.ServiceProviderCreatedAt != nil {
			qrServiceProviderCreatedAt = *o.ServiceProviderCreatedAt
		}
		qServiceProviderCreatedAt := qrServiceProviderCreatedAt
		if qServiceProviderCreatedAt != "" {

			if err := r.SetQueryParam("service.provider.created_at", qServiceProviderCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderCreatedBy != nil {

		// query param service.provider.created_by
		var qrServiceProviderCreatedBy string

		if o.ServiceProviderCreatedBy != nil {
			qrServiceProviderCreatedBy = *o.ServiceProviderCreatedBy
		}
		qServiceProviderCreatedBy := qrServiceProviderCreatedBy
		if qServiceProviderCreatedBy != "" {

			if err := r.SetQueryParam("service.provider.created_by", qServiceProviderCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderGender != nil {

		// query param service.provider.gender
		var qrServiceProviderGender string

		if o.ServiceProviderGender != nil {
			qrServiceProviderGender = *o.ServiceProviderGender
		}
		qServiceProviderGender := qrServiceProviderGender
		if qServiceProviderGender != "" {

			if err := r.SetQueryParam("service.provider.gender", qServiceProviderGender); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderGivenName != nil {

		// query param service.provider.given_name
		var qrServiceProviderGivenName string

		if o.ServiceProviderGivenName != nil {
			qrServiceProviderGivenName = *o.ServiceProviderGivenName
		}
		qServiceProviderGivenName := qrServiceProviderGivenName
		if qServiceProviderGivenName != "" {

			if err := r.SetQueryParam("service.provider.given_name", qServiceProviderGivenName); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderID != nil {

		// query param service.provider.id
		var qrServiceProviderID string

		if o.ServiceProviderID != nil {
			qrServiceProviderID = *o.ServiceProviderID
		}
		qServiceProviderID := qrServiceProviderID
		if qServiceProviderID != "" {

			if err := r.SetQueryParam("service.provider.id", qServiceProviderID); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderOrgID != nil {

		// query param service.provider.org_id
		var qrServiceProviderOrgID string

		if o.ServiceProviderOrgID != nil {
			qrServiceProviderOrgID = *o.ServiceProviderOrgID
		}
		qServiceProviderOrgID := qrServiceProviderOrgID
		if qServiceProviderOrgID != "" {

			if err := r.SetQueryParam("service.provider.org_id", qServiceProviderOrgID); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderPrefix != nil {

		// query param service.provider.prefix
		var qrServiceProviderPrefix string

		if o.ServiceProviderPrefix != nil {
			qrServiceProviderPrefix = *o.ServiceProviderPrefix
		}
		qServiceProviderPrefix := qrServiceProviderPrefix
		if qServiceProviderPrefix != "" {

			if err := r.SetQueryParam("service.provider.prefix", qServiceProviderPrefix); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderRefID != nil {

		// query param service.provider.ref_id
		var qrServiceProviderRefID string

		if o.ServiceProviderRefID != nil {
			qrServiceProviderRefID = *o.ServiceProviderRefID
		}
		qServiceProviderRefID := qrServiceProviderRefID
		if qServiceProviderRefID != "" {

			if err := r.SetQueryParam("service.provider.ref_id", qServiceProviderRefID); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderRole != nil {

		// query param service.provider.role
		var qrServiceProviderRole string

		if o.ServiceProviderRole != nil {
			qrServiceProviderRole = *o.ServiceProviderRole
		}
		qServiceProviderRole := qrServiceProviderRole
		if qServiceProviderRole != "" {

			if err := r.SetQueryParam("service.provider.role", qServiceProviderRole); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderSuffix != nil {

		// query param service.provider.suffix
		var qrServiceProviderSuffix string

		if o.ServiceProviderSuffix != nil {
			qrServiceProviderSuffix = *o.ServiceProviderSuffix
		}
		qServiceProviderSuffix := qrServiceProviderSuffix
		if qServiceProviderSuffix != "" {

			if err := r.SetQueryParam("service.provider.suffix", qServiceProviderSuffix); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderSurname != nil {

		// query param service.provider.surname
		var qrServiceProviderSurname string

		if o.ServiceProviderSurname != nil {
			qrServiceProviderSurname = *o.ServiceProviderSurname
		}
		qServiceProviderSurname := qrServiceProviderSurname
		if qServiceProviderSurname != "" {

			if err := r.SetQueryParam("service.provider.surname", qServiceProviderSurname); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneAbbreviation != nil {

		// query param service.provider.timezone.abbreviation
		var qrServiceProviderTimezoneAbbreviation string

		if o.ServiceProviderTimezoneAbbreviation != nil {
			qrServiceProviderTimezoneAbbreviation = *o.ServiceProviderTimezoneAbbreviation
		}
		qServiceProviderTimezoneAbbreviation := qrServiceProviderTimezoneAbbreviation
		if qServiceProviderTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("service.provider.timezone.abbreviation", qServiceProviderTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneDst != nil {

		// query param service.provider.timezone.dst
		var qrServiceProviderTimezoneDst bool

		if o.ServiceProviderTimezoneDst != nil {
			qrServiceProviderTimezoneDst = *o.ServiceProviderTimezoneDst
		}
		qServiceProviderTimezoneDst := swag.FormatBool(qrServiceProviderTimezoneDst)
		if qServiceProviderTimezoneDst != "" {

			if err := r.SetQueryParam("service.provider.timezone.dst", qServiceProviderTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneGmtOffset != nil {

		// query param service.provider.timezone.gmt_offset
		var qrServiceProviderTimezoneGmtOffset int32

		if o.ServiceProviderTimezoneGmtOffset != nil {
			qrServiceProviderTimezoneGmtOffset = *o.ServiceProviderTimezoneGmtOffset
		}
		qServiceProviderTimezoneGmtOffset := swag.FormatInt32(qrServiceProviderTimezoneGmtOffset)
		if qServiceProviderTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("service.provider.timezone.gmt_offset", qServiceProviderTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneID != nil {

		// query param service.provider.timezone.id
		var qrServiceProviderTimezoneID int32

		if o.ServiceProviderTimezoneID != nil {
			qrServiceProviderTimezoneID = *o.ServiceProviderTimezoneID
		}
		qServiceProviderTimezoneID := swag.FormatInt32(qrServiceProviderTimezoneID)
		if qServiceProviderTimezoneID != "" {

			if err := r.SetQueryParam("service.provider.timezone.id", qServiceProviderTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneTimeStart != nil {

		// query param service.provider.timezone.time_start
		var qrServiceProviderTimezoneTimeStart string

		if o.ServiceProviderTimezoneTimeStart != nil {
			qrServiceProviderTimezoneTimeStart = *o.ServiceProviderTimezoneTimeStart
		}
		qServiceProviderTimezoneTimeStart := qrServiceProviderTimezoneTimeStart
		if qServiceProviderTimezoneTimeStart != "" {

			if err := r.SetQueryParam("service.provider.timezone.time_start", qServiceProviderTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneZoneCountryCode != nil {

		// query param service.provider.timezone.zone.country_code
		var qrServiceProviderTimezoneZoneCountryCode string

		if o.ServiceProviderTimezoneZoneCountryCode != nil {
			qrServiceProviderTimezoneZoneCountryCode = *o.ServiceProviderTimezoneZoneCountryCode
		}
		qServiceProviderTimezoneZoneCountryCode := qrServiceProviderTimezoneZoneCountryCode
		if qServiceProviderTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("service.provider.timezone.zone.country_code", qServiceProviderTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneZoneID != nil {

		// query param service.provider.timezone.zone.id
		var qrServiceProviderTimezoneZoneID int32

		if o.ServiceProviderTimezoneZoneID != nil {
			qrServiceProviderTimezoneZoneID = *o.ServiceProviderTimezoneZoneID
		}
		qServiceProviderTimezoneZoneID := swag.FormatInt32(qrServiceProviderTimezoneZoneID)
		if qServiceProviderTimezoneZoneID != "" {

			if err := r.SetQueryParam("service.provider.timezone.zone.id", qServiceProviderTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderTimezoneZoneName != nil {

		// query param service.provider.timezone.zone.name
		var qrServiceProviderTimezoneZoneName string

		if o.ServiceProviderTimezoneZoneName != nil {
			qrServiceProviderTimezoneZoneName = *o.ServiceProviderTimezoneZoneName
		}
		qServiceProviderTimezoneZoneName := qrServiceProviderTimezoneZoneName
		if qServiceProviderTimezoneZoneName != "" {

			if err := r.SetQueryParam("service.provider.timezone.zone.name", qServiceProviderTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderUpdatedAt != nil {

		// query param service.provider.updated_at
		var qrServiceProviderUpdatedAt string

		if o.ServiceProviderUpdatedAt != nil {
			qrServiceProviderUpdatedAt = *o.ServiceProviderUpdatedAt
		}
		qServiceProviderUpdatedAt := qrServiceProviderUpdatedAt
		if qServiceProviderUpdatedAt != "" {

			if err := r.SetQueryParam("service.provider.updated_at", qServiceProviderUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceProviderUpdatedBy != nil {

		// query param service.provider.updated_by
		var qrServiceProviderUpdatedBy string

		if o.ServiceProviderUpdatedBy != nil {
			qrServiceProviderUpdatedBy = *o.ServiceProviderUpdatedBy
		}
		qServiceProviderUpdatedBy := qrServiceProviderUpdatedBy
		if qServiceProviderUpdatedBy != "" {

			if err := r.SetQueryParam("service.provider.updated_by", qServiceProviderUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceActive != nil {

		// query param service.service.active
		var qrServiceServiceActive bool

		if o.ServiceServiceActive != nil {
			qrServiceServiceActive = *o.ServiceServiceActive
		}
		qServiceServiceActive := swag.FormatBool(qrServiceServiceActive)
		if qServiceServiceActive != "" {

			if err := r.SetQueryParam("service.service.active", qServiceServiceActive); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceConfigDurations != nil {

		// binding items for service.service.config.durations
		joinedServiceServiceConfigDurations := o.bindParamServiceServiceConfigDurations(reg)

		// query array param service.service.config.durations
		if err := r.SetQueryParam("service.service.config.durations", joinedServiceServiceConfigDurations...); err != nil {
			return err
		}
	}

	if o.ServiceServiceConfigFixedDuration != nil {

		// query param service.service.config.fixed_duration
		var qrServiceServiceConfigFixedDuration int32

		if o.ServiceServiceConfigFixedDuration != nil {
			qrServiceServiceConfigFixedDuration = *o.ServiceServiceConfigFixedDuration
		}
		qServiceServiceConfigFixedDuration := swag.FormatInt32(qrServiceServiceConfigFixedDuration)
		if qServiceServiceConfigFixedDuration != "" {

			if err := r.SetQueryParam("service.service.config.fixed_duration", qServiceServiceConfigFixedDuration); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceCreatedAt != nil {

		// query param service.service.created_at
		var qrServiceServiceCreatedAt string

		if o.ServiceServiceCreatedAt != nil {
			qrServiceServiceCreatedAt = *o.ServiceServiceCreatedAt
		}
		qServiceServiceCreatedAt := qrServiceServiceCreatedAt
		if qServiceServiceCreatedAt != "" {

			if err := r.SetQueryParam("service.service.created_at", qServiceServiceCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceCreatedBy != nil {

		// query param service.service.created_by
		var qrServiceServiceCreatedBy string

		if o.ServiceServiceCreatedBy != nil {
			qrServiceServiceCreatedBy = *o.ServiceServiceCreatedBy
		}
		qServiceServiceCreatedBy := qrServiceServiceCreatedBy
		if qServiceServiceCreatedBy != "" {

			if err := r.SetQueryParam("service.service.created_by", qServiceServiceCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceDescription != nil {

		// query param service.service.description
		var qrServiceServiceDescription string

		if o.ServiceServiceDescription != nil {
			qrServiceServiceDescription = *o.ServiceServiceDescription
		}
		qServiceServiceDescription := qrServiceServiceDescription
		if qServiceServiceDescription != "" {

			if err := r.SetQueryParam("service.service.description", qServiceServiceDescription); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceID != nil {

		// query param service.service.id
		var qrServiceServiceID string

		if o.ServiceServiceID != nil {
			qrServiceServiceID = *o.ServiceServiceID
		}
		qServiceServiceID := qrServiceServiceID
		if qServiceServiceID != "" {

			if err := r.SetQueryParam("service.service.id", qServiceServiceID); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceName != nil {

		// query param service.service.name
		var qrServiceServiceName string

		if o.ServiceServiceName != nil {
			qrServiceServiceName = *o.ServiceServiceName
		}
		qServiceServiceName := qrServiceServiceName
		if qServiceServiceName != "" {

			if err := r.SetQueryParam("service.service.name", qServiceServiceName); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceOrgID != nil {

		// query param service.service.org_id
		var qrServiceServiceOrgID string

		if o.ServiceServiceOrgID != nil {
			qrServiceServiceOrgID = *o.ServiceServiceOrgID
		}
		qServiceServiceOrgID := qrServiceServiceOrgID
		if qServiceServiceOrgID != "" {

			if err := r.SetQueryParam("service.service.org_id", qServiceServiceOrgID); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceRefID != nil {

		// query param service.service.ref_id
		var qrServiceServiceRefID string

		if o.ServiceServiceRefID != nil {
			qrServiceServiceRefID = *o.ServiceServiceRefID
		}
		qServiceServiceRefID := qrServiceServiceRefID
		if qServiceServiceRefID != "" {

			if err := r.SetQueryParam("service.service.ref_id", qServiceServiceRefID); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceUpdatedAt != nil {

		// query param service.service.updated_at
		var qrServiceServiceUpdatedAt string

		if o.ServiceServiceUpdatedAt != nil {
			qrServiceServiceUpdatedAt = *o.ServiceServiceUpdatedAt
		}
		qServiceServiceUpdatedAt := qrServiceServiceUpdatedAt
		if qServiceServiceUpdatedAt != "" {

			if err := r.SetQueryParam("service.service.updated_at", qServiceServiceUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceServiceUpdatedBy != nil {

		// query param service.service.updated_by
		var qrServiceServiceUpdatedBy string

		if o.ServiceServiceUpdatedBy != nil {
			qrServiceServiceUpdatedBy = *o.ServiceServiceUpdatedBy
		}
		qServiceServiceUpdatedBy := qrServiceServiceUpdatedBy
		if qServiceServiceUpdatedBy != "" {

			if err := r.SetQueryParam("service.service.updated_by", qServiceServiceUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.ServiceStates != nil {

		// binding items for service.states
		joinedServiceStates := o.bindParamServiceStates(reg)

		// query array param service.states
		if err := r.SetQueryParam("service.states", joinedServiceStates...); err != nil {
			return err
		}
	}

	if o.ServiceTypes != nil {

		// binding items for service.types
		joinedServiceTypes := o.bindParamServiceTypes(reg)

		// query array param service.types
		if err := r.SetQueryParam("service.types", joinedServiceTypes...); err != nil {
			return err
		}
	}

	if o.ServiceUpdatedAt != nil {

		// query param service.updated_at
		var qrServiceUpdatedAt string

		if o.ServiceUpdatedAt != nil {
			qrServiceUpdatedAt = *o.ServiceUpdatedAt
		}
		qServiceUpdatedAt := qrServiceUpdatedAt
		if qServiceUpdatedAt != "" {

			if err := r.SetQueryParam("service.updated_at", qServiceUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.ServiceUpdatedBy != nil {

		// query param service.updated_by
		var qrServiceUpdatedBy string

		if o.ServiceUpdatedBy != nil {
			qrServiceUpdatedBy = *o.ServiceUpdatedBy
		}
		qServiceUpdatedBy := qrServiceUpdatedBy
		if qServiceUpdatedBy != "" {

			if err := r.SetQueryParam("service.updated_by", qServiceUpdatedBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerGetProviderServices binds the parameter ids
func (o *SchedulerGetProviderServicesParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int32

		idsIIV := swag.FormatInt32(idsIIR) // int32 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}

// bindParamSchedulerGetProviderServices binds the parameter service.durations
func (o *SchedulerGetProviderServicesParams) bindParamServiceDurations(formats strfmt.Registry) []string {
	serviceDurationsIR := o.ServiceDurations

	var serviceDurationsIC []string
	for _, serviceDurationsIIR := range serviceDurationsIR { // explode []int32

		serviceDurationsIIV := swag.FormatInt32(serviceDurationsIIR) // int32 as string
		serviceDurationsIC = append(serviceDurationsIC, serviceDurationsIIV)
	}

	// items.CollectionFormat: "multi"
	serviceDurationsIS := swag.JoinByFormat(serviceDurationsIC, "multi")

	return serviceDurationsIS
}

// bindParamSchedulerGetProviderServices binds the parameter service.languages
func (o *SchedulerGetProviderServicesParams) bindParamServiceLanguages(formats strfmt.Registry) []string {
	serviceLanguagesIR := o.ServiceLanguages

	var serviceLanguagesIC []string
	for _, serviceLanguagesIIR := range serviceLanguagesIR { // explode []string

		serviceLanguagesIIV := serviceLanguagesIIR // string as string
		serviceLanguagesIC = append(serviceLanguagesIC, serviceLanguagesIIV)
	}

	// items.CollectionFormat: "multi"
	serviceLanguagesIS := swag.JoinByFormat(serviceLanguagesIC, "multi")

	return serviceLanguagesIS
}

// bindParamSchedulerGetProviderServices binds the parameter service.service.config.durations
func (o *SchedulerGetProviderServicesParams) bindParamServiceServiceConfigDurations(formats strfmt.Registry) []string {
	serviceServiceConfigDurationsIR := o.ServiceServiceConfigDurations

	var serviceServiceConfigDurationsIC []string
	for _, serviceServiceConfigDurationsIIR := range serviceServiceConfigDurationsIR { // explode []int32

		serviceServiceConfigDurationsIIV := swag.FormatInt32(serviceServiceConfigDurationsIIR) // int32 as string
		serviceServiceConfigDurationsIC = append(serviceServiceConfigDurationsIC, serviceServiceConfigDurationsIIV)
	}

	// items.CollectionFormat: "multi"
	serviceServiceConfigDurationsIS := swag.JoinByFormat(serviceServiceConfigDurationsIC, "multi")

	return serviceServiceConfigDurationsIS
}

// bindParamSchedulerGetProviderServices binds the parameter service.states
func (o *SchedulerGetProviderServicesParams) bindParamServiceStates(formats strfmt.Registry) []string {
	serviceStatesIR := o.ServiceStates

	var serviceStatesIC []string
	for _, serviceStatesIIR := range serviceStatesIR { // explode []string

		serviceStatesIIV := serviceStatesIIR // string as string
		serviceStatesIC = append(serviceStatesIC, serviceStatesIIV)
	}

	// items.CollectionFormat: "multi"
	serviceStatesIS := swag.JoinByFormat(serviceStatesIC, "multi")

	return serviceStatesIS
}

// bindParamSchedulerGetProviderServices binds the parameter service.types
func (o *SchedulerGetProviderServicesParams) bindParamServiceTypes(formats strfmt.Registry) []string {
	serviceTypesIR := o.ServiceTypes

	var serviceTypesIC []string
	for _, serviceTypesIIR := range serviceTypesIR { // explode []string

		serviceTypesIIV := serviceTypesIIR // string as string
		serviceTypesIC = append(serviceTypesIC, serviceTypesIIV)
	}

	// items.CollectionFormat: "multi"
	serviceTypesIS := swag.JoinByFormat(serviceTypesIC, "multi")

	return serviceTypesIS
}
