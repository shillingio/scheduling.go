// Code generated by go-swagger; DO NOT EDIT.

package scheduler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSchedulerGetAppointmentsParams creates a new SchedulerGetAppointmentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchedulerGetAppointmentsParams() *SchedulerGetAppointmentsParams {
	return &SchedulerGetAppointmentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchedulerGetAppointmentsParamsWithTimeout creates a new SchedulerGetAppointmentsParams object
// with the ability to set a timeout on a request.
func NewSchedulerGetAppointmentsParamsWithTimeout(timeout time.Duration) *SchedulerGetAppointmentsParams {
	return &SchedulerGetAppointmentsParams{
		timeout: timeout,
	}
}

// NewSchedulerGetAppointmentsParamsWithContext creates a new SchedulerGetAppointmentsParams object
// with the ability to set a context for a request.
func NewSchedulerGetAppointmentsParamsWithContext(ctx context.Context) *SchedulerGetAppointmentsParams {
	return &SchedulerGetAppointmentsParams{
		Context: ctx,
	}
}

// NewSchedulerGetAppointmentsParamsWithHTTPClient creates a new SchedulerGetAppointmentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchedulerGetAppointmentsParamsWithHTTPClient(client *http.Client) *SchedulerGetAppointmentsParams {
	return &SchedulerGetAppointmentsParams{
		HTTPClient: client,
	}
}

/* SchedulerGetAppointmentsParams contains all the parameters to send to the API endpoint
   for the scheduler get appointments operation.

   Typically these are written to a http.Request.
*/
type SchedulerGetAppointmentsParams struct {

	// AppointmentActive.
	AppointmentActive *bool

	// AppointmentCountry.
	AppointmentCountry *string

	// AppointmentCreatedAt.
	AppointmentCreatedAt *string

	// AppointmentCreatedBy.
	AppointmentCreatedBy *string

	/* AppointmentDuration.

	   The duration of the appointment in minutes

	   Format: int32
	*/
	AppointmentDuration *int32

	/* AppointmentEndAt.

	   The end time of the appointment (RFC3339)
	*/
	AppointmentEndAt *string

	/* AppointmentID.

	   UUID of the appointment
	*/
	AppointmentID *string

	/* AppointmentInPerson.

	   If the appointment is in-person and not online
	*/
	AppointmentInPerson *bool

	// AppointmentLanguage.
	AppointmentLanguage *string

	// AppointmentOrganizationID.
	AppointmentOrganizationID *string

	// AppointmentPadding.
	AppointmentPadding *bool

	// AppointmentPatientActive.
	AppointmentPatientActive *bool

	// AppointmentPatientCreatedAt.
	AppointmentPatientCreatedAt *string

	// AppointmentPatientCreatedBy.
	AppointmentPatientCreatedBy *string

	// AppointmentPatientGivenName.
	AppointmentPatientGivenName *string

	// AppointmentPatientID.
	AppointmentPatientID *string

	// AppointmentPatientOrgID.
	AppointmentPatientOrgID *string

	// AppointmentPatientPrefix.
	AppointmentPatientPrefix *string

	// AppointmentPatientRefID.
	AppointmentPatientRefID *string

	// AppointmentPatientSuffix.
	AppointmentPatientSuffix *string

	// AppointmentPatientSurname.
	AppointmentPatientSurname *string

	// AppointmentPatientUpdatedAt.
	AppointmentPatientUpdatedAt *string

	// AppointmentPatientUpdatedBy.
	AppointmentPatientUpdatedBy *string

	// AppointmentPending.
	AppointmentPending *bool

	// AppointmentProviderActive.
	AppointmentProviderActive *bool

	// AppointmentProviderCreatedAt.
	AppointmentProviderCreatedAt *string

	// AppointmentProviderCreatedBy.
	AppointmentProviderCreatedBy *string

	// AppointmentProviderGender.
	AppointmentProviderGender *string

	// AppointmentProviderGivenName.
	AppointmentProviderGivenName *string

	// AppointmentProviderID.
	AppointmentProviderID *string

	// AppointmentProviderOrgID.
	AppointmentProviderOrgID *string

	// AppointmentProviderPrefix.
	AppointmentProviderPrefix *string

	// AppointmentProviderRefID.
	AppointmentProviderRefID *string

	// AppointmentProviderRole.
	AppointmentProviderRole *string

	// AppointmentProviderSuffix.
	AppointmentProviderSuffix *string

	// AppointmentProviderSurname.
	AppointmentProviderSurname *string

	// AppointmentProviderTimezoneAbbreviation.
	AppointmentProviderTimezoneAbbreviation *string

	// AppointmentProviderTimezoneDst.
	AppointmentProviderTimezoneDst *bool

	// AppointmentProviderTimezoneGmtOffset.
	//
	// Format: int32
	AppointmentProviderTimezoneGmtOffset *int32

	// AppointmentProviderTimezoneID.
	//
	// Format: int32
	AppointmentProviderTimezoneID *int32

	// AppointmentProviderTimezoneTimeStart.
	//
	// Format: int64
	AppointmentProviderTimezoneTimeStart *string

	// AppointmentProviderTimezoneZoneCountryCode.
	AppointmentProviderTimezoneZoneCountryCode *string

	// AppointmentProviderTimezoneZoneID.
	//
	// Format: int32
	AppointmentProviderTimezoneZoneID *int32

	// AppointmentProviderTimezoneZoneName.
	AppointmentProviderTimezoneZoneName *string

	// AppointmentProviderUpdatedAt.
	AppointmentProviderUpdatedAt *string

	// AppointmentProviderUpdatedBy.
	AppointmentProviderUpdatedBy *string

	// AppointmentRefID.
	AppointmentRefID *string

	// AppointmentScheduleBlockID.
	AppointmentScheduleBlockID *string

	// AppointmentScheduleID.
	AppointmentScheduleID *string

	// AppointmentServiceActive.
	AppointmentServiceActive *bool

	// AppointmentServiceConfigDurations.
	AppointmentServiceConfigDurations []int32

	// AppointmentServiceConfigFixedDuration.
	//
	// Format: int32
	AppointmentServiceConfigFixedDuration *int32

	// AppointmentServiceCreatedAt.
	AppointmentServiceCreatedAt *string

	// AppointmentServiceCreatedBy.
	AppointmentServiceCreatedBy *string

	// AppointmentServiceDescription.
	AppointmentServiceDescription *string

	// AppointmentServiceID.
	AppointmentServiceID *string

	// AppointmentServiceName.
	AppointmentServiceName *string

	// AppointmentServiceOrgID.
	AppointmentServiceOrgID *string

	// AppointmentServiceRefID.
	AppointmentServiceRefID *string

	// AppointmentServiceUpdatedAt.
	AppointmentServiceUpdatedAt *string

	// AppointmentServiceUpdatedBy.
	AppointmentServiceUpdatedBy *string

	/* AppointmentStartAt.

	   The start time of the appointment (RFC3339)
	*/
	AppointmentStartAt *string

	// AppointmentState.
	AppointmentState *string

	// AppointmentStatus.
	AppointmentStatus *string

	// AppointmentType.
	AppointmentType *string

	// AppointmentUnavailable.
	AppointmentUnavailable *bool

	// AppointmentUpdatedAt.
	AppointmentUpdatedAt *string

	// AppointmentUpdatedBy.
	AppointmentUpdatedBy *string

	// ID.
	ID *string

	// Ids.
	Ids []int32

	// Limit.
	//
	// Format: int32
	Limit *int32

	// Offset.
	//
	// Format: int32
	Offset *int32

	// OrganizationID.
	OrganizationID *string

	// PatientID.
	PatientID *string

	// PatientRefID.
	PatientRefID *string

	// ProviderID.
	ProviderID *string

	// ProviderRefID.
	ProviderRefID *string

	// RangeFrom.
	RangeFrom *string

	// RangeTo.
	RangeTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the scheduler get appointments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetAppointmentsParams) WithDefaults() *SchedulerGetAppointmentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the scheduler get appointments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchedulerGetAppointmentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithTimeout(timeout time.Duration) *SchedulerGetAppointmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithContext(ctx context.Context) *SchedulerGetAppointmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithHTTPClient(client *http.Client) *SchedulerGetAppointmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppointmentActive adds the appointmentActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentActive(appointmentActive *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentActive(appointmentActive)
	return o
}

// SetAppointmentActive adds the appointmentActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentActive(appointmentActive *bool) {
	o.AppointmentActive = appointmentActive
}

// WithAppointmentCountry adds the appointmentCountry to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentCountry(appointmentCountry *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentCountry(appointmentCountry)
	return o
}

// SetAppointmentCountry adds the appointmentCountry to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentCountry(appointmentCountry *string) {
	o.AppointmentCountry = appointmentCountry
}

// WithAppointmentCreatedAt adds the appointmentCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentCreatedAt(appointmentCreatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentCreatedAt(appointmentCreatedAt)
	return o
}

// SetAppointmentCreatedAt adds the appointmentCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentCreatedAt(appointmentCreatedAt *string) {
	o.AppointmentCreatedAt = appointmentCreatedAt
}

// WithAppointmentCreatedBy adds the appointmentCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentCreatedBy(appointmentCreatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentCreatedBy(appointmentCreatedBy)
	return o
}

// SetAppointmentCreatedBy adds the appointmentCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentCreatedBy(appointmentCreatedBy *string) {
	o.AppointmentCreatedBy = appointmentCreatedBy
}

// WithAppointmentDuration adds the appointmentDuration to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentDuration(appointmentDuration *int32) *SchedulerGetAppointmentsParams {
	o.SetAppointmentDuration(appointmentDuration)
	return o
}

// SetAppointmentDuration adds the appointmentDuration to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentDuration(appointmentDuration *int32) {
	o.AppointmentDuration = appointmentDuration
}

// WithAppointmentEndAt adds the appointmentEndAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentEndAt(appointmentEndAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentEndAt(appointmentEndAt)
	return o
}

// SetAppointmentEndAt adds the appointmentEndAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentEndAt(appointmentEndAt *string) {
	o.AppointmentEndAt = appointmentEndAt
}

// WithAppointmentID adds the appointmentID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentID(appointmentID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentID(appointmentID)
	return o
}

// SetAppointmentID adds the appointmentId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentID(appointmentID *string) {
	o.AppointmentID = appointmentID
}

// WithAppointmentInPerson adds the appointmentInPerson to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentInPerson(appointmentInPerson *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentInPerson(appointmentInPerson)
	return o
}

// SetAppointmentInPerson adds the appointmentInPerson to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentInPerson(appointmentInPerson *bool) {
	o.AppointmentInPerson = appointmentInPerson
}

// WithAppointmentLanguage adds the appointmentLanguage to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentLanguage(appointmentLanguage *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentLanguage(appointmentLanguage)
	return o
}

// SetAppointmentLanguage adds the appointmentLanguage to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentLanguage(appointmentLanguage *string) {
	o.AppointmentLanguage = appointmentLanguage
}

// WithAppointmentOrganizationID adds the appointmentOrganizationID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentOrganizationID(appointmentOrganizationID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentOrganizationID(appointmentOrganizationID)
	return o
}

// SetAppointmentOrganizationID adds the appointmentOrganizationId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentOrganizationID(appointmentOrganizationID *string) {
	o.AppointmentOrganizationID = appointmentOrganizationID
}

// WithAppointmentPadding adds the appointmentPadding to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPadding(appointmentPadding *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPadding(appointmentPadding)
	return o
}

// SetAppointmentPadding adds the appointmentPadding to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPadding(appointmentPadding *bool) {
	o.AppointmentPadding = appointmentPadding
}

// WithAppointmentPatientActive adds the appointmentPatientActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientActive(appointmentPatientActive *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientActive(appointmentPatientActive)
	return o
}

// SetAppointmentPatientActive adds the appointmentPatientActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientActive(appointmentPatientActive *bool) {
	o.AppointmentPatientActive = appointmentPatientActive
}

// WithAppointmentPatientCreatedAt adds the appointmentPatientCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientCreatedAt(appointmentPatientCreatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientCreatedAt(appointmentPatientCreatedAt)
	return o
}

// SetAppointmentPatientCreatedAt adds the appointmentPatientCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientCreatedAt(appointmentPatientCreatedAt *string) {
	o.AppointmentPatientCreatedAt = appointmentPatientCreatedAt
}

// WithAppointmentPatientCreatedBy adds the appointmentPatientCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientCreatedBy(appointmentPatientCreatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientCreatedBy(appointmentPatientCreatedBy)
	return o
}

// SetAppointmentPatientCreatedBy adds the appointmentPatientCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientCreatedBy(appointmentPatientCreatedBy *string) {
	o.AppointmentPatientCreatedBy = appointmentPatientCreatedBy
}

// WithAppointmentPatientGivenName adds the appointmentPatientGivenName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientGivenName(appointmentPatientGivenName *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientGivenName(appointmentPatientGivenName)
	return o
}

// SetAppointmentPatientGivenName adds the appointmentPatientGivenName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientGivenName(appointmentPatientGivenName *string) {
	o.AppointmentPatientGivenName = appointmentPatientGivenName
}

// WithAppointmentPatientID adds the appointmentPatientID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientID(appointmentPatientID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientID(appointmentPatientID)
	return o
}

// SetAppointmentPatientID adds the appointmentPatientId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientID(appointmentPatientID *string) {
	o.AppointmentPatientID = appointmentPatientID
}

// WithAppointmentPatientOrgID adds the appointmentPatientOrgID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientOrgID(appointmentPatientOrgID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientOrgID(appointmentPatientOrgID)
	return o
}

// SetAppointmentPatientOrgID adds the appointmentPatientOrgId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientOrgID(appointmentPatientOrgID *string) {
	o.AppointmentPatientOrgID = appointmentPatientOrgID
}

// WithAppointmentPatientPrefix adds the appointmentPatientPrefix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientPrefix(appointmentPatientPrefix *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientPrefix(appointmentPatientPrefix)
	return o
}

// SetAppointmentPatientPrefix adds the appointmentPatientPrefix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientPrefix(appointmentPatientPrefix *string) {
	o.AppointmentPatientPrefix = appointmentPatientPrefix
}

// WithAppointmentPatientRefID adds the appointmentPatientRefID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientRefID(appointmentPatientRefID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientRefID(appointmentPatientRefID)
	return o
}

// SetAppointmentPatientRefID adds the appointmentPatientRefId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientRefID(appointmentPatientRefID *string) {
	o.AppointmentPatientRefID = appointmentPatientRefID
}

// WithAppointmentPatientSuffix adds the appointmentPatientSuffix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientSuffix(appointmentPatientSuffix *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientSuffix(appointmentPatientSuffix)
	return o
}

// SetAppointmentPatientSuffix adds the appointmentPatientSuffix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientSuffix(appointmentPatientSuffix *string) {
	o.AppointmentPatientSuffix = appointmentPatientSuffix
}

// WithAppointmentPatientSurname adds the appointmentPatientSurname to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientSurname(appointmentPatientSurname *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientSurname(appointmentPatientSurname)
	return o
}

// SetAppointmentPatientSurname adds the appointmentPatientSurname to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientSurname(appointmentPatientSurname *string) {
	o.AppointmentPatientSurname = appointmentPatientSurname
}

// WithAppointmentPatientUpdatedAt adds the appointmentPatientUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientUpdatedAt(appointmentPatientUpdatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientUpdatedAt(appointmentPatientUpdatedAt)
	return o
}

// SetAppointmentPatientUpdatedAt adds the appointmentPatientUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientUpdatedAt(appointmentPatientUpdatedAt *string) {
	o.AppointmentPatientUpdatedAt = appointmentPatientUpdatedAt
}

// WithAppointmentPatientUpdatedBy adds the appointmentPatientUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPatientUpdatedBy(appointmentPatientUpdatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPatientUpdatedBy(appointmentPatientUpdatedBy)
	return o
}

// SetAppointmentPatientUpdatedBy adds the appointmentPatientUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPatientUpdatedBy(appointmentPatientUpdatedBy *string) {
	o.AppointmentPatientUpdatedBy = appointmentPatientUpdatedBy
}

// WithAppointmentPending adds the appointmentPending to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentPending(appointmentPending *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentPending(appointmentPending)
	return o
}

// SetAppointmentPending adds the appointmentPending to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentPending(appointmentPending *bool) {
	o.AppointmentPending = appointmentPending
}

// WithAppointmentProviderActive adds the appointmentProviderActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderActive(appointmentProviderActive *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderActive(appointmentProviderActive)
	return o
}

// SetAppointmentProviderActive adds the appointmentProviderActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderActive(appointmentProviderActive *bool) {
	o.AppointmentProviderActive = appointmentProviderActive
}

// WithAppointmentProviderCreatedAt adds the appointmentProviderCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderCreatedAt(appointmentProviderCreatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderCreatedAt(appointmentProviderCreatedAt)
	return o
}

// SetAppointmentProviderCreatedAt adds the appointmentProviderCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderCreatedAt(appointmentProviderCreatedAt *string) {
	o.AppointmentProviderCreatedAt = appointmentProviderCreatedAt
}

// WithAppointmentProviderCreatedBy adds the appointmentProviderCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderCreatedBy(appointmentProviderCreatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderCreatedBy(appointmentProviderCreatedBy)
	return o
}

// SetAppointmentProviderCreatedBy adds the appointmentProviderCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderCreatedBy(appointmentProviderCreatedBy *string) {
	o.AppointmentProviderCreatedBy = appointmentProviderCreatedBy
}

// WithAppointmentProviderGender adds the appointmentProviderGender to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderGender(appointmentProviderGender *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderGender(appointmentProviderGender)
	return o
}

// SetAppointmentProviderGender adds the appointmentProviderGender to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderGender(appointmentProviderGender *string) {
	o.AppointmentProviderGender = appointmentProviderGender
}

// WithAppointmentProviderGivenName adds the appointmentProviderGivenName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderGivenName(appointmentProviderGivenName *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderGivenName(appointmentProviderGivenName)
	return o
}

// SetAppointmentProviderGivenName adds the appointmentProviderGivenName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderGivenName(appointmentProviderGivenName *string) {
	o.AppointmentProviderGivenName = appointmentProviderGivenName
}

// WithAppointmentProviderID adds the appointmentProviderID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderID(appointmentProviderID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderID(appointmentProviderID)
	return o
}

// SetAppointmentProviderID adds the appointmentProviderId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderID(appointmentProviderID *string) {
	o.AppointmentProviderID = appointmentProviderID
}

// WithAppointmentProviderOrgID adds the appointmentProviderOrgID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderOrgID(appointmentProviderOrgID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderOrgID(appointmentProviderOrgID)
	return o
}

// SetAppointmentProviderOrgID adds the appointmentProviderOrgId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderOrgID(appointmentProviderOrgID *string) {
	o.AppointmentProviderOrgID = appointmentProviderOrgID
}

// WithAppointmentProviderPrefix adds the appointmentProviderPrefix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderPrefix(appointmentProviderPrefix *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderPrefix(appointmentProviderPrefix)
	return o
}

// SetAppointmentProviderPrefix adds the appointmentProviderPrefix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderPrefix(appointmentProviderPrefix *string) {
	o.AppointmentProviderPrefix = appointmentProviderPrefix
}

// WithAppointmentProviderRefID adds the appointmentProviderRefID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderRefID(appointmentProviderRefID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderRefID(appointmentProviderRefID)
	return o
}

// SetAppointmentProviderRefID adds the appointmentProviderRefId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderRefID(appointmentProviderRefID *string) {
	o.AppointmentProviderRefID = appointmentProviderRefID
}

// WithAppointmentProviderRole adds the appointmentProviderRole to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderRole(appointmentProviderRole *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderRole(appointmentProviderRole)
	return o
}

// SetAppointmentProviderRole adds the appointmentProviderRole to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderRole(appointmentProviderRole *string) {
	o.AppointmentProviderRole = appointmentProviderRole
}

// WithAppointmentProviderSuffix adds the appointmentProviderSuffix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderSuffix(appointmentProviderSuffix *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderSuffix(appointmentProviderSuffix)
	return o
}

// SetAppointmentProviderSuffix adds the appointmentProviderSuffix to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderSuffix(appointmentProviderSuffix *string) {
	o.AppointmentProviderSuffix = appointmentProviderSuffix
}

// WithAppointmentProviderSurname adds the appointmentProviderSurname to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderSurname(appointmentProviderSurname *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderSurname(appointmentProviderSurname)
	return o
}

// SetAppointmentProviderSurname adds the appointmentProviderSurname to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderSurname(appointmentProviderSurname *string) {
	o.AppointmentProviderSurname = appointmentProviderSurname
}

// WithAppointmentProviderTimezoneAbbreviation adds the appointmentProviderTimezoneAbbreviation to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneAbbreviation(appointmentProviderTimezoneAbbreviation *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneAbbreviation(appointmentProviderTimezoneAbbreviation)
	return o
}

// SetAppointmentProviderTimezoneAbbreviation adds the appointmentProviderTimezoneAbbreviation to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneAbbreviation(appointmentProviderTimezoneAbbreviation *string) {
	o.AppointmentProviderTimezoneAbbreviation = appointmentProviderTimezoneAbbreviation
}

// WithAppointmentProviderTimezoneDst adds the appointmentProviderTimezoneDst to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneDst(appointmentProviderTimezoneDst *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneDst(appointmentProviderTimezoneDst)
	return o
}

// SetAppointmentProviderTimezoneDst adds the appointmentProviderTimezoneDst to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneDst(appointmentProviderTimezoneDst *bool) {
	o.AppointmentProviderTimezoneDst = appointmentProviderTimezoneDst
}

// WithAppointmentProviderTimezoneGmtOffset adds the appointmentProviderTimezoneGmtOffset to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneGmtOffset(appointmentProviderTimezoneGmtOffset *int32) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneGmtOffset(appointmentProviderTimezoneGmtOffset)
	return o
}

// SetAppointmentProviderTimezoneGmtOffset adds the appointmentProviderTimezoneGmtOffset to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneGmtOffset(appointmentProviderTimezoneGmtOffset *int32) {
	o.AppointmentProviderTimezoneGmtOffset = appointmentProviderTimezoneGmtOffset
}

// WithAppointmentProviderTimezoneID adds the appointmentProviderTimezoneID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneID(appointmentProviderTimezoneID *int32) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneID(appointmentProviderTimezoneID)
	return o
}

// SetAppointmentProviderTimezoneID adds the appointmentProviderTimezoneId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneID(appointmentProviderTimezoneID *int32) {
	o.AppointmentProviderTimezoneID = appointmentProviderTimezoneID
}

// WithAppointmentProviderTimezoneTimeStart adds the appointmentProviderTimezoneTimeStart to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneTimeStart(appointmentProviderTimezoneTimeStart *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneTimeStart(appointmentProviderTimezoneTimeStart)
	return o
}

// SetAppointmentProviderTimezoneTimeStart adds the appointmentProviderTimezoneTimeStart to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneTimeStart(appointmentProviderTimezoneTimeStart *string) {
	o.AppointmentProviderTimezoneTimeStart = appointmentProviderTimezoneTimeStart
}

// WithAppointmentProviderTimezoneZoneCountryCode adds the appointmentProviderTimezoneZoneCountryCode to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneZoneCountryCode(appointmentProviderTimezoneZoneCountryCode *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneZoneCountryCode(appointmentProviderTimezoneZoneCountryCode)
	return o
}

// SetAppointmentProviderTimezoneZoneCountryCode adds the appointmentProviderTimezoneZoneCountryCode to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneZoneCountryCode(appointmentProviderTimezoneZoneCountryCode *string) {
	o.AppointmentProviderTimezoneZoneCountryCode = appointmentProviderTimezoneZoneCountryCode
}

// WithAppointmentProviderTimezoneZoneID adds the appointmentProviderTimezoneZoneID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneZoneID(appointmentProviderTimezoneZoneID *int32) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneZoneID(appointmentProviderTimezoneZoneID)
	return o
}

// SetAppointmentProviderTimezoneZoneID adds the appointmentProviderTimezoneZoneId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneZoneID(appointmentProviderTimezoneZoneID *int32) {
	o.AppointmentProviderTimezoneZoneID = appointmentProviderTimezoneZoneID
}

// WithAppointmentProviderTimezoneZoneName adds the appointmentProviderTimezoneZoneName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderTimezoneZoneName(appointmentProviderTimezoneZoneName *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderTimezoneZoneName(appointmentProviderTimezoneZoneName)
	return o
}

// SetAppointmentProviderTimezoneZoneName adds the appointmentProviderTimezoneZoneName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderTimezoneZoneName(appointmentProviderTimezoneZoneName *string) {
	o.AppointmentProviderTimezoneZoneName = appointmentProviderTimezoneZoneName
}

// WithAppointmentProviderUpdatedAt adds the appointmentProviderUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderUpdatedAt(appointmentProviderUpdatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderUpdatedAt(appointmentProviderUpdatedAt)
	return o
}

// SetAppointmentProviderUpdatedAt adds the appointmentProviderUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderUpdatedAt(appointmentProviderUpdatedAt *string) {
	o.AppointmentProviderUpdatedAt = appointmentProviderUpdatedAt
}

// WithAppointmentProviderUpdatedBy adds the appointmentProviderUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentProviderUpdatedBy(appointmentProviderUpdatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentProviderUpdatedBy(appointmentProviderUpdatedBy)
	return o
}

// SetAppointmentProviderUpdatedBy adds the appointmentProviderUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentProviderUpdatedBy(appointmentProviderUpdatedBy *string) {
	o.AppointmentProviderUpdatedBy = appointmentProviderUpdatedBy
}

// WithAppointmentRefID adds the appointmentRefID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentRefID(appointmentRefID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentRefID(appointmentRefID)
	return o
}

// SetAppointmentRefID adds the appointmentRefId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentRefID(appointmentRefID *string) {
	o.AppointmentRefID = appointmentRefID
}

// WithAppointmentScheduleBlockID adds the appointmentScheduleBlockID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentScheduleBlockID(appointmentScheduleBlockID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentScheduleBlockID(appointmentScheduleBlockID)
	return o
}

// SetAppointmentScheduleBlockID adds the appointmentScheduleBlockId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentScheduleBlockID(appointmentScheduleBlockID *string) {
	o.AppointmentScheduleBlockID = appointmentScheduleBlockID
}

// WithAppointmentScheduleID adds the appointmentScheduleID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentScheduleID(appointmentScheduleID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentScheduleID(appointmentScheduleID)
	return o
}

// SetAppointmentScheduleID adds the appointmentScheduleId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentScheduleID(appointmentScheduleID *string) {
	o.AppointmentScheduleID = appointmentScheduleID
}

// WithAppointmentServiceActive adds the appointmentServiceActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceActive(appointmentServiceActive *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceActive(appointmentServiceActive)
	return o
}

// SetAppointmentServiceActive adds the appointmentServiceActive to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceActive(appointmentServiceActive *bool) {
	o.AppointmentServiceActive = appointmentServiceActive
}

// WithAppointmentServiceConfigDurations adds the appointmentServiceConfigDurations to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceConfigDurations(appointmentServiceConfigDurations []int32) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceConfigDurations(appointmentServiceConfigDurations)
	return o
}

// SetAppointmentServiceConfigDurations adds the appointmentServiceConfigDurations to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceConfigDurations(appointmentServiceConfigDurations []int32) {
	o.AppointmentServiceConfigDurations = appointmentServiceConfigDurations
}

// WithAppointmentServiceConfigFixedDuration adds the appointmentServiceConfigFixedDuration to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceConfigFixedDuration(appointmentServiceConfigFixedDuration *int32) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceConfigFixedDuration(appointmentServiceConfigFixedDuration)
	return o
}

// SetAppointmentServiceConfigFixedDuration adds the appointmentServiceConfigFixedDuration to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceConfigFixedDuration(appointmentServiceConfigFixedDuration *int32) {
	o.AppointmentServiceConfigFixedDuration = appointmentServiceConfigFixedDuration
}

// WithAppointmentServiceCreatedAt adds the appointmentServiceCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceCreatedAt(appointmentServiceCreatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceCreatedAt(appointmentServiceCreatedAt)
	return o
}

// SetAppointmentServiceCreatedAt adds the appointmentServiceCreatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceCreatedAt(appointmentServiceCreatedAt *string) {
	o.AppointmentServiceCreatedAt = appointmentServiceCreatedAt
}

// WithAppointmentServiceCreatedBy adds the appointmentServiceCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceCreatedBy(appointmentServiceCreatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceCreatedBy(appointmentServiceCreatedBy)
	return o
}

// SetAppointmentServiceCreatedBy adds the appointmentServiceCreatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceCreatedBy(appointmentServiceCreatedBy *string) {
	o.AppointmentServiceCreatedBy = appointmentServiceCreatedBy
}

// WithAppointmentServiceDescription adds the appointmentServiceDescription to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceDescription(appointmentServiceDescription *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceDescription(appointmentServiceDescription)
	return o
}

// SetAppointmentServiceDescription adds the appointmentServiceDescription to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceDescription(appointmentServiceDescription *string) {
	o.AppointmentServiceDescription = appointmentServiceDescription
}

// WithAppointmentServiceID adds the appointmentServiceID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceID(appointmentServiceID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceID(appointmentServiceID)
	return o
}

// SetAppointmentServiceID adds the appointmentServiceId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceID(appointmentServiceID *string) {
	o.AppointmentServiceID = appointmentServiceID
}

// WithAppointmentServiceName adds the appointmentServiceName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceName(appointmentServiceName *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceName(appointmentServiceName)
	return o
}

// SetAppointmentServiceName adds the appointmentServiceName to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceName(appointmentServiceName *string) {
	o.AppointmentServiceName = appointmentServiceName
}

// WithAppointmentServiceOrgID adds the appointmentServiceOrgID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceOrgID(appointmentServiceOrgID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceOrgID(appointmentServiceOrgID)
	return o
}

// SetAppointmentServiceOrgID adds the appointmentServiceOrgId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceOrgID(appointmentServiceOrgID *string) {
	o.AppointmentServiceOrgID = appointmentServiceOrgID
}

// WithAppointmentServiceRefID adds the appointmentServiceRefID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceRefID(appointmentServiceRefID *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceRefID(appointmentServiceRefID)
	return o
}

// SetAppointmentServiceRefID adds the appointmentServiceRefId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceRefID(appointmentServiceRefID *string) {
	o.AppointmentServiceRefID = appointmentServiceRefID
}

// WithAppointmentServiceUpdatedAt adds the appointmentServiceUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceUpdatedAt(appointmentServiceUpdatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceUpdatedAt(appointmentServiceUpdatedAt)
	return o
}

// SetAppointmentServiceUpdatedAt adds the appointmentServiceUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceUpdatedAt(appointmentServiceUpdatedAt *string) {
	o.AppointmentServiceUpdatedAt = appointmentServiceUpdatedAt
}

// WithAppointmentServiceUpdatedBy adds the appointmentServiceUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentServiceUpdatedBy(appointmentServiceUpdatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentServiceUpdatedBy(appointmentServiceUpdatedBy)
	return o
}

// SetAppointmentServiceUpdatedBy adds the appointmentServiceUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentServiceUpdatedBy(appointmentServiceUpdatedBy *string) {
	o.AppointmentServiceUpdatedBy = appointmentServiceUpdatedBy
}

// WithAppointmentStartAt adds the appointmentStartAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentStartAt(appointmentStartAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentStartAt(appointmentStartAt)
	return o
}

// SetAppointmentStartAt adds the appointmentStartAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentStartAt(appointmentStartAt *string) {
	o.AppointmentStartAt = appointmentStartAt
}

// WithAppointmentState adds the appointmentState to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentState(appointmentState *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentState(appointmentState)
	return o
}

// SetAppointmentState adds the appointmentState to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentState(appointmentState *string) {
	o.AppointmentState = appointmentState
}

// WithAppointmentStatus adds the appointmentStatus to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentStatus(appointmentStatus *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentStatus(appointmentStatus)
	return o
}

// SetAppointmentStatus adds the appointmentStatus to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentStatus(appointmentStatus *string) {
	o.AppointmentStatus = appointmentStatus
}

// WithAppointmentType adds the appointmentType to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentType(appointmentType *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentType(appointmentType)
	return o
}

// SetAppointmentType adds the appointmentType to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentType(appointmentType *string) {
	o.AppointmentType = appointmentType
}

// WithAppointmentUnavailable adds the appointmentUnavailable to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentUnavailable(appointmentUnavailable *bool) *SchedulerGetAppointmentsParams {
	o.SetAppointmentUnavailable(appointmentUnavailable)
	return o
}

// SetAppointmentUnavailable adds the appointmentUnavailable to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentUnavailable(appointmentUnavailable *bool) {
	o.AppointmentUnavailable = appointmentUnavailable
}

// WithAppointmentUpdatedAt adds the appointmentUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentUpdatedAt(appointmentUpdatedAt *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentUpdatedAt(appointmentUpdatedAt)
	return o
}

// SetAppointmentUpdatedAt adds the appointmentUpdatedAt to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentUpdatedAt(appointmentUpdatedAt *string) {
	o.AppointmentUpdatedAt = appointmentUpdatedAt
}

// WithAppointmentUpdatedBy adds the appointmentUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithAppointmentUpdatedBy(appointmentUpdatedBy *string) *SchedulerGetAppointmentsParams {
	o.SetAppointmentUpdatedBy(appointmentUpdatedBy)
	return o
}

// SetAppointmentUpdatedBy adds the appointmentUpdatedBy to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetAppointmentUpdatedBy(appointmentUpdatedBy *string) {
	o.AppointmentUpdatedBy = appointmentUpdatedBy
}

// WithID adds the id to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithID(id *string) *SchedulerGetAppointmentsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetID(id *string) {
	o.ID = id
}

// WithIds adds the ids to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithIds(ids []int32) *SchedulerGetAppointmentsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetIds(ids []int32) {
	o.Ids = ids
}

// WithLimit adds the limit to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithLimit(limit *int32) *SchedulerGetAppointmentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithOffset(offset *int32) *SchedulerGetAppointmentsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithOrganizationID(organizationID *string) *SchedulerGetAppointmentsParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithPatientID adds the patientID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithPatientID(patientID *string) *SchedulerGetAppointmentsParams {
	o.SetPatientID(patientID)
	return o
}

// SetPatientID adds the patientId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetPatientID(patientID *string) {
	o.PatientID = patientID
}

// WithPatientRefID adds the patientRefID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithPatientRefID(patientRefID *string) *SchedulerGetAppointmentsParams {
	o.SetPatientRefID(patientRefID)
	return o
}

// SetPatientRefID adds the patientRefId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetPatientRefID(patientRefID *string) {
	o.PatientRefID = patientRefID
}

// WithProviderID adds the providerID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithProviderID(providerID *string) *SchedulerGetAppointmentsParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetProviderID(providerID *string) {
	o.ProviderID = providerID
}

// WithProviderRefID adds the providerRefID to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithProviderRefID(providerRefID *string) *SchedulerGetAppointmentsParams {
	o.SetProviderRefID(providerRefID)
	return o
}

// SetProviderRefID adds the providerRefId to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetProviderRefID(providerRefID *string) {
	o.ProviderRefID = providerRefID
}

// WithRangeFrom adds the rangeFrom to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithRangeFrom(rangeFrom *string) *SchedulerGetAppointmentsParams {
	o.SetRangeFrom(rangeFrom)
	return o
}

// SetRangeFrom adds the rangeFrom to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetRangeFrom(rangeFrom *string) {
	o.RangeFrom = rangeFrom
}

// WithRangeTo adds the rangeTo to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) WithRangeTo(rangeTo *string) *SchedulerGetAppointmentsParams {
	o.SetRangeTo(rangeTo)
	return o
}

// SetRangeTo adds the rangeTo to the scheduler get appointments params
func (o *SchedulerGetAppointmentsParams) SetRangeTo(rangeTo *string) {
	o.RangeTo = rangeTo
}

// WriteToRequest writes these params to a swagger request
func (o *SchedulerGetAppointmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppointmentActive != nil {

		// query param appointment.active
		var qrAppointmentActive bool

		if o.AppointmentActive != nil {
			qrAppointmentActive = *o.AppointmentActive
		}
		qAppointmentActive := swag.FormatBool(qrAppointmentActive)
		if qAppointmentActive != "" {

			if err := r.SetQueryParam("appointment.active", qAppointmentActive); err != nil {
				return err
			}
		}
	}

	if o.AppointmentCountry != nil {

		// query param appointment.country
		var qrAppointmentCountry string

		if o.AppointmentCountry != nil {
			qrAppointmentCountry = *o.AppointmentCountry
		}
		qAppointmentCountry := qrAppointmentCountry
		if qAppointmentCountry != "" {

			if err := r.SetQueryParam("appointment.country", qAppointmentCountry); err != nil {
				return err
			}
		}
	}

	if o.AppointmentCreatedAt != nil {

		// query param appointment.created_at
		var qrAppointmentCreatedAt string

		if o.AppointmentCreatedAt != nil {
			qrAppointmentCreatedAt = *o.AppointmentCreatedAt
		}
		qAppointmentCreatedAt := qrAppointmentCreatedAt
		if qAppointmentCreatedAt != "" {

			if err := r.SetQueryParam("appointment.created_at", qAppointmentCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentCreatedBy != nil {

		// query param appointment.created_by
		var qrAppointmentCreatedBy string

		if o.AppointmentCreatedBy != nil {
			qrAppointmentCreatedBy = *o.AppointmentCreatedBy
		}
		qAppointmentCreatedBy := qrAppointmentCreatedBy
		if qAppointmentCreatedBy != "" {

			if err := r.SetQueryParam("appointment.created_by", qAppointmentCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.AppointmentDuration != nil {

		// query param appointment.duration
		var qrAppointmentDuration int32

		if o.AppointmentDuration != nil {
			qrAppointmentDuration = *o.AppointmentDuration
		}
		qAppointmentDuration := swag.FormatInt32(qrAppointmentDuration)
		if qAppointmentDuration != "" {

			if err := r.SetQueryParam("appointment.duration", qAppointmentDuration); err != nil {
				return err
			}
		}
	}

	if o.AppointmentEndAt != nil {

		// query param appointment.end_at
		var qrAppointmentEndAt string

		if o.AppointmentEndAt != nil {
			qrAppointmentEndAt = *o.AppointmentEndAt
		}
		qAppointmentEndAt := qrAppointmentEndAt
		if qAppointmentEndAt != "" {

			if err := r.SetQueryParam("appointment.end_at", qAppointmentEndAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentID != nil {

		// query param appointment.id
		var qrAppointmentID string

		if o.AppointmentID != nil {
			qrAppointmentID = *o.AppointmentID
		}
		qAppointmentID := qrAppointmentID
		if qAppointmentID != "" {

			if err := r.SetQueryParam("appointment.id", qAppointmentID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentInPerson != nil {

		// query param appointment.in_person
		var qrAppointmentInPerson bool

		if o.AppointmentInPerson != nil {
			qrAppointmentInPerson = *o.AppointmentInPerson
		}
		qAppointmentInPerson := swag.FormatBool(qrAppointmentInPerson)
		if qAppointmentInPerson != "" {

			if err := r.SetQueryParam("appointment.in_person", qAppointmentInPerson); err != nil {
				return err
			}
		}
	}

	if o.AppointmentLanguage != nil {

		// query param appointment.language
		var qrAppointmentLanguage string

		if o.AppointmentLanguage != nil {
			qrAppointmentLanguage = *o.AppointmentLanguage
		}
		qAppointmentLanguage := qrAppointmentLanguage
		if qAppointmentLanguage != "" {

			if err := r.SetQueryParam("appointment.language", qAppointmentLanguage); err != nil {
				return err
			}
		}
	}

	if o.AppointmentOrganizationID != nil {

		// query param appointment.organization_id
		var qrAppointmentOrganizationID string

		if o.AppointmentOrganizationID != nil {
			qrAppointmentOrganizationID = *o.AppointmentOrganizationID
		}
		qAppointmentOrganizationID := qrAppointmentOrganizationID
		if qAppointmentOrganizationID != "" {

			if err := r.SetQueryParam("appointment.organization_id", qAppointmentOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPadding != nil {

		// query param appointment.padding
		var qrAppointmentPadding bool

		if o.AppointmentPadding != nil {
			qrAppointmentPadding = *o.AppointmentPadding
		}
		qAppointmentPadding := swag.FormatBool(qrAppointmentPadding)
		if qAppointmentPadding != "" {

			if err := r.SetQueryParam("appointment.padding", qAppointmentPadding); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientActive != nil {

		// query param appointment.patient.active
		var qrAppointmentPatientActive bool

		if o.AppointmentPatientActive != nil {
			qrAppointmentPatientActive = *o.AppointmentPatientActive
		}
		qAppointmentPatientActive := swag.FormatBool(qrAppointmentPatientActive)
		if qAppointmentPatientActive != "" {

			if err := r.SetQueryParam("appointment.patient.active", qAppointmentPatientActive); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientCreatedAt != nil {

		// query param appointment.patient.created_at
		var qrAppointmentPatientCreatedAt string

		if o.AppointmentPatientCreatedAt != nil {
			qrAppointmentPatientCreatedAt = *o.AppointmentPatientCreatedAt
		}
		qAppointmentPatientCreatedAt := qrAppointmentPatientCreatedAt
		if qAppointmentPatientCreatedAt != "" {

			if err := r.SetQueryParam("appointment.patient.created_at", qAppointmentPatientCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientCreatedBy != nil {

		// query param appointment.patient.created_by
		var qrAppointmentPatientCreatedBy string

		if o.AppointmentPatientCreatedBy != nil {
			qrAppointmentPatientCreatedBy = *o.AppointmentPatientCreatedBy
		}
		qAppointmentPatientCreatedBy := qrAppointmentPatientCreatedBy
		if qAppointmentPatientCreatedBy != "" {

			if err := r.SetQueryParam("appointment.patient.created_by", qAppointmentPatientCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientGivenName != nil {

		// query param appointment.patient.given_name
		var qrAppointmentPatientGivenName string

		if o.AppointmentPatientGivenName != nil {
			qrAppointmentPatientGivenName = *o.AppointmentPatientGivenName
		}
		qAppointmentPatientGivenName := qrAppointmentPatientGivenName
		if qAppointmentPatientGivenName != "" {

			if err := r.SetQueryParam("appointment.patient.given_name", qAppointmentPatientGivenName); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientID != nil {

		// query param appointment.patient.id
		var qrAppointmentPatientID string

		if o.AppointmentPatientID != nil {
			qrAppointmentPatientID = *o.AppointmentPatientID
		}
		qAppointmentPatientID := qrAppointmentPatientID
		if qAppointmentPatientID != "" {

			if err := r.SetQueryParam("appointment.patient.id", qAppointmentPatientID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientOrgID != nil {

		// query param appointment.patient.org_id
		var qrAppointmentPatientOrgID string

		if o.AppointmentPatientOrgID != nil {
			qrAppointmentPatientOrgID = *o.AppointmentPatientOrgID
		}
		qAppointmentPatientOrgID := qrAppointmentPatientOrgID
		if qAppointmentPatientOrgID != "" {

			if err := r.SetQueryParam("appointment.patient.org_id", qAppointmentPatientOrgID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientPrefix != nil {

		// query param appointment.patient.prefix
		var qrAppointmentPatientPrefix string

		if o.AppointmentPatientPrefix != nil {
			qrAppointmentPatientPrefix = *o.AppointmentPatientPrefix
		}
		qAppointmentPatientPrefix := qrAppointmentPatientPrefix
		if qAppointmentPatientPrefix != "" {

			if err := r.SetQueryParam("appointment.patient.prefix", qAppointmentPatientPrefix); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientRefID != nil {

		// query param appointment.patient.ref_id
		var qrAppointmentPatientRefID string

		if o.AppointmentPatientRefID != nil {
			qrAppointmentPatientRefID = *o.AppointmentPatientRefID
		}
		qAppointmentPatientRefID := qrAppointmentPatientRefID
		if qAppointmentPatientRefID != "" {

			if err := r.SetQueryParam("appointment.patient.ref_id", qAppointmentPatientRefID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientSuffix != nil {

		// query param appointment.patient.suffix
		var qrAppointmentPatientSuffix string

		if o.AppointmentPatientSuffix != nil {
			qrAppointmentPatientSuffix = *o.AppointmentPatientSuffix
		}
		qAppointmentPatientSuffix := qrAppointmentPatientSuffix
		if qAppointmentPatientSuffix != "" {

			if err := r.SetQueryParam("appointment.patient.suffix", qAppointmentPatientSuffix); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientSurname != nil {

		// query param appointment.patient.surname
		var qrAppointmentPatientSurname string

		if o.AppointmentPatientSurname != nil {
			qrAppointmentPatientSurname = *o.AppointmentPatientSurname
		}
		qAppointmentPatientSurname := qrAppointmentPatientSurname
		if qAppointmentPatientSurname != "" {

			if err := r.SetQueryParam("appointment.patient.surname", qAppointmentPatientSurname); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientUpdatedAt != nil {

		// query param appointment.patient.updated_at
		var qrAppointmentPatientUpdatedAt string

		if o.AppointmentPatientUpdatedAt != nil {
			qrAppointmentPatientUpdatedAt = *o.AppointmentPatientUpdatedAt
		}
		qAppointmentPatientUpdatedAt := qrAppointmentPatientUpdatedAt
		if qAppointmentPatientUpdatedAt != "" {

			if err := r.SetQueryParam("appointment.patient.updated_at", qAppointmentPatientUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPatientUpdatedBy != nil {

		// query param appointment.patient.updated_by
		var qrAppointmentPatientUpdatedBy string

		if o.AppointmentPatientUpdatedBy != nil {
			qrAppointmentPatientUpdatedBy = *o.AppointmentPatientUpdatedBy
		}
		qAppointmentPatientUpdatedBy := qrAppointmentPatientUpdatedBy
		if qAppointmentPatientUpdatedBy != "" {

			if err := r.SetQueryParam("appointment.patient.updated_by", qAppointmentPatientUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.AppointmentPending != nil {

		// query param appointment.pending
		var qrAppointmentPending bool

		if o.AppointmentPending != nil {
			qrAppointmentPending = *o.AppointmentPending
		}
		qAppointmentPending := swag.FormatBool(qrAppointmentPending)
		if qAppointmentPending != "" {

			if err := r.SetQueryParam("appointment.pending", qAppointmentPending); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderActive != nil {

		// query param appointment.provider.active
		var qrAppointmentProviderActive bool

		if o.AppointmentProviderActive != nil {
			qrAppointmentProviderActive = *o.AppointmentProviderActive
		}
		qAppointmentProviderActive := swag.FormatBool(qrAppointmentProviderActive)
		if qAppointmentProviderActive != "" {

			if err := r.SetQueryParam("appointment.provider.active", qAppointmentProviderActive); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderCreatedAt != nil {

		// query param appointment.provider.created_at
		var qrAppointmentProviderCreatedAt string

		if o.AppointmentProviderCreatedAt != nil {
			qrAppointmentProviderCreatedAt = *o.AppointmentProviderCreatedAt
		}
		qAppointmentProviderCreatedAt := qrAppointmentProviderCreatedAt
		if qAppointmentProviderCreatedAt != "" {

			if err := r.SetQueryParam("appointment.provider.created_at", qAppointmentProviderCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderCreatedBy != nil {

		// query param appointment.provider.created_by
		var qrAppointmentProviderCreatedBy string

		if o.AppointmentProviderCreatedBy != nil {
			qrAppointmentProviderCreatedBy = *o.AppointmentProviderCreatedBy
		}
		qAppointmentProviderCreatedBy := qrAppointmentProviderCreatedBy
		if qAppointmentProviderCreatedBy != "" {

			if err := r.SetQueryParam("appointment.provider.created_by", qAppointmentProviderCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderGender != nil {

		// query param appointment.provider.gender
		var qrAppointmentProviderGender string

		if o.AppointmentProviderGender != nil {
			qrAppointmentProviderGender = *o.AppointmentProviderGender
		}
		qAppointmentProviderGender := qrAppointmentProviderGender
		if qAppointmentProviderGender != "" {

			if err := r.SetQueryParam("appointment.provider.gender", qAppointmentProviderGender); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderGivenName != nil {

		// query param appointment.provider.given_name
		var qrAppointmentProviderGivenName string

		if o.AppointmentProviderGivenName != nil {
			qrAppointmentProviderGivenName = *o.AppointmentProviderGivenName
		}
		qAppointmentProviderGivenName := qrAppointmentProviderGivenName
		if qAppointmentProviderGivenName != "" {

			if err := r.SetQueryParam("appointment.provider.given_name", qAppointmentProviderGivenName); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderID != nil {

		// query param appointment.provider.id
		var qrAppointmentProviderID string

		if o.AppointmentProviderID != nil {
			qrAppointmentProviderID = *o.AppointmentProviderID
		}
		qAppointmentProviderID := qrAppointmentProviderID
		if qAppointmentProviderID != "" {

			if err := r.SetQueryParam("appointment.provider.id", qAppointmentProviderID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderOrgID != nil {

		// query param appointment.provider.org_id
		var qrAppointmentProviderOrgID string

		if o.AppointmentProviderOrgID != nil {
			qrAppointmentProviderOrgID = *o.AppointmentProviderOrgID
		}
		qAppointmentProviderOrgID := qrAppointmentProviderOrgID
		if qAppointmentProviderOrgID != "" {

			if err := r.SetQueryParam("appointment.provider.org_id", qAppointmentProviderOrgID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderPrefix != nil {

		// query param appointment.provider.prefix
		var qrAppointmentProviderPrefix string

		if o.AppointmentProviderPrefix != nil {
			qrAppointmentProviderPrefix = *o.AppointmentProviderPrefix
		}
		qAppointmentProviderPrefix := qrAppointmentProviderPrefix
		if qAppointmentProviderPrefix != "" {

			if err := r.SetQueryParam("appointment.provider.prefix", qAppointmentProviderPrefix); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderRefID != nil {

		// query param appointment.provider.ref_id
		var qrAppointmentProviderRefID string

		if o.AppointmentProviderRefID != nil {
			qrAppointmentProviderRefID = *o.AppointmentProviderRefID
		}
		qAppointmentProviderRefID := qrAppointmentProviderRefID
		if qAppointmentProviderRefID != "" {

			if err := r.SetQueryParam("appointment.provider.ref_id", qAppointmentProviderRefID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderRole != nil {

		// query param appointment.provider.role
		var qrAppointmentProviderRole string

		if o.AppointmentProviderRole != nil {
			qrAppointmentProviderRole = *o.AppointmentProviderRole
		}
		qAppointmentProviderRole := qrAppointmentProviderRole
		if qAppointmentProviderRole != "" {

			if err := r.SetQueryParam("appointment.provider.role", qAppointmentProviderRole); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderSuffix != nil {

		// query param appointment.provider.suffix
		var qrAppointmentProviderSuffix string

		if o.AppointmentProviderSuffix != nil {
			qrAppointmentProviderSuffix = *o.AppointmentProviderSuffix
		}
		qAppointmentProviderSuffix := qrAppointmentProviderSuffix
		if qAppointmentProviderSuffix != "" {

			if err := r.SetQueryParam("appointment.provider.suffix", qAppointmentProviderSuffix); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderSurname != nil {

		// query param appointment.provider.surname
		var qrAppointmentProviderSurname string

		if o.AppointmentProviderSurname != nil {
			qrAppointmentProviderSurname = *o.AppointmentProviderSurname
		}
		qAppointmentProviderSurname := qrAppointmentProviderSurname
		if qAppointmentProviderSurname != "" {

			if err := r.SetQueryParam("appointment.provider.surname", qAppointmentProviderSurname); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneAbbreviation != nil {

		// query param appointment.provider.timezone.abbreviation
		var qrAppointmentProviderTimezoneAbbreviation string

		if o.AppointmentProviderTimezoneAbbreviation != nil {
			qrAppointmentProviderTimezoneAbbreviation = *o.AppointmentProviderTimezoneAbbreviation
		}
		qAppointmentProviderTimezoneAbbreviation := qrAppointmentProviderTimezoneAbbreviation
		if qAppointmentProviderTimezoneAbbreviation != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.abbreviation", qAppointmentProviderTimezoneAbbreviation); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneDst != nil {

		// query param appointment.provider.timezone.dst
		var qrAppointmentProviderTimezoneDst bool

		if o.AppointmentProviderTimezoneDst != nil {
			qrAppointmentProviderTimezoneDst = *o.AppointmentProviderTimezoneDst
		}
		qAppointmentProviderTimezoneDst := swag.FormatBool(qrAppointmentProviderTimezoneDst)
		if qAppointmentProviderTimezoneDst != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.dst", qAppointmentProviderTimezoneDst); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneGmtOffset != nil {

		// query param appointment.provider.timezone.gmt_offset
		var qrAppointmentProviderTimezoneGmtOffset int32

		if o.AppointmentProviderTimezoneGmtOffset != nil {
			qrAppointmentProviderTimezoneGmtOffset = *o.AppointmentProviderTimezoneGmtOffset
		}
		qAppointmentProviderTimezoneGmtOffset := swag.FormatInt32(qrAppointmentProviderTimezoneGmtOffset)
		if qAppointmentProviderTimezoneGmtOffset != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.gmt_offset", qAppointmentProviderTimezoneGmtOffset); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneID != nil {

		// query param appointment.provider.timezone.id
		var qrAppointmentProviderTimezoneID int32

		if o.AppointmentProviderTimezoneID != nil {
			qrAppointmentProviderTimezoneID = *o.AppointmentProviderTimezoneID
		}
		qAppointmentProviderTimezoneID := swag.FormatInt32(qrAppointmentProviderTimezoneID)
		if qAppointmentProviderTimezoneID != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.id", qAppointmentProviderTimezoneID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneTimeStart != nil {

		// query param appointment.provider.timezone.time_start
		var qrAppointmentProviderTimezoneTimeStart string

		if o.AppointmentProviderTimezoneTimeStart != nil {
			qrAppointmentProviderTimezoneTimeStart = *o.AppointmentProviderTimezoneTimeStart
		}
		qAppointmentProviderTimezoneTimeStart := qrAppointmentProviderTimezoneTimeStart
		if qAppointmentProviderTimezoneTimeStart != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.time_start", qAppointmentProviderTimezoneTimeStart); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneZoneCountryCode != nil {

		// query param appointment.provider.timezone.zone.country_code
		var qrAppointmentProviderTimezoneZoneCountryCode string

		if o.AppointmentProviderTimezoneZoneCountryCode != nil {
			qrAppointmentProviderTimezoneZoneCountryCode = *o.AppointmentProviderTimezoneZoneCountryCode
		}
		qAppointmentProviderTimezoneZoneCountryCode := qrAppointmentProviderTimezoneZoneCountryCode
		if qAppointmentProviderTimezoneZoneCountryCode != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.zone.country_code", qAppointmentProviderTimezoneZoneCountryCode); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneZoneID != nil {

		// query param appointment.provider.timezone.zone.id
		var qrAppointmentProviderTimezoneZoneID int32

		if o.AppointmentProviderTimezoneZoneID != nil {
			qrAppointmentProviderTimezoneZoneID = *o.AppointmentProviderTimezoneZoneID
		}
		qAppointmentProviderTimezoneZoneID := swag.FormatInt32(qrAppointmentProviderTimezoneZoneID)
		if qAppointmentProviderTimezoneZoneID != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.zone.id", qAppointmentProviderTimezoneZoneID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderTimezoneZoneName != nil {

		// query param appointment.provider.timezone.zone.name
		var qrAppointmentProviderTimezoneZoneName string

		if o.AppointmentProviderTimezoneZoneName != nil {
			qrAppointmentProviderTimezoneZoneName = *o.AppointmentProviderTimezoneZoneName
		}
		qAppointmentProviderTimezoneZoneName := qrAppointmentProviderTimezoneZoneName
		if qAppointmentProviderTimezoneZoneName != "" {

			if err := r.SetQueryParam("appointment.provider.timezone.zone.name", qAppointmentProviderTimezoneZoneName); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderUpdatedAt != nil {

		// query param appointment.provider.updated_at
		var qrAppointmentProviderUpdatedAt string

		if o.AppointmentProviderUpdatedAt != nil {
			qrAppointmentProviderUpdatedAt = *o.AppointmentProviderUpdatedAt
		}
		qAppointmentProviderUpdatedAt := qrAppointmentProviderUpdatedAt
		if qAppointmentProviderUpdatedAt != "" {

			if err := r.SetQueryParam("appointment.provider.updated_at", qAppointmentProviderUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentProviderUpdatedBy != nil {

		// query param appointment.provider.updated_by
		var qrAppointmentProviderUpdatedBy string

		if o.AppointmentProviderUpdatedBy != nil {
			qrAppointmentProviderUpdatedBy = *o.AppointmentProviderUpdatedBy
		}
		qAppointmentProviderUpdatedBy := qrAppointmentProviderUpdatedBy
		if qAppointmentProviderUpdatedBy != "" {

			if err := r.SetQueryParam("appointment.provider.updated_by", qAppointmentProviderUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.AppointmentRefID != nil {

		// query param appointment.ref_id
		var qrAppointmentRefID string

		if o.AppointmentRefID != nil {
			qrAppointmentRefID = *o.AppointmentRefID
		}
		qAppointmentRefID := qrAppointmentRefID
		if qAppointmentRefID != "" {

			if err := r.SetQueryParam("appointment.ref_id", qAppointmentRefID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentScheduleBlockID != nil {

		// query param appointment.schedule_block_id
		var qrAppointmentScheduleBlockID string

		if o.AppointmentScheduleBlockID != nil {
			qrAppointmentScheduleBlockID = *o.AppointmentScheduleBlockID
		}
		qAppointmentScheduleBlockID := qrAppointmentScheduleBlockID
		if qAppointmentScheduleBlockID != "" {

			if err := r.SetQueryParam("appointment.schedule_block_id", qAppointmentScheduleBlockID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentScheduleID != nil {

		// query param appointment.schedule_id
		var qrAppointmentScheduleID string

		if o.AppointmentScheduleID != nil {
			qrAppointmentScheduleID = *o.AppointmentScheduleID
		}
		qAppointmentScheduleID := qrAppointmentScheduleID
		if qAppointmentScheduleID != "" {

			if err := r.SetQueryParam("appointment.schedule_id", qAppointmentScheduleID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceActive != nil {

		// query param appointment.service.active
		var qrAppointmentServiceActive bool

		if o.AppointmentServiceActive != nil {
			qrAppointmentServiceActive = *o.AppointmentServiceActive
		}
		qAppointmentServiceActive := swag.FormatBool(qrAppointmentServiceActive)
		if qAppointmentServiceActive != "" {

			if err := r.SetQueryParam("appointment.service.active", qAppointmentServiceActive); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceConfigDurations != nil {

		// binding items for appointment.service.config.durations
		joinedAppointmentServiceConfigDurations := o.bindParamAppointmentServiceConfigDurations(reg)

		// query array param appointment.service.config.durations
		if err := r.SetQueryParam("appointment.service.config.durations", joinedAppointmentServiceConfigDurations...); err != nil {
			return err
		}
	}

	if o.AppointmentServiceConfigFixedDuration != nil {

		// query param appointment.service.config.fixed_duration
		var qrAppointmentServiceConfigFixedDuration int32

		if o.AppointmentServiceConfigFixedDuration != nil {
			qrAppointmentServiceConfigFixedDuration = *o.AppointmentServiceConfigFixedDuration
		}
		qAppointmentServiceConfigFixedDuration := swag.FormatInt32(qrAppointmentServiceConfigFixedDuration)
		if qAppointmentServiceConfigFixedDuration != "" {

			if err := r.SetQueryParam("appointment.service.config.fixed_duration", qAppointmentServiceConfigFixedDuration); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceCreatedAt != nil {

		// query param appointment.service.created_at
		var qrAppointmentServiceCreatedAt string

		if o.AppointmentServiceCreatedAt != nil {
			qrAppointmentServiceCreatedAt = *o.AppointmentServiceCreatedAt
		}
		qAppointmentServiceCreatedAt := qrAppointmentServiceCreatedAt
		if qAppointmentServiceCreatedAt != "" {

			if err := r.SetQueryParam("appointment.service.created_at", qAppointmentServiceCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceCreatedBy != nil {

		// query param appointment.service.created_by
		var qrAppointmentServiceCreatedBy string

		if o.AppointmentServiceCreatedBy != nil {
			qrAppointmentServiceCreatedBy = *o.AppointmentServiceCreatedBy
		}
		qAppointmentServiceCreatedBy := qrAppointmentServiceCreatedBy
		if qAppointmentServiceCreatedBy != "" {

			if err := r.SetQueryParam("appointment.service.created_by", qAppointmentServiceCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceDescription != nil {

		// query param appointment.service.description
		var qrAppointmentServiceDescription string

		if o.AppointmentServiceDescription != nil {
			qrAppointmentServiceDescription = *o.AppointmentServiceDescription
		}
		qAppointmentServiceDescription := qrAppointmentServiceDescription
		if qAppointmentServiceDescription != "" {

			if err := r.SetQueryParam("appointment.service.description", qAppointmentServiceDescription); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceID != nil {

		// query param appointment.service.id
		var qrAppointmentServiceID string

		if o.AppointmentServiceID != nil {
			qrAppointmentServiceID = *o.AppointmentServiceID
		}
		qAppointmentServiceID := qrAppointmentServiceID
		if qAppointmentServiceID != "" {

			if err := r.SetQueryParam("appointment.service.id", qAppointmentServiceID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceName != nil {

		// query param appointment.service.name
		var qrAppointmentServiceName string

		if o.AppointmentServiceName != nil {
			qrAppointmentServiceName = *o.AppointmentServiceName
		}
		qAppointmentServiceName := qrAppointmentServiceName
		if qAppointmentServiceName != "" {

			if err := r.SetQueryParam("appointment.service.name", qAppointmentServiceName); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceOrgID != nil {

		// query param appointment.service.org_id
		var qrAppointmentServiceOrgID string

		if o.AppointmentServiceOrgID != nil {
			qrAppointmentServiceOrgID = *o.AppointmentServiceOrgID
		}
		qAppointmentServiceOrgID := qrAppointmentServiceOrgID
		if qAppointmentServiceOrgID != "" {

			if err := r.SetQueryParam("appointment.service.org_id", qAppointmentServiceOrgID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceRefID != nil {

		// query param appointment.service.ref_id
		var qrAppointmentServiceRefID string

		if o.AppointmentServiceRefID != nil {
			qrAppointmentServiceRefID = *o.AppointmentServiceRefID
		}
		qAppointmentServiceRefID := qrAppointmentServiceRefID
		if qAppointmentServiceRefID != "" {

			if err := r.SetQueryParam("appointment.service.ref_id", qAppointmentServiceRefID); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceUpdatedAt != nil {

		// query param appointment.service.updated_at
		var qrAppointmentServiceUpdatedAt string

		if o.AppointmentServiceUpdatedAt != nil {
			qrAppointmentServiceUpdatedAt = *o.AppointmentServiceUpdatedAt
		}
		qAppointmentServiceUpdatedAt := qrAppointmentServiceUpdatedAt
		if qAppointmentServiceUpdatedAt != "" {

			if err := r.SetQueryParam("appointment.service.updated_at", qAppointmentServiceUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentServiceUpdatedBy != nil {

		// query param appointment.service.updated_by
		var qrAppointmentServiceUpdatedBy string

		if o.AppointmentServiceUpdatedBy != nil {
			qrAppointmentServiceUpdatedBy = *o.AppointmentServiceUpdatedBy
		}
		qAppointmentServiceUpdatedBy := qrAppointmentServiceUpdatedBy
		if qAppointmentServiceUpdatedBy != "" {

			if err := r.SetQueryParam("appointment.service.updated_by", qAppointmentServiceUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.AppointmentStartAt != nil {

		// query param appointment.start_at
		var qrAppointmentStartAt string

		if o.AppointmentStartAt != nil {
			qrAppointmentStartAt = *o.AppointmentStartAt
		}
		qAppointmentStartAt := qrAppointmentStartAt
		if qAppointmentStartAt != "" {

			if err := r.SetQueryParam("appointment.start_at", qAppointmentStartAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentState != nil {

		// query param appointment.state
		var qrAppointmentState string

		if o.AppointmentState != nil {
			qrAppointmentState = *o.AppointmentState
		}
		qAppointmentState := qrAppointmentState
		if qAppointmentState != "" {

			if err := r.SetQueryParam("appointment.state", qAppointmentState); err != nil {
				return err
			}
		}
	}

	if o.AppointmentStatus != nil {

		// query param appointment.status
		var qrAppointmentStatus string

		if o.AppointmentStatus != nil {
			qrAppointmentStatus = *o.AppointmentStatus
		}
		qAppointmentStatus := qrAppointmentStatus
		if qAppointmentStatus != "" {

			if err := r.SetQueryParam("appointment.status", qAppointmentStatus); err != nil {
				return err
			}
		}
	}

	if o.AppointmentType != nil {

		// query param appointment.type
		var qrAppointmentType string

		if o.AppointmentType != nil {
			qrAppointmentType = *o.AppointmentType
		}
		qAppointmentType := qrAppointmentType
		if qAppointmentType != "" {

			if err := r.SetQueryParam("appointment.type", qAppointmentType); err != nil {
				return err
			}
		}
	}

	if o.AppointmentUnavailable != nil {

		// query param appointment.unavailable
		var qrAppointmentUnavailable bool

		if o.AppointmentUnavailable != nil {
			qrAppointmentUnavailable = *o.AppointmentUnavailable
		}
		qAppointmentUnavailable := swag.FormatBool(qrAppointmentUnavailable)
		if qAppointmentUnavailable != "" {

			if err := r.SetQueryParam("appointment.unavailable", qAppointmentUnavailable); err != nil {
				return err
			}
		}
	}

	if o.AppointmentUpdatedAt != nil {

		// query param appointment.updated_at
		var qrAppointmentUpdatedAt string

		if o.AppointmentUpdatedAt != nil {
			qrAppointmentUpdatedAt = *o.AppointmentUpdatedAt
		}
		qAppointmentUpdatedAt := qrAppointmentUpdatedAt
		if qAppointmentUpdatedAt != "" {

			if err := r.SetQueryParam("appointment.updated_at", qAppointmentUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.AppointmentUpdatedBy != nil {

		// query param appointment.updated_by
		var qrAppointmentUpdatedBy string

		if o.AppointmentUpdatedBy != nil {
			qrAppointmentUpdatedBy = *o.AppointmentUpdatedBy
		}
		qAppointmentUpdatedBy := qrAppointmentUpdatedBy
		if qAppointmentUpdatedBy != "" {

			if err := r.SetQueryParam("appointment.updated_by", qAppointmentUpdatedBy); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.PatientID != nil {

		// query param patient_id
		var qrPatientID string

		if o.PatientID != nil {
			qrPatientID = *o.PatientID
		}
		qPatientID := qrPatientID
		if qPatientID != "" {

			if err := r.SetQueryParam("patient_id", qPatientID); err != nil {
				return err
			}
		}
	}

	if o.PatientRefID != nil {

		// query param patient_ref_id
		var qrPatientRefID string

		if o.PatientRefID != nil {
			qrPatientRefID = *o.PatientRefID
		}
		qPatientRefID := qrPatientRefID
		if qPatientRefID != "" {

			if err := r.SetQueryParam("patient_ref_id", qPatientRefID); err != nil {
				return err
			}
		}
	}

	if o.ProviderID != nil {

		// query param provider_id
		var qrProviderID string

		if o.ProviderID != nil {
			qrProviderID = *o.ProviderID
		}
		qProviderID := qrProviderID
		if qProviderID != "" {

			if err := r.SetQueryParam("provider_id", qProviderID); err != nil {
				return err
			}
		}
	}

	if o.ProviderRefID != nil {

		// query param provider_ref_id
		var qrProviderRefID string

		if o.ProviderRefID != nil {
			qrProviderRefID = *o.ProviderRefID
		}
		qProviderRefID := qrProviderRefID
		if qProviderRefID != "" {

			if err := r.SetQueryParam("provider_ref_id", qProviderRefID); err != nil {
				return err
			}
		}
	}

	if o.RangeFrom != nil {

		// query param range_from
		var qrRangeFrom string

		if o.RangeFrom != nil {
			qrRangeFrom = *o.RangeFrom
		}
		qRangeFrom := qrRangeFrom
		if qRangeFrom != "" {

			if err := r.SetQueryParam("range_from", qRangeFrom); err != nil {
				return err
			}
		}
	}

	if o.RangeTo != nil {

		// query param range_to
		var qrRangeTo string

		if o.RangeTo != nil {
			qrRangeTo = *o.RangeTo
		}
		qRangeTo := qrRangeTo
		if qRangeTo != "" {

			if err := r.SetQueryParam("range_to", qRangeTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSchedulerGetAppointments binds the parameter appointment.service.config.durations
func (o *SchedulerGetAppointmentsParams) bindParamAppointmentServiceConfigDurations(formats strfmt.Registry) []string {
	appointmentServiceConfigDurationsIR := o.AppointmentServiceConfigDurations

	var appointmentServiceConfigDurationsIC []string
	for _, appointmentServiceConfigDurationsIIR := range appointmentServiceConfigDurationsIR { // explode []int32

		appointmentServiceConfigDurationsIIV := swag.FormatInt32(appointmentServiceConfigDurationsIIR) // int32 as string
		appointmentServiceConfigDurationsIC = append(appointmentServiceConfigDurationsIC, appointmentServiceConfigDurationsIIV)
	}

	// items.CollectionFormat: "multi"
	appointmentServiceConfigDurationsIS := swag.JoinByFormat(appointmentServiceConfigDurationsIC, "multi")

	return appointmentServiceConfigDurationsIS
}

// bindParamSchedulerGetAppointments binds the parameter ids
func (o *SchedulerGetAppointmentsParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int32

		idsIIV := swag.FormatInt32(idsIIR) // int32 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}
