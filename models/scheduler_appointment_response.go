// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchedulerAppointmentResponse scheduler appointment response
//
// swagger:model schedulerAppointmentResponse
type SchedulerAppointmentResponse struct {

	// appointment
	Appointment *SchedulingAppointment `json:"appointment,omitempty"`

	// appointments
	Appointments []*SchedulingAppointment `json:"appointments"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// patient
	Patient *SchedulingPatient `json:"patient,omitempty"`

	// provider
	Provider *SchedulingProvider `json:"provider,omitempty"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this scheduler appointment response
func (m *SchedulerAppointmentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppointments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerAppointmentResponse) validateAppointment(formats strfmt.Registry) error {
	if swag.IsZero(m.Appointment) { // not required
		return nil
	}

	if m.Appointment != nil {
		if err := m.Appointment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointment")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerAppointmentResponse) validateAppointments(formats strfmt.Registry) error {
	if swag.IsZero(m.Appointments) { // not required
		return nil
	}

	for i := 0; i < len(m.Appointments); i++ {
		if swag.IsZero(m.Appointments[i]) { // not required
			continue
		}

		if m.Appointments[i] != nil {
			if err := m.Appointments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appointments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchedulerAppointmentResponse) validatePatient(formats strfmt.Registry) error {
	if swag.IsZero(m.Patient) { // not required
		return nil
	}

	if m.Patient != nil {
		if err := m.Patient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patient")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerAppointmentResponse) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduler appointment response based on the context it is used
func (m *SchedulerAppointmentResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppointments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePatient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerAppointmentResponse) contextValidateAppointment(ctx context.Context, formats strfmt.Registry) error {

	if m.Appointment != nil {
		if err := m.Appointment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointment")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerAppointmentResponse) contextValidateAppointments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Appointments); i++ {

		if m.Appointments[i] != nil {
			if err := m.Appointments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appointments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchedulerAppointmentResponse) contextValidatePatient(ctx context.Context, formats strfmt.Registry) error {

	if m.Patient != nil {
		if err := m.Patient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patient")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerAppointmentResponse) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {
		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulerAppointmentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulerAppointmentResponse) UnmarshalBinary(b []byte) error {
	var res SchedulerAppointmentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
