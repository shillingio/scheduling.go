// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchedulerScheduleBlockResponse scheduler schedule block response
//
// swagger:model schedulerScheduleBlockResponse
type SchedulerScheduleBlockResponse struct {

	// limit
	Limit int32 `json:"limit,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// schedule block
	ScheduleBlock *SchedulingScheduleBlock `json:"schedule_block,omitempty"`

	// schedule blocks
	ScheduleBlocks []*SchedulingScheduleBlock `json:"schedule_blocks"`

	// total
	Total int32 `json:"total,omitempty"`
}

// Validate validates this scheduler schedule block response
func (m *SchedulerScheduleBlockResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScheduleBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleBlocks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerScheduleBlockResponse) validateScheduleBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleBlock) { // not required
		return nil
	}

	if m.ScheduleBlock != nil {
		if err := m.ScheduleBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule_block")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerScheduleBlockResponse) validateScheduleBlocks(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleBlocks) { // not required
		return nil
	}

	for i := 0; i < len(m.ScheduleBlocks); i++ {
		if swag.IsZero(m.ScheduleBlocks[i]) { // not required
			continue
		}

		if m.ScheduleBlocks[i] != nil {
			if err := m.ScheduleBlocks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedule_blocks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schedule_blocks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this scheduler schedule block response based on the context it is used
func (m *SchedulerScheduleBlockResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScheduleBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleBlocks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerScheduleBlockResponse) contextValidateScheduleBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduleBlock != nil {
		if err := m.ScheduleBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule_block")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerScheduleBlockResponse) contextValidateScheduleBlocks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScheduleBlocks); i++ {

		if m.ScheduleBlocks[i] != nil {
			if err := m.ScheduleBlocks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedule_blocks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schedule_blocks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulerScheduleBlockResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulerScheduleBlockResponse) UnmarshalBinary(b []byte) error {
	var res SchedulerScheduleBlockResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
