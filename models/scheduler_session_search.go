// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchedulerSessionSearch scheduler session search
//
// swagger:model schedulerSessionSearch
type SchedulerSessionSearch struct {

	// Duration in minutes (15,30,45,60) this may vary based on your configuration
	Duration int32 `json:"duration,omitempty"`

	// Appointment format: virutal, in_person (default: virtual)
	Format string `json:"format,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// Maximum range to time UTC (i.e. Do not schedule later than 2 weeks from 'now')
	MaxRangeTo string `json:"max_range_to,omitempty"`

	// Minimum range from time UTC (i.e. Do not schedule before 24 hours from 'now')
	MinRangeFrom string `json:"min_range_from,omitempty"`

	// RFC3339 format (UTC)
	RangeFrom string `json:"range_from,omitempty"`

	// RFC3339 format (UTC)
	RangeTo string `json:"range_to,omitempty"`

	// Service ID to search
	ServiceID string `json:"service_id,omitempty"`

	// Two letter state abbreviation
	State string `json:"state,omitempty"`

	// Five digit US postal code
	Zipcode string `json:"zipcode,omitempty"`

	// IANA Timezone Name (ex: America/Los_Angeles, America/New_York, etc.) reference: https://www.iana.org/time-zones
	Zone string `json:"zone,omitempty"`
}

// Validate validates this scheduler session search
func (m *SchedulerSessionSearch) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this scheduler session search based on context it is used
func (m *SchedulerSessionSearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SchedulerSessionSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulerSessionSearch) UnmarshalBinary(b []byte) error {
	var res SchedulerSessionSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
