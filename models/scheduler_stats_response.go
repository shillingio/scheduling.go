// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchedulerStatsResponse scheduler stats response
//
// swagger:model schedulerStatsResponse
type SchedulerStatsResponse struct {

	// organizations stats
	OrganizationsStats map[string]SchedulingStats `json:"organizations_stats,omitempty"`

	// stats
	Stats *SchedulingStats `json:"stats,omitempty"`
}

// Validate validates this scheduler stats response
func (m *SchedulerStatsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationsStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerStatsResponse) validateOrganizationsStats(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationsStats) { // not required
		return nil
	}

	for k := range m.OrganizationsStats {

		if err := validate.Required("organizations_stats"+"."+k, "body", m.OrganizationsStats[k]); err != nil {
			return err
		}
		if val, ok := m.OrganizationsStats[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organizations_stats" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("organizations_stats" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchedulerStatsResponse) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduler stats response based on the context it is used
func (m *SchedulerStatsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrganizationsStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerStatsResponse) contextValidateOrganizationsStats(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.OrganizationsStats {

		if val, ok := m.OrganizationsStats[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SchedulerStatsResponse) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {
		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulerStatsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulerStatsResponse) UnmarshalBinary(b []byte) error {
	var res SchedulerStatsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
