// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchedulerSessionRequest scheduler session request
// Example: {"patient":{"id":"e59d0367-2595-4edc-83c6-08edd4fc525a"},"search":{"duration":30,"state":"CA"}}
//
// swagger:model schedulerSessionRequest
type SchedulerSessionRequest struct {

	// Pre-defined Appointment (only appointment.id or appointment.ref_id) this is only for rescheduling
	Appointment *SchedulingAppointment `json:"appointment,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// Optional Metadata to apply to the session
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// Pre-defined Patient (commonly only patient.id or patient.ref_id)
	Patient *SchedulingPatient `json:"patient,omitempty"`

	// Pre-defined Provider (commonly only provider.id or provider.ref_id)
	Provider *SchedulingProvider `json:"provider,omitempty"`

	// Redirect settings (see SessionRedirect for more info)
	Redirect *SchedulerSessionRedirect `json:"redirect,omitempty"`

	// Schedule appointment with current slot
	Schedule bool `json:"schedule,omitempty"`

	// Search Parameters (see SessionSearch for more details)
	Search *SchedulerSessionSearch `json:"search,omitempty"`

	// Pre-defined Service (only service.id or service.ref_id)
	Service *SchedulingService `json:"service,omitempty"`

	// Pre-defined Appointment (only appointment.id or appointment.ref_id) this is only for rescheduling
	Slot *SchedulingAppointmentSlot `json:"slot,omitempty"`
}

// Validate validates this scheduler session request
func (m *SchedulerSessionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerSessionRequest) validateAppointment(formats strfmt.Registry) error {
	if swag.IsZero(m.Appointment) { // not required
		return nil
	}

	if m.Appointment != nil {
		if err := m.Appointment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointment")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) validatePatient(formats strfmt.Registry) error {
	if swag.IsZero(m.Patient) { // not required
		return nil
	}

	if m.Patient != nil {
		if err := m.Patient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patient")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) validateRedirect(formats strfmt.Registry) error {
	if swag.IsZero(m.Redirect) { // not required
		return nil
	}

	if m.Redirect != nil {
		if err := m.Redirect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redirect")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) validateSearch(formats strfmt.Registry) error {
	if swag.IsZero(m.Search) { // not required
		return nil
	}

	if m.Search != nil {
		if err := m.Search.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("search")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("search")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) validateService(formats strfmt.Registry) error {
	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) validateSlot(formats strfmt.Registry) error {
	if swag.IsZero(m.Slot) { // not required
		return nil
	}

	if m.Slot != nil {
		if err := m.Slot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slot")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduler session request based on the context it is used
func (m *SchedulerSessionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePatient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedirect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulerSessionRequest) contextValidateAppointment(ctx context.Context, formats strfmt.Registry) error {

	if m.Appointment != nil {
		if err := m.Appointment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointment")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) contextValidatePatient(ctx context.Context, formats strfmt.Registry) error {

	if m.Patient != nil {
		if err := m.Patient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patient")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {
		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) contextValidateRedirect(ctx context.Context, formats strfmt.Registry) error {

	if m.Redirect != nil {
		if err := m.Redirect.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redirect")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) contextValidateSearch(ctx context.Context, formats strfmt.Registry) error {

	if m.Search != nil {
		if err := m.Search.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("search")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("search")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if m.Service != nil {
		if err := m.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulerSessionRequest) contextValidateSlot(ctx context.Context, formats strfmt.Registry) error {

	if m.Slot != nil {
		if err := m.Slot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulerSessionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulerSessionRequest) UnmarshalBinary(b []byte) error {
	var res SchedulerSessionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
